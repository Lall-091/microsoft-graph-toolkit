{"version":3,"file":"main.3483948f.iframe.bundle.js","mappingsoIA;AAGA;;AAuEA;;AAGA","sources":["webpack://root/src/components/templatedComponent.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { property, state } from 'lit/decorators.js';\nimport { html, PropertyValueMap, PropertyValues, TemplateResult } from 'lit';\n\nimport { equals } from '../utils/equals';\nimport { MgtBaseComponent } from './baseComponent';\nimport { TemplateContext } from '../utils/TemplateContext';\nimport { TemplateHelper } from '../utils/TemplateHelper';\n\n/**\n * Lookup for rendered component templates and contexts by slot name.\n */\ntype RenderedTemplates = Record<\n  string,\n  {\n    /**\n     * Reference to the data context used to render the slot.\n     */\n    context: Record<string, unknown>;\n    /**\n     * Reference to the rendered DOM element corresponding to the slot.\n     */\n    slot: HTMLElement;\n  }\n>;\n\nexport interface TemplateRenderedData {\n  templateType: string;\n  context: Record<string, unknown>;\n  element: HTMLElement;\n}\n\ntype OrderedHtmlTemplate = HTMLTemplateElement & { templateOrder: number };\n\n/**\n * An abstract class that defines a templatable web component\n *\n * @export\n * @abstract\n * @class MgtTemplatedComponent\n * @extends {MgtBaseComponent}\n *\n * @fires {CustomEvent<MgtElement.TemplateRenderedData>} templateRendered - fires when a template is rendered\n */\nexport abstract class MgtTemplatedComponent extends MgtBaseComponent {\n  /**\n   * Additional data context to be used in template binding\n   * Use this to add event listeners or value converters\n   *\n   * @type {MgtElement.TemplateContext}\n   * @memberof MgtTemplatedComponent\n   */\n  @property({ attribute: false }) public templateContext: TemplateContext;\n\n  /**\n   *\n   * Gets or sets the error (if any) of the request\n   *\n   * @type object\n   * @memberof MgtSearchResults\n   */\n  @state() protected error: object;\n\n  /**\n   * Holds all templates defined by developer\n   *\n   * @protected\n   * @memberof MgtTemplatedComponent\n   */\n  protected templates: Record<string, OrderedHtmlTemplate> = {};\n\n  private _renderedSlots = false;\n  private _renderedTemplates: RenderedTemplates = {};\n  private _slotNamesAddedDuringRender = [];\n\n  constructor() {\n    super();\n\n    this.templateContext = this.templateContext || {};\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValueMap<unknown> | Map<PropertyKey, unknown>) {\n    this.templates = this.getTemplates();\n    this._slotNamesAddedDuringRender = [];\n    super.update(changedProperties);\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param changedProperties Map of changed properties with old values\n   */\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    this.removeUnusedSlottedElements();\n  }\n\n  /**\n   * Render a <template> by type and return content to render\n   *\n   * @param templateType type of template (indicated by the data-type attribute)\n   * @param context the data context that should be expanded in template\n   * @param slotName the slot name that will be used to host the new rendered template. set to a unique value if multiple templates of this type will be rendered. default is templateType\n   */\n  protected renderTemplate(templateType: string, context: object, slotName?: string): TemplateResult {\n    if (!this.hasTemplate(templateType)) {\n      return null;\n    }\n\n    slotName = slotName || templateType;\n    this._slotNamesAddedDuringRender.push(slotName);\n    this._renderedSlots = true;\n\n    const template = html`\n      <slot name=${slotName}></slot>\n    `;\n\n    const dataContext = { ...context, ...this.templateContext };\n\n    if (Object.prototype.hasOwnProperty.call(this._renderedTemplates, slotName)) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const { context: existingContext, slot } = this._renderedTemplates[slotName];\n      if (equals(existingContext, dataContext)) {\n        return template;\n      }\n      this.removeChild(slot);\n    }\n\n    const div = document.createElement('div');\n    div.slot = slotName;\n    div.dataset.generated = 'template';\n\n    TemplateHelper.renderTemplate(div, this.templates[templateType], dataContext);\n\n    this.appendChild(div);\n\n    this._renderedTemplates[slotName] = { context: dataContext, slot: div };\n\n    const templateRenderedData: TemplateRenderedData = { templateType, context: dataContext, element: div };\n    this.fireCustomEvent('templateRendered', templateRenderedData);\n\n    return template;\n  }\n\n  /**\n   * Check if a specific template has been provided.\n   *\n   * @protected\n   * @param {string} templateName\n   * @returns {boolean}\n   * @memberof MgtTemplatedComponent\n   */\n  protected hasTemplate(templateName: string): boolean {\n    return Boolean(this.templates?.[templateName]);\n  }\n\n  private getTemplates() {\n    const templates: Record<string, OrderedHtmlTemplate> = {};\n\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (child.nodeName === 'TEMPLATE') {\n        const template = child as OrderedHtmlTemplate;\n        if (template.dataset.type) {\n          templates[template.dataset.type] = template;\n        } else {\n          templates.default = template;\n        }\n\n        template.templateOrder = i;\n      }\n    }\n\n    return templates;\n  }\n\n  /**\n   * Renders an error\n   *\n   * @returns\n   */\n  protected renderError(): TemplateResult {\n    if (this.hasTemplate('error')) {\n      return this.renderTemplate('error', this.error);\n    }\n\n    return html`\n      <div class=\"error\">\n        ${this.error}\n      </div>\n    `;\n  }\n\n  private removeUnusedSlottedElements() {\n    if (this._renderedSlots) {\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i] as HTMLElement;\n        if (child.dataset?.generated && !this._slotNamesAddedDuringRender.includes(child.slot)) {\n          this.removeChild(child);\n          delete this._renderedTemplates[child.slot];\n          i--;\n        }\n      }\n      this._renderedSlots = false;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}