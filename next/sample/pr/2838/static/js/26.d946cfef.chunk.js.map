{"version":3,"file":"static/js/26.d946cfef.chunk.js","mappings":"iMAIMA,GAAYC,EAAAA,EAAAA,GAAW,CAC3BC,KAAM,CACJC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,uBAEVC,QAAS,CACPC,YAAa,UAQJC,EAAkD,SAACC,GAC9D,IAAMC,EAASX,IACf,OACEY,EAAAA,EAAAA,MAAA,OAAKC,UAAWF,EAAOT,KAAKY,SAAA,EAC1BC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,KACRD,EAAAA,EAAAA,KAAA,OAAKF,UAAWF,EAAOJ,QAAQO,UAC7BC,EAAAA,EAAAA,KAAA,QAAAD,SAAOJ,EAAMH,SAAW,mBAIhC,C,sGCtBMP,GAAYC,EAAAA,EAAAA,GAAW,CAC3BgB,QAAS,CACPZ,WAAY,aACZa,WAAY,OACZC,aAAc,UAILC,EAAwD,SAAAV,GACnE,IAAMC,EAASX,IACf,OACEY,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKJ,EAAMW,SACXN,EAAAA,EAAAA,KAAA,OAAAD,SAAMJ,EAAMY,eACZP,EAAAA,EAAAA,KAACQ,EAAAA,EAAO,CAACV,UAAWF,EAAOM,YAGjC,C,2VCnBMjB,GAAYC,EAAAA,EAAAA,GAAW,CAC3BuB,KAAM,CACJhB,YAAa,MACbiB,aAAc,MACdtB,QAAS,OACTE,WAAY,SACZC,OAAQ,OACRoB,OAAQ,UACR,SAAU,CACRC,gBAAiB,wCAGrBC,OAAQ,CACND,gBAAiB,0CAEnBE,OAAQ,CACNC,WAAY,OACZ,6BAA8B,2BAC9B,6BAA8B,OAC9B,uBAAwB,OACxB,2BAA4B,yBAC5B,4BAA6B,iCAC7B,8BAA+B,CAC7BC,SAAU,yBACVC,WAAY,4BAEd,iCAA+BC,EAAAA,EAAAA,GAAA,CAC7BC,WAAY,SACZC,aAAc,WACdC,MAAO,QACPjC,QAAS,eACT4B,SAAU,0BACVM,MAAO,kCACJC,EAAAA,GAAWC,SAAS,YAG3BC,MAAO,CACLtB,WAAY,OAEduB,gBAAcR,EAAAA,EAAAA,GAAA,CACZC,WAAY,SACZC,aAAc,WACdC,MAAO,QACPjC,QAAS,gBACNmC,EAAAA,GAAWC,SAAS,aA6DrBG,EAAWC,EAAAA,MAAW,SAAAC,GAAqF,IAAlFpB,EAAIoB,EAAJpB,KAAMqB,EAAUD,EAAVC,WAAYC,EAAUF,EAAVE,WAAYC,EAAMH,EAANG,OACrDpC,EAASX,IACfgD,GAA4CC,EAAAA,EAAAA,UAA6B,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArEP,EAAcS,EAAA,GAAEE,EAAiBF,EAAA,GAElCG,GAAwBC,EAAAA,EAAAA,cAC5B,SAAC9B,GAAgB,IAAD+B,EAAAC,EACRC,EAAqB,QAAfF,EAAG/B,EAAKkC,eAAO,IAAAH,OAAA,EAAZA,EAAcI,MAAK,SAAAC,GAAC,OAAKA,EAAgCb,SAAWA,CAAM,IAEzF,OAAIU,EACMA,EAAqCV,OACX,KAAb,QAAZS,EAAAhC,EAAKkC,eAAO,IAAAF,OAAA,EAAZA,EAAcK,SAAiBrC,EAAKkC,QAAQ,GAAiCX,SAAWA,EAC1FA,OADF,CAKT,GACA,CAACA,IAGGe,GAAgBR,EAAAA,EAAAA,cAAY,SAAC9B,GACjC,IAKOuC,EAAAC,EALDC,EAAK,IAAIC,KAAKC,WAAW,MAC3BC,EAAyB,GAE7B,OAAI5C,EAAK6C,MACA7C,EAAK6C,OAEA,QAAZN,EAAAvC,EAAKkC,eAAO,IAAAK,GAA+C,QAA/CC,EAAZD,EAAcO,QAAO,SAAAb,GAAM,OAAIA,EAAe,SAAMV,CAAM,WAAC,IAAAiB,GAA3DA,EACIO,SAAQ,SAAAd,GAAW,IAADe,EAClBJ,EAAaK,KAAuB,QAAnBD,EAACf,EAAOiB,mBAAW,IAAAF,OAAA,EAAlBA,EAAoBG,MAAM,KAAK,GACnD,IAEKV,EAAGW,OAAOR,GAErB,GAAG,CAACrB,IAMJ,OAJAJ,EAAAA,WAAgB,WACdS,EA9EsB,SAAC5B,EAAYuB,GAAyC,IAAD8B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAGmBC,EAAAC,EAAAC,EAOpCC,EAAAC,EARxDC,EAAU,GAQd,GAPQ,OAAJnE,QAAI,IAAJA,GAAwB,QAApBqD,EAAJrD,EAAMoE,0BAAkB,IAAAf,GAAM,QAANC,EAAxBD,EAA0BgB,YAAI,IAAAf,GAA9BA,EAAgCgB,OAAY,OAAJtE,QAAI,IAAJA,GAAwB,QAApBuD,EAAJvD,EAAMoE,0BAAkB,IAAAb,GAAM,QAANC,EAAxBD,EAA0Bc,YAAI,IAAAb,OAA1B,EAAJA,EAAgCc,KAAKC,MAAOhD,GACtF4C,GAAe,OAAJnE,QAAI,IAAJA,GAAwB,QAApB8D,EAAJ9D,EAAMoE,0BAAkB,IAAAN,GAAM,QAANC,EAAxBD,EAA0BO,YAAI,IAAAN,GAAkB,QAAlBC,EAA9BD,EAAgCO,KAAKpB,mBAAW,IAAAc,OAA5C,EAAJA,EAAkDb,MAAM,KAAK,GACxEgB,GAAW,MAEXA,GAAW,QAGuC,UAA5C,OAAJnE,QAAI,IAAJA,GAAwB,QAApByD,EAAJzD,EAAMoE,0BAAkB,IAAAX,GAAM,QAANC,EAAxBD,EAA0Be,YAAI,IAAAd,OAA1B,EAAJA,EAAgCe,aAClCN,GAAe,OAAJnE,QAAI,IAAJA,GAAwB,QAApBiE,EAAJjE,EAAMoE,0BAAkB,IAAAH,GAAM,QAANC,EAAxBD,EAA0BO,YAAI,IAAAN,OAA1B,EAAJA,EAAgCQ,aACtC,GAAoD,UAA5C,OAAJ1E,QAAI,IAAJA,GAAwB,QAApB2D,EAAJ3D,EAAMoE,0BAAkB,IAAAT,GAAM,QAANC,EAAxBD,EAA0Ba,YAAI,IAAAZ,OAA1B,EAAJA,EAAgCa,aAAwB,CAAC,IAADE,EAAAC,EAC3DC,EAAW,OAAJ7E,QAAI,IAAJA,GAAwB,QAApB2E,EAAJ3E,EAAMoE,0BAAkB,IAAAO,GAAM,QAANC,EAAxBD,EAA0BH,YAAI,IAAAI,OAA1B,EAAJA,EAAgCF,QAEvCI,GADS,IAAIC,WACAC,gBAAgBH,EAAM,aAEnCI,EAASH,EAAII,iBAAiB,OAC9BC,EAAOL,EAAIM,cAAc,cACzBC,EAAaP,EAAIM,cAAc,gBAGrC,GAF2BN,EAAIM,cAAc,uBAEnBC,EAAY,OAEtClB,GAAWW,EAAIN,KAAKc,aAAeR,EAAIN,KAAKe,WAAa,GAErDN,IACEO,MAAMnB,KAAKY,EAAOQ,UAAUtD,MAAK,SAAAuD,GAAC,OAAIA,EAAEC,IAAIC,SAAS,OAAO,IAC9DzB,GAAW,oBAEXA,GAAW,kBAIXgB,IACFhB,EAAU,cAEd,CAEA,OAAc,QAAdN,EAAOM,SAAO,IAAAN,OAAA,EAAPA,EAASgC,OAAOC,QAAQ,YAAa,IAAIA,QAAQ,OAAQ,IAClE,CAsCsBC,CAAkB/F,EAAMuB,GAC5C,GAAG,CAACvB,EAAMuB,KAGRhC,EAAAA,EAAAA,KAAAyG,EAAAA,SAAA,CAAA1G,SACGiC,IACCnC,EAAAA,EAAAA,MAAA,OAAKC,WAAW4G,EAAAA,EAAAA,GAAa9G,EAAOa,KAAK,GAADkG,OAAK7E,GAAclC,EAAOiB,SAAUd,SAAA,CACvD,aAAlBU,EAAKmG,WACJ5G,EAAAA,EAAAA,KAAC6G,EAAAA,EAAM,CACL7E,OAAQM,EAAsB7B,GAC9BqG,KAAMpF,EAAiBqF,EAAAA,EAASC,SAAWD,EAAAA,EAASE,QACpDC,WAAW,OACXC,cAAc,EACdC,QAAS,kBAAMrF,EAAWtB,EAAK,EAC/BX,UAAWF,EAAOkB,OAAOf,SAExB2B,IACC1B,EAAAA,EAAAA,KAACqH,EAAc,CAACC,SAAS,QAAQ7G,KAAMA,EAAMuB,OAAQA,EAAQN,eAAgBA,MAIhE,UAAlBjB,EAAKmG,WACJ/G,EAAAA,EAAAA,MAAA,OAAKuH,QAAS,kBAAMrF,EAAWtB,EAAK,EAACV,SAAA,EACnCC,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,CACNC,cAAc,SACdC,KAAK,cACLC,KAAM3E,EAActC,GACpBkH,cAAejG,EACfkG,OAAQ,CAAEC,MAAM7H,EAAAA,EAAAA,KAAC8H,EAAAA,IAAmB,IAAKC,SAAU,MACnDjI,WAAW4G,EAAAA,EAAAA,GAAa9G,EAAOkB,OAAQlB,EAAO6B,UAEhDzB,EAAAA,EAAAA,KAAA,cAGe,YAAlBS,EAAKmG,WACJ5G,EAAAA,EAAAA,KAAA,OAAKoH,QAAS,kBAAMrF,EAAWtB,EAAK,EAACV,UACnCC,EAAAA,EAAAA,KAACuH,EAAAA,EAAO,CACNC,cAAc,SACdC,KAAK,cACL3H,WAAW4G,EAAAA,EAAAA,GAAa9G,EAAOkB,OAAQlB,EAAO6B,OAC9CmG,OAAQ,CAAEC,MAAM7H,EAAAA,EAAAA,KAACgI,EAAAA,IAAiB,IAAKD,SAAU,MACjDL,KAAM3E,EAActC,GACpBkH,cAAejG,UAQ/B,IAEM2F,EAAiB,SAAC1H,GACtB,IAAMC,EAASX,IAEf,OACEe,EAAAA,EAAAA,KAAAyG,EAAAA,SAAA,CAAA1G,SACGJ,EAAM+B,iBACL1B,EAAAA,EAAAA,KAAA,QAAMF,UAAWF,EAAO8B,eAAe3B,SAAEJ,EAAM+B,kBAIvD,EAEA,EAAeE,EAAAA,KAAWD,GCxJ1B,EArDyB,SAAChC,GACxB,IACMsI,EADYtI,EAAMuI,YAAhBC,MAERlG,GAA4BC,EAAAA,EAAAA,YAAkBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCD,EAAMG,EAAA,GAAEiG,EAASjG,EAAA,GACxBkG,GAAwCnG,EAAAA,EAAAA,UAA8C+F,EAAM,IAAGK,GAAAlG,EAAAA,EAAAA,GAAAiG,EAAA,GAAxFE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,EAAiB7G,EAAAA,aACrB,SAAC8G,GACCF,EAAgBE,GAChB/I,EAAMoC,WAAWwG,EACnB,GACA,CAACC,EAAiBD,EAAc5I,IAKlCiC,EAAAA,WAAgB,WACd6G,EAAeF,EACjB,IAEA3G,EAAAA,WAAgB,WACd,IAAM+G,EAAO,eAAA9G,GAAA+G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACGC,EAAAA,EAAUL,KAAK,KAAD,EAAzBA,EAAEE,EAAAI,KACRlB,EAAUY,EAAGhE,IAAI,wBAAAkE,EAAAK,OAAA,GAAAR,EAAA,KAClB,kBAHY,OAAAlH,EAAA2H,MAAA,KAAAC,UAAA,KAIRzH,GACE2G,GAET,GAAG,CAAC3G,IAUJ,OACEhC,EAAAA,EAAAA,KAAA,OAAAD,SACGkI,EAAM1E,QAAO,SAAAmG,GAAC,IAAAC,EAAA,OAAa,QAATA,EAAAD,EAAE/G,eAAO,IAAAgH,OAAA,EAATA,EAAW7G,QAAU,CAAC,IAAE8G,KAAI,SAACF,EAAGG,GAAK,OACtD7J,EAAAA,EAAAA,KAAC2B,EAAQ,CAEPlB,KAAMiJ,EACN5H,YAAcyG,GAA0B,IAAVsB,IAdhBpJ,EAc6CiJ,IAb7DnB,GACKA,GAAgB9H,EAAKuE,MAAmB,OAAZuD,QAAY,IAAZA,OAAY,EAAZA,EAAcvD,KAa7CjD,WAAY0G,EACZzG,OAAQA,GAJH0H,EAAE1E,IAZM,IAACvE,CAiBd,KAIV,ECtCMxB,GAAYC,EAAAA,EAAAA,GAAW,CAC3B4K,UAAW,CACT1K,QAAS,OACT2K,cAAe,OAEjBC,QAAM9I,EAAAA,EAAAA,GAAA,GACDK,EAAAA,GAAW0I,QAAQ,SAExBC,MAAIhJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACF9B,QAAS,OACT2K,cAAe,SACfI,SAAU,SACV9I,MAAO,QACP+I,SAAU,SACP7I,EAAAA,GAAWC,SAAS,SAAO,IAC9B6I,UAAW,OACXC,iBAAkB,6BAClBC,iBAAkB,QAClBC,iBAAkB,QAEpBC,MAAIvJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACF9B,QAAS,OACT2K,cAAe,SACfI,SAAU,SACV9I,MAAO,OACJE,EAAAA,GAAWC,SAAS,SAAO,IAC9B6I,UAAW,OACX9K,OAAQ,SAEVmL,QAAS,CACPC,cAAe,OACfC,YAAa,MACbC,WAAY,QAEdC,OAAQ,CACN1L,QAAS,SAEX2L,cAAe,CACbC,QAAS,WAyEPC,EAAWrJ,EAAAA,MAAW,SAACjC,GAC3B,OACEE,EAAAA,EAAAA,MAACqL,EAAAA,EAAG,CACFC,SAAUxL,EAAMyL,YAChBC,OAAQ,CAAC,aAAatL,SAAA,EAEtBC,EAAAA,EAAAA,KAACsL,EAAgB,CACfhE,SAAS,UACTvF,WAAYpC,EAAM8I,kBAEpBzI,EAAAA,EAAAA,KAACN,EAAAA,EAAO,CAAC4H,SAAS,UAAU9H,QAAS,4BAG3C,IAEA,EApF0C,WACxC,IAAMI,EAASX,IAETsM,EAAkB,SAACC,GACvB,IAAMC,EAAO,IAAIC,KAEjB,OADAD,EAAKE,SAASF,EAAKG,WAAaJ,GACzBC,EAAKI,aACd,EAEAC,EAAsClK,EAAAA,SAAe,6IAAD+E,OAA8I4E,EAChM,KACEQ,GAAA3J,EAAAA,EAAAA,GAAA0J,EAAA,GAFGV,EAAWW,EAAA,GAAEC,EAAcD,EAAA,GAIlCE,EAAwCrK,EAAAA,WAA2BsK,GAAA9J,EAAAA,EAAAA,GAAA6J,EAAA,GAA5D1D,EAAY2D,EAAA,GAAE1D,EAAe0D,EAAA,GACpCC,EAA0CvK,EAAAA,UAAe,GAAMwK,GAAAhK,EAAAA,EAAAA,GAAA+J,EAAA,GAAxDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAYtC,OACEvM,EAAAA,EAAAA,MAAA4G,EAAAA,SAAA,CAAA1G,SAAA,EACEC,EAAAA,EAAAA,KAACK,EAAAA,EAAU,CACTC,MAAO,QACPC,YAAa,+DAGfV,EAAAA,EAAAA,MAAA,OAAKC,UAAWF,EAAOkK,UAAU/J,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,OAAKC,WAAW4G,EAAAA,EAAAA,GAAa9G,EAAOoK,OAAQpK,EAAOsK,MAAMnK,SAAA,EACvDC,EAAAA,EAAAA,KAAA,OAAKF,UAAWF,EAAO8K,QAAQ3K,UAC7BF,EAAAA,EAAAA,MAAC0M,EAAAA,EAAM,CAACC,KAAMH,EAActM,SAAA,EAC1BC,EAAAA,EAAAA,KAACyM,EAAAA,EAAa,CAACC,0BAAwB,EAAA3M,UACrCC,EAAAA,EAAAA,KAAC2M,EAAAA,EAAM,CAACC,WAAW,UAAUxF,QAAS,kBAAMkF,GAAiB,EAAK,EAACvM,SAAC,gBAItEC,EAAAA,EAAAA,KAAC6M,EAAAA,EAAa,CAAC/M,UAAWF,EAAOmL,cAAchL,UAC7CF,EAAAA,EAAAA,MAACiN,EAAAA,EAAU,CAAChN,UAAWF,EAAOkL,OAAO/K,SAAA,EACnCC,EAAAA,EAAAA,KAAC+M,EAAAA,EAAW,CAAAhN,SAAC,cACbC,EAAAA,EAAAA,KAACgN,EAAAA,GAAO,CACNC,cA9BI,SAACvE,GACjBA,EAAE1D,MAAmB,OAAZuD,QAAY,IAAZA,OAAY,EAAZA,EAAcvD,KAAMqH,IAC/BC,GAAiB,GACjBN,EAAe,6IAADrF,OAA8I4E,EAC1J,MAGJ/C,EAAgBE,EAClB,EAuBkBwE,gBAAiB,WACfZ,GAAiB,EACnB,eAMVtM,EAAAA,EAAAA,KAACiL,EAAQ,CAACxC,eAAgBD,EAAiB4C,YAAaA,QAG1DpL,EAAAA,EAAAA,KAAA,OAAKF,UAAWF,EAAO6K,KAAK1K,SAAEwI,IAAgBvI,EAAAA,EAAAA,KAACmN,EAAAA,GAAI,CAACC,OAAQ7E,EAAavD,YAIjF,C,uEChGakG,GAAMmC,E,SAAAA,GAAkB,MAAOC,EAAAA,G","sources":["components/Loading.tsx","components/PageHeader.tsx","pages/Chats/ChatItem.tsx","pages/Chats/ChatListTemplate.tsx","pages/ChatPage.tsx","../../../packages/mgt-react/src/generated/get.ts"],"sourcesContent":["import * as React from 'react';\nimport { MgtTemplateProps, Spinner } from '@microsoft/mgt-react';\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 'calc(100vh - 300px)'\n  },\n  message: {\n    paddingLeft: '10px'\n  }\n});\n\nexport interface ILoadingProps extends MgtTemplateProps {\n  message?: string;\n}\n\nexport const Loading: React.FunctionComponent<ILoadingProps> = (props: ILoadingProps) => {\n  const styles = useStyles();\n  return (\n    <div className={styles.root}>\n      <Spinner />\n      <div className={styles.message}>\n        <span>{props.message || 'Loading...'}</span>\n      </div>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { Divider, makeStyles } from '@fluentui/react-components';\n\nexport interface IPageHeaderProps {\n  title: string;\n  description: string;\n}\n\nconst useStyles = makeStyles({\n  divider: {\n    alignItems: 'self-start',\n    paddingTop: '20px',\n    marginBottom: '20px'\n  }\n});\n\nexport const PageHeader: React.FunctionComponent<IPageHeaderProps> = props => {\n  const styles = useStyles();\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <div>{props.description}</div>\n      <Divider className={styles.divider} />\n    </div>\n  );\n};\n","import { Persona, makeStyles, mergeClasses, shorthands } from '@fluentui/react-components';\nimport { MgtTemplateProps, Person, ViewType } from '@microsoft/mgt-react';\nimport { Chat, AadUserConversationMember } from '@microsoft/microsoft-graph-types';\nimport React, { useCallback, useState } from 'react';\nimport { PeopleTeam16Regular, Calendar16Regular } from '@fluentui/react-icons';\n\nconst useStyles = makeStyles({\n  chat: {\n    paddingLeft: '5px',\n    paddingRight: '5px',\n    display: 'flex',\n    alignItems: 'center',\n    height: '50px',\n    cursor: 'pointer',\n    ':hover': {\n      backgroundColor: 'var(--colorNeutralBackground1Hover)'\n    }\n  },\n  active: {\n    backgroundColor: 'var(--colorNeutralBackground1Selected)'\n  },\n  person: {\n    userSelect: 'none',\n    '--person-line1-font-weight': 'var(--fontWeightRegular)',\n    '--person-avatar-size-small': '40px',\n    '--person-avatar-size': '40px',\n    '--person-line2-font-size': 'var(--fontSizeBase200)',\n    '--person-line2-text-color': 'var(--colorNeutralForeground4)',\n    '& .fui-Persona__primaryText': {\n      fontSize: 'var(--fontSizeBase300)',\n      fontWeight: 'var(--fontWeightRegular)',\n    },\n    '& .fui-Persona__secondaryText': {\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      width: '200px',\n      display: 'inline-block',\n      fontSize: 'var(--fontSizeBase200);',\n      color: 'var(--colorNeutralForeground4)',\n      ...shorthands.overflow('hidden')\n    }\n  },\n  group: {\n    paddingTop: '5px',\n  },\n  messagePreview: {\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    width: '200px',\n    display: 'inline-block',\n    ...shorthands.overflow('hidden')\n  }\n});\n\nexport interface ChatInteractionProps {\n  onSelected: (selected: Chat) => void;\n  selectedChat?: Chat;\n}\n\ninterface ChatItemProps {\n  chat: Chat;\n  isSelected?: boolean;\n  userId?: string;\n}\n\ninterface MessagePreviewProps {\n  messagePreview?: string;\n}\n\nconst getMessagePreview = (chat: Chat, userId?: string): string | undefined => {\n\n  let preview = \"\";\n  if (chat?.lastMessagePreview?.from?.user && chat?.lastMessagePreview?.from?.user.id !== userId) {\n    preview += chat?.lastMessagePreview?.from?.user.displayName?.split(' ')[0]!;\n    preview += \": \";\n  } else {\n    preview += \"You: \";\n  }\n\n  if (chat?.lastMessagePreview?.body?.contentType === 'text') {\n    preview += chat?.lastMessagePreview?.body?.content;\n  } else if (chat?.lastMessagePreview?.body?.contentType === 'html') {\n    const html = chat?.lastMessagePreview?.body?.content!;\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n\n    const images = doc.querySelectorAll('img');\n    const card = doc.querySelector('attachment');\n    const systemCard = doc.querySelector('span[itemId]');\n    const systemEventMessage = doc.querySelector('systemEventMessage');\n\n    if (systemEventMessage || systemCard) return undefined;\n\n    preview += doc.body.textContent || doc.body.innerText || \"\";\n\n    if (images) {\n      if (Array.from(images.values()).find(i => i.src.includes('.gif'))) {\n        preview += \" 📷 GIF\";\n      } else {\n        preview += \" Sent an image\";\n      }\n    }\n\n    if (card) {\n      preview = \"Sent a card\";\n    }\n  }\n\n  return preview?.trim().replace(/[\\n\\t\\r]/g, \"\").replace(/\\s+/g, ' ');\n};\n\nconst ChatItem = React.memo(({ chat, isSelected, onSelected, userId }: ChatItemProps & ChatInteractionProps) => {\n  const styles = useStyles();\n  const [messagePreview, setMessagePreview] = useState<string | undefined>(\"\");\n\n  const getOtherParticipantId = useCallback(\n    (chat: Chat) => {\n      const member = chat.members?.find(m => (m as AadUserConversationMember).userId !== userId);\n\n      if (member) {\n        return (member as AadUserConversationMember).userId as string;\n      } else if (chat.members?.length === 1 && (chat.members[0] as AadUserConversationMember).userId === userId) {\n        return userId;\n      }\n\n      return undefined;\n    },\n    [userId]\n  );\n\n  const getGroupTitle = useCallback((chat: Chat) => {\n    const lf = new Intl.ListFormat('en');\n    let groupMembers: string[] = [];\n\n    if (chat.topic) {\n      return chat.topic;\n    } else {\n      chat.members?.filter(member => member[\"userId\"] !== userId)\n        ?.forEach(member => {\n          groupMembers.push(member.displayName?.split(' ')[0]!);\n        });\n\n      return lf.format(groupMembers);\n    }\n  }, [userId]);\n\n  React.useEffect(() => {\n    setMessagePreview(getMessagePreview(chat, userId));\n  }, [chat, userId]);\n\n  return (\n    <>\n      {userId && (\n        <div className={mergeClasses(styles.chat, `${isSelected && styles.active}`)}>\n          {chat.chatType === 'oneOnOne' && (\n            <Person\n              userId={getOtherParticipantId(chat)}\n              view={messagePreview ? ViewType.twolines : ViewType.oneline}\n              avatarSize=\"auto\"\n              showPresence={true}\n              onClick={() => onSelected(chat)}\n              className={styles.person}\n            >\n              {messagePreview && (\n                <MessagePreview template=\"line2\" chat={chat} userId={userId} messagePreview={messagePreview} />\n              )}\n            </Person>\n          )}\n          {chat.chatType === 'group' && (\n            <div onClick={() => onSelected(chat)}>\n              <Persona\n                textAlignment=\"center\"\n                size=\"extra-large\"\n                name={getGroupTitle(chat)}\n                secondaryText={messagePreview}\n                avatar={{ icon: <PeopleTeam16Regular />, initials: null }}\n                className={mergeClasses(styles.person, styles.group)}\n              />\n              <span></span>\n            </div>\n          )}\n          {chat.chatType === 'meeting' && (\n            <div onClick={() => onSelected(chat)}>\n              <Persona\n                textAlignment=\"center\"\n                size=\"extra-large\"\n                className={mergeClasses(styles.person, styles.group)}\n                avatar={{ icon: <Calendar16Regular />, initials: null }}\n                name={getGroupTitle(chat)}\n                secondaryText={messagePreview}\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n});\n\nconst MessagePreview = (props: MgtTemplateProps & ChatItemProps & MessagePreviewProps) => {\n  const styles = useStyles();\n\n  return (\n    <>\n      {props.messagePreview && (\n        <span className={styles.messagePreview}>{props.messagePreview}</span>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(ChatItem);\n","import React, { useState } from 'react';\nimport { MgtTemplateProps, Providers } from '@microsoft/mgt-react';\nimport { Chat } from '@microsoft/microsoft-graph-types';\nimport ChatItem, { ChatInteractionProps } from './ChatItem';\nimport { Chat as GraphChat } from '@microsoft/microsoft-graph-types';\n\nconst ChatListTemplate = (props: MgtTemplateProps & ChatInteractionProps) => {\n  const { value } = props.dataContext;\n  const chats: Chat[] = value;\n  const [userId, setUserId] = useState<string>();\n  const [selectedChat, setSelectedChat] = useState<GraphChat>(/*props.selectedChat || */chats[0]);\n\n  const onChatSelected = React.useCallback(\n    (e: GraphChat) => {\n      setSelectedChat(e);\n      props.onSelected(selectedChat);\n    },\n    [setSelectedChat, selectedChat, props]\n  );\n\n  // Set the selected chat to the first chat in the list\n  // Fires only the first time the component is rendered\n  React.useEffect(() => {\n    onChatSelected(selectedChat);\n  });\n\n  React.useEffect(() => {\n    const getMyId = async () => {\n      const me = await Providers.me();\n      setUserId(me.id);\n    };\n    if (!userId) {\n      void getMyId();\n    }\n  }, [userId]);\n\n  const isChatActive = (chat: Chat) => {\n    if (selectedChat) {\n      return selectedChat && chat.id === selectedChat?.id;\n    }\n\n    return false;\n  };\n\n  return (\n    <div>\n      {chats.filter(c => c.members?.length! > 1).map((c, index) => (\n        <ChatItem\n          key={c.id}\n          chat={c}\n          isSelected={(!selectedChat && index === 0) || isChatActive(c)}\n          onSelected={onChatSelected}\n          userId={userId}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ChatListTemplate;\n","import * as React from 'react';\nimport { PageHeader } from '../components/PageHeader';\nimport { Get } from '@microsoft/mgt-react';\nimport { Loading } from '../components/Loading';\nimport {\n  shorthands,\n  makeStyles,\n  mergeClasses,\n  Button,\n  Dialog,\n  DialogTrigger,\n  DialogSurface,\n  DialogBody,\n  DialogTitle\n} from '@fluentui/react-components';\nimport { Chat as GraphChat } from '@microsoft/microsoft-graph-types';\nimport { Chat, NewChat } from '@microsoft/mgt-chat';\nimport ChatListTemplate from './Chats/ChatListTemplate';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  panels: {\n    ...shorthands.padding('10px')\n  },\n  main: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'nowrap',\n    width: '300px',\n    minWidth: '300px',\n    ...shorthands.overflow('auto'),\n    maxHeight: '80vh',\n    borderRightColor: 'var(--neutral-stroke-rest)',\n    borderRightStyle: 'solid',\n    borderRightWidth: '1px'\n  },\n  side: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'nowrap',\n    width: '80%',\n    ...shorthands.overflow('auto'),\n    maxHeight: '80vh',\n    height: '100%'\n  },\n  newChat: {\n    paddingBottom: '10px',\n    marginRight: '0px',\n    marginLeft: 'auto'\n  },\n  dialog: {\n    display: 'block'\n  },\n  dialogSurface: {\n    contain: 'unset'\n  }\n});\n\nconst ChatPage: React.FunctionComponent = () => {\n  const styles = useStyles();\n\n  const getPreviousDate = (months: number) => {\n    const date = new Date();\n    date.setMonth(date.getMonth() - months);\n    return date.toISOString();\n  };\n\n  const [resourceUrl, setResourceUrl] = React.useState(`me/chats?$expand=members,lastMessagePreview&$orderBy=lastMessagePreview/createdDateTime desc&$filter=viewpoint/lastMessageReadDateTime ge ${getPreviousDate(\n    9\n  )}`);\n\n  const [selectedChat, setSelectedChat] = React.useState<GraphChat>();\n  const [isNewChatOpen, setIsNewChatOpen] = React.useState(false);\n\n  const onChatCreated = (e: GraphChat) => {\n    if (e.id !== selectedChat?.id && isNewChatOpen) {\n      setIsNewChatOpen(false);\n      setResourceUrl(`me/chats?$expand=members,lastMessagePreview&$orderBy=lastMessagePreview/createdDateTime desc&$filter=viewpoint/lastMessageReadDateTime ge ${getPreviousDate(\n        9\n      )}`);\n    }\n    setSelectedChat(e);\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={'Chats'}\n        description={'Stay in touch with your teammates and navigate your chats'}\n      ></PageHeader>\n\n      <div className={styles.container}>\n        <div className={mergeClasses(styles.panels, styles.main)}>\n          <div className={styles.newChat}>\n            <Dialog open={isNewChatOpen}>\n              <DialogTrigger disableButtonEnhancement>\n                <Button appearance=\"primary\" onClick={() => setIsNewChatOpen(true)}>\n                  New Chat\n                </Button>\n              </DialogTrigger>\n              <DialogSurface className={styles.dialogSurface}>\n                <DialogBody className={styles.dialog}>\n                  <DialogTitle>New Chat</DialogTitle>\n                  <NewChat\n                    onChatCreated={onChatCreated}\n                    onCancelClicked={() => {\n                      setIsNewChatOpen(false);\n                    }}\n                  ></NewChat>\n                </DialogBody>\n              </DialogSurface>\n            </Dialog>\n          </div>\n          <ChatList onChatSelected={setSelectedChat} resourceUrl={resourceUrl}></ChatList>\n\n        </div>\n        <div className={styles.side}>{selectedChat && <Chat chatId={selectedChat.id!}></Chat>}</div>\n      </div>\n    </>\n  );\n};\n\ninterface ChatListProps {\n  onChatSelected: (e: GraphChat) => void;\n  resourceUrl: string;\n}\n\nconst ChatList = React.memo((props: ChatListProps) => {\n  return (\n    <Get\n      resource={props.resourceUrl}\n      scopes={['chat.read']}\n    >\n      <ChatListTemplate\n        template=\"default\"\n        onSelected={props.onChatSelected}\n      ></ChatListTemplate>\n      <Loading template=\"loading\" message={'Loading your chats...'}></Loading>\n    </Get>\n  );\n});\n\nexport default ChatPage;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n"],"names":["useStyles","makeStyles","root","display","justifyContent","alignItems","height","message","paddingLeft","Loading","props","styles","_jsxs","className","children","_jsx","Spinner","divider","paddingTop","marginBottom","PageHeader","title","description","Divider","chat","paddingRight","cursor","backgroundColor","active","person","userSelect","fontSize","fontWeight","_objectSpread","whiteSpace","textOverflow","width","color","shorthands","overflow","group","messagePreview","ChatItem","React","_ref","isSelected","onSelected","userId","_useState","useState","_useState2","_slicedToArray","setMessagePreview","getOtherParticipantId","useCallback","_chat$members","_chat$members2","member","members","find","m","length","getGroupTitle","_chat$members3","_chat$members3$filter","lf","Intl","ListFormat","groupMembers","topic","filter","forEach","_member$displayName","push","displayName","split","format","_chat$lastMessagePrev","_chat$lastMessagePrev2","_chat$lastMessagePrev3","_chat$lastMessagePrev4","_chat$lastMessagePrev8","_chat$lastMessagePrev9","_chat$lastMessagePrev12","_chat$lastMessagePrev13","_preview","_chat$lastMessagePrev5","_chat$lastMessagePrev6","_chat$lastMessagePrev7","_chat$lastMessagePrev10","_chat$lastMessagePrev11","preview","lastMessagePreview","from","user","id","body","contentType","content","_chat$lastMessagePrev14","_chat$lastMessagePrev15","html","doc","DOMParser","parseFromString","images","querySelectorAll","card","querySelector","systemCard","textContent","innerText","Array","values","i","src","includes","trim","replace","getMessagePreview","_Fragment","mergeClasses","concat","chatType","Person","view","ViewType","twolines","oneline","avatarSize","showPresence","onClick","MessagePreview","template","Persona","textAlignment","size","name","secondaryText","avatar","icon","PeopleTeam16Regular","initials","Calendar16Regular","chats","dataContext","value","setUserId","_useState3","_useState4","selectedChat","setSelectedChat","onChatSelected","e","getMyId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","me","wrap","_context","prev","next","Providers","sent","stop","apply","arguments","c","_c$members","map","index","container","flexDirection","panels","padding","main","flexWrap","minWidth","maxHeight","borderRightColor","borderRightStyle","borderRightWidth","side","newChat","paddingBottom","marginRight","marginLeft","dialog","dialogSurface","contain","ChatList","Get","resource","resourceUrl","scopes","ChatListTemplate","getPreviousDate","months","date","Date","setMonth","getMonth","toISOString","_React$useState","_React$useState2","setResourceUrl","_React$useState3","_React$useState4","_React$useState5","_React$useState6","isNewChatOpen","setIsNewChatOpen","Dialog","open","DialogTrigger","disableButtonEnhancement","Button","appearance","DialogSurface","DialogBody","DialogTitle","NewChat","onChatCreated","onCancelClicked","Chat","chatId","wrapMgt","registerMgtGetComponent"],"sourceRoot":""}