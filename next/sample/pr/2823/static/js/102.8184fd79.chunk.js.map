{"version":3,"file":"static/js/102.8184fd79.chunk.js","mappings":"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","sources":["components/Loading.tsx","../../../packages/mgt-components/dist/es6/components/mgt-agenda/src/components/mgt-agenda/mgt-agenda-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-agenda/src/components/mgt-agenda/mgt-agenda.graph.ts","../../../packages/mgt-components/dist/es6/components/mgt-agenda/src/components/mgt-agenda/mgt-agenda.ts","../../../packages/mgt-components/dist/es6/components/mgt-people/src/components/mgt-people/mgt-people-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-people/src/components/mgt-people/mgt-people.ts","../../../packages/mgt-react/src/generated/spinner.ts"],"sourcesContent":["import * as React from 'react';\nimport { MgtTemplateProps, Spinner } from '@microsoft/mgt-react';\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 'calc(100vh - 300px)'\n  },\n  message: {\n    paddingLeft: '10px'\n  }\n});\n\nexport interface ILoadingProps extends MgtTemplateProps {\n  message?: string;\n}\n\nexport const Loading: React.FunctionComponent<ILoadingProps> = (props: ILoadingProps) => {\n  const styles = useStyles();\n  return (\n    <div className={styles.root}>\n      <Spinner />\n      <div className={styles.message}>\n        <span>{props.message || 'Loading...'}</span>\n      </div>\n    </div>\n  );\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{--card-height:auto;--card-width:99%;background-color:var(--agenda-background-color,transparent)}:host .header{margin:var(--agenda-header-margin,18px 0 12px 10px);font-size:var(--agenda-header-font-size,24px);font-style:normal;font-weight:400;line-height:32px;color:var(--agenda-header-color,var(--neutral-foreground-rest));opacity:.9}:host .agenda,:host .group{display:flex;flex-direction:column;row-gap:var(--agenda-event-row-gap,14px)}:host .agenda>.group:first-child>.header,:host .group>.group:first-child>.header{margin-top:0}:host .agenda .event,:host .group .event{background:var(--agenda-event-background-color,var(--fill-color));border:var(--agenda-event-border,solid 2px transparent);box-shadow:var(--agenda-event-box-shadow,var(--elevation-shadow-card-rest));padding:var(--agenda-event-padding,12px);position:relative;display:flex;flex:1 1 auto;content-visibility:visible;contain:none}:host .agenda .event-container,:host .group .event-container{border-radius:calc(var(--layer-corner-radius) * 1px);padding:1px}:host .agenda .event.narrow,:host .group .event.narrow{display:flex;flex-direction:column;inset:0}:host .agenda .event-time-container,:host .group .event-time-container{font-style:normal;font-weight:600;font-size:12px;color:var(--agenda-event-time-color,var(--neutral-foreground-rest));width:112px;height:16px}:host .agenda .event-time-container.narrow,:host .group .event-time-container.narrow{margin-bottom:1px;width:100%}:host .agenda .event-time,:host .group .event-time{font-size:var(--agenda-event-time-font-size,12px);color:var(--agenda-event-time-color,var(--neutral-foreground-rest));font-weight:600}:host .agenda .event-details-container,:host .group .event-details-container{display:flex;flex-direction:column;position:relative;bottom:8px;top:0;padding-inline-start:32px}:host .agenda .event-details-container.narrow,:host .group .event-details-container.narrow{position:inherit;left:6px;display:flex;flex-direction:column;padding-inline-start:0}:host .agenda .event-subject,:host .group .event-subject{font-style:normal;font-weight:400;font-size:var(--agenda-event-subject-font-size,20px);line-height:28px;color:var(--agenda-event-subject-color,var(--neutral-foreground-rest));mix-blend-mode:normal;position:inherit;bottom:8px}:host .agenda .event-location-container,:host .group .event-location-container{display:inline-flex;flex-direction:row}:host .agenda .event-location-container .event-location,:host .group .event-location-container .event-location{padding-inline-start:3px;font-style:normal;font-weight:400;font-size:var(--agenda-event-location-font-size,12px);line-height:16px;color:var(--agenda-event-location-color,var(--neutral-foreground-rest))}:host .agenda .event-location-container .event-location-loading,:host .group .event-location-container .event-location-loading{width:90px;height:10px;margin:2px 0 0 4px}:host .agenda .event-location-container .event-location-icon,:host .group .event-location-container .event-location-icon{display:inline-flex}:host .agenda .event-location-container .event-location-icon svg,:host .group .event-location-container .event-location-icon svg{position:relative;top:2px;width:12px;height:12px}:host .agenda .event-location-container .event-location-icon svg path,:host .group .event-location-container .event-location-icon svg path{stroke:var(--agenda-event-location-color,var(--neutral-foreground-rest))}:host .agenda .event-location-container .event-location-icon-loading,:host .group .event-location-container .event-location-icon-loading{width:14px;height:14px}:host .agenda .event-location-container .event-attendee-loading,:host .group .event-location-container .event-attendee-loading{width:20px;height:20px;border-radius:10px;margin:0 2px 0 0}:host .agenda .event-attendees,:host .group .event-attendees{--list-margin:8px 0 0 0;--avatar-size-s:20px}fluent-card.event.event-loading{--card-height:90px}:host .event-attendees{--color:$agenda-event-attendees-color}:host fluent-tooltip{width:auto;contain:inline-size}[dir=rtl] :host{direction:rtl}[dir=rtl] .event-time-container{direction:ltr;display:flex;justify-content:flex-end}@media (forced-colors:active) and (prefers-color-scheme:dark){:host .agenda .event-location-container .event-location-icon svg path{stroke:#fff!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host .agenda .event-location-container .event-location-icon svg path{stroke:#000!important}}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphPageIterator, IGraph, prepScopes } from '@microsoft/mgt-element';\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n\nexport const getEventsQueryPageIterator = async (\n  graph: IGraph,\n  query: string,\n  scopes = 'calendars.read'\n): Promise<GraphPageIterator<MicrosoftGraph.Event>> => {\n  const request = graph.api(query).middlewareOptions(prepScopes(scopes)).orderby('start/dateTime');\n\n  return GraphPageIterator.create<MicrosoftGraph.Event>(graph, request);\n};\n\n/**\n * returns Calender events iterator associated with either the logged in user or a specific groupId\n *\n * @param {Date} startDateTime\n * @param {Date} endDateTime\n * @param {string} [groupId]\n * @param {string} preferredTimezone\n * @returns {(Promise<Event[]>)}\n * @memberof Graph\n */\nexport const getEventsPageIterator = async (\n  graph: IGraph,\n  startDateTime: Date,\n  endDateTime: Date,\n  groupId?: string\n): Promise<GraphPageIterator<MicrosoftGraph.Event>> => {\n  const sdt = `startdatetime=${startDateTime.toISOString()}`;\n  const edt = `enddatetime=${endDateTime.toISOString()}`;\n\n  let uri: string;\n\n  if (groupId) {\n    uri = `groups/${groupId}/calendar`;\n  } else {\n    uri = 'me';\n  }\n\n  uri += `/calendarview?${sdt}&${edt}`;\n\n  return getEventsQueryPageIterator(graph, uri);\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { Providers, ProviderState, MgtTemplatedComponent, mgtHtml } from '@microsoft/mgt-element';\nimport '../../styles/style-helper';\nimport '../mgt-person/mgt-person';\nimport { styles } from './mgt-agenda-css';\nimport { getEventsPageIterator, getEventsQueryPageIterator } from './mgt-agenda.graph';\nimport { SvgIcon, getSvg } from '../../utils/SvgHelper';\nimport { MgtPeople, registerMgtPeopleComponent } from '../mgt-people/mgt-people';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentCard } from '@fluentui/web-components';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { registerComponent } from '@microsoft/mgt-element';\n\n/**\n * Web Component which represents events in a user or group calendar.\n *\n * @export\n * @class MgtAgenda\n * @extends {MgtTemplatedComponent}\n *\n * @fires {CustomEvent<MicrosoftGraph.Event>} eventClick - Fired when user click an event\n *\n * @cssprop --event-box-shadow - {String} Event box shadow color and size\n * @cssprop --event-row-gap - {String} The size of the gap between two event elements\n * @cssprop --event-padding - {String} Event padding\n * @cssprop --event-background-color - {Color} Event background color\n * @cssprop --event-border - {String} Event border style\n * @cssprop --agenda-header-margin - {String} Agenda header margin size\n * @cssprop --agenda-header-font-size - {Length} Agenda header font size\n * @cssprop --agenda-header-color - {Color} Agenda header color\n * @cssprop --event-time-font-size - {Length} Event time font size\n * @cssprop --event-time-color - {Color} Event time color\n * @cssprop --event-subject-font-size - {Length} Event subject font size\n * @cssprop --event-subject-color - {Color} Event subject color\n * @cssprop --event-location-font-size - {Length} Event location font size\n * @cssprop --event-location-color - {Color} Event location color\n * @cssprop --event-attendees-color - {Color} Event attendees color\n */\n\nexport const registerMgtAgendaComponent = () => {\n  registerFluentComponents(fluentCard);\n  // register dependent components\n  registerMgtPeopleComponent();\n  // register self\n  registerComponent('agenda', MgtAgenda);\n};\n\nexport class MgtAgenda extends MgtTemplatedComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  /**\n   * stores current date for initial calender selection in events.\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'date',\n    type: String\n  })\n  public get date(): string {\n    return this._date;\n  }\n  public set date(value) {\n    if (this._date === value) {\n      return;\n    }\n\n    this._date = value;\n    void this.reloadState();\n  }\n\n  /**\n   * determines if agenda events come from specific group\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'group-id',\n    type: String\n  })\n  public get groupId(): string {\n    return this._groupId;\n  }\n  public set groupId(value) {\n    if (this._groupId === value) {\n      return;\n    }\n\n    this._groupId = value;\n    void this.reloadState();\n  }\n\n  /**\n   * sets number of days until end date, 3 is the default\n   *\n   * @type {number}\n   */\n  @property({\n    attribute: 'days',\n    type: Number\n  })\n  public get days(): number {\n    return this._days;\n  }\n  public set days(value) {\n    if (this._days === value) {\n      return;\n    }\n\n    this._days = value;\n    void this.reloadState();\n  }\n\n  /**\n   * allows developer to specify a different graph query that retrieves events\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'event-query',\n    type: String\n  })\n  public get eventQuery(): string {\n    return this._eventQuery;\n  }\n  public set eventQuery(value) {\n    if (this._eventQuery === value) {\n      return;\n    }\n\n    this._eventQuery = value;\n    void this.reloadState();\n  }\n\n  /**\n   * array containing events from user agenda.\n   *\n   * @type {MicrosoftGraph.Event[]}\n   */\n  @property({\n    attribute: 'events',\n    type: Array\n  })\n  public events: MicrosoftGraph.Event[];\n\n  /**\n   * allows developer to define max number of events shown\n   *\n   * @type {number}\n   */\n  @property({\n    attribute: 'show-max',\n    type: Number\n  })\n  public showMax: number;\n\n  /**\n   * allows developer to define agenda to group events by day.\n   *\n   * @type {boolean}\n   */\n  @property({\n    attribute: 'group-by-day',\n    type: Boolean\n  })\n  public groupByDay: boolean;\n\n  /**\n   * allows developer to specify preferred timezone that should be used for\n   * rendering events retrieved from Graph, eg. `America/Los_Angeles`.\n   * By default events are rendered using the current timezone of the\n   * device being used.\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'preferred-timezone',\n    type: String\n  })\n  public get preferredTimezone(): string {\n    return this._preferredTimezone;\n  }\n  public set preferredTimezone(value) {\n    if (this._preferredTimezone === value) {\n      return;\n    }\n\n    this._preferredTimezone = value;\n    void this.reloadState();\n  }\n\n  /**\n   * Get the scopes required for agenda\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtAgenda\n   */\n  public static get requiredScopes(): string[] {\n    return [...new Set(['calendars.read', ...MgtPeople.requiredScopes])];\n  }\n\n  /**\n   * determines width available for agenda component.\n   *\n   * @type {boolean}\n   */\n  @property({ attribute: false }) private _isNarrow: boolean;\n\n  private _eventQuery: string;\n  private _days = 3;\n  private _groupId: string;\n  private _date: string;\n  private _preferredTimezone: string;\n\n  /**\n   * Determines width available if resize is necessary, adds onResize event listener to window\n   *\n   * @memberof MgtAgenda\n   */\n  public connectedCallback() {\n    this._isNarrow = this.offsetWidth < 600;\n    super.connectedCallback();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  /**\n   * Removes onResize event listener from window\n   *\n   * @memberof MgtAgenda\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('resize', this.onResize);\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return a lit-html TemplateResult.\n   * Setting properties inside this method will not trigger the element to update\n   *\n   * @returns\n   * @memberof MgtAgenda\n   */\n  public render(): TemplateResult {\n    // Loading\n    if (!this.events && this.isLoadingState) {\n      return this.renderLoading();\n    }\n\n    // No data\n    if (!this.events || this.events.length === 0) {\n      return this.renderNoData();\n    }\n\n    // Prep data\n    const events = this.showMax && this.showMax > 0 ? this.events.slice(0, this.showMax) : this.events;\n\n    // Default template\n    const renderedTemplate = this.renderTemplate('default', { events });\n    if (renderedTemplate) {\n      return renderedTemplate;\n    }\n\n    const agendaClasses = {\n      agenda: true,\n      grouped: this.groupByDay\n    };\n\n    // Render list\n    return html`\n      <div dir=${this.direction} class=\"${classMap(agendaClasses)}\">\n        ${this.groupByDay ? this.renderGroups(events) : this.renderEvents(events)}\n        ${this.isLoadingState ? this.renderLoading() : html``}\n      </div>\n    `;\n  }\n\n  /**\n   * Reloads the component with its current settings and potential new data\n   *\n   * @memberof MgtAgenda\n   */\n  public async reload() {\n    this.events = await this.loadEvents();\n  }\n\n  /**\n   * Render the loading state\n   *\n   * @protected\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderLoading(): TemplateResult {\n    return (\n      this.renderTemplate('loading', null) ||\n      html`\n        <fluent-card class=\"event event-loading\">\n          <div class=\"event-time-container\">\n            <div class=\"event-time-loading loading-element\"></div>\n          </div>\n          <div class=\"event-details-container\">\n            <div class=\"event-subject-loading loading-element\"></div>\n            <div class=\"event-location-container\">\n              <div class=\"event-location-icon-loading loading-element\"></div>\n              <div class=\"event-location-loading loading-element\"></div>\n            </div>\n            <div class=\"event-location-container\">\n              <div class=\"event-attendee-loading loading-element\"></div>\n              <div class=\"event-attendee-loading loading-element\"></div>\n              <div class=\"event-attendee-loading loading-element\"></div>\n            </div>\n          </div>\n        </fluent-card>`\n    );\n  }\n\n  /**\n   * Clears state of the component\n   *\n   * @protected\n   * @memberof MgtAgenda\n   */\n  protected clearState(): void {\n    this.events = null;\n  }\n\n  /**\n   * Render the no-data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtAgenda\n   */\n  protected renderNoData(): TemplateResult {\n    return this.renderTemplate('no-data', null) || html``;\n  }\n\n  /**\n   * Render an individual Event.\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderEvent(event: MicrosoftGraph.Event): TemplateResult {\n    // Update narrow state\n    this._isNarrow = this.offsetWidth < 600;\n\n    const eventClasses = {\n      narrow: this._isNarrow\n    };\n\n    return html`\n      <fluent-card class=\"${classMap({ event: true, ...eventClasses })}\">\n        <div class=\"${classMap({ 'event-time-container': true, ...eventClasses })}\">\n          <div class=\"event-time\" aria-label=\"${this.getEventTimeString(event)}\">${this.getEventTimeString(event)}</div>\n        </div>\n        <div class=\"${classMap({ 'event-details-container': true, ...eventClasses })}\">\n          ${this.renderTitle(event)} ${this.renderLocation(event)} ${this.renderAttendees(event)}\n        </div>\n        <div class=\"event-other-container\">${this.renderOther(event)}</div>\n      </fluent-card>\n    `;\n  }\n\n  /**\n   * Render the header for a group.\n   * Only relevant for grouped Events.\n   *\n   * @protected\n   * @param {Date} date\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderHeader(header: string): TemplateResult {\n    return (\n      this.renderTemplate('header', { header }, 'header-' + header) ||\n      html`\n        <div class=\"header\" aria-label=\"${header}\">${header}</div>\n      `\n    );\n  }\n\n  /**\n   * Render the title field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderTitle(event: MicrosoftGraph.Event): TemplateResult {\n    return html`\n      <div\n        aria-label=${event.subject}\n        class=\"${classMap({\n          'event-subject': true,\n          narrow: this._isNarrow\n        })}\"\n      >\n        ${event.subject}\n      </div>`;\n  }\n\n  /**\n   * Render the location field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderLocation(event: MicrosoftGraph.Event): TemplateResult {\n    if (!event.location.displayName) {\n      return null;\n    }\n\n    return html`\n      <div class=\"event-location-container\">\n        <div class=\"event-location-icon\">${getSvg(SvgIcon.OfficeLocation)}</div>\n        <div class=\"event-location\" aria-label=\"${event.location.displayName}\">${event.location.displayName}</div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the attendees field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderAttendees(event: MicrosoftGraph.Event): TemplateResult {\n    if (!event.attendees.length) {\n      return null;\n    }\n    return mgtHtml`\n      <mgt-people\n        show-max=\"5\"\n        show-presence\n        class=\"event-attendees\"\n        .peopleQueries=${event.attendees.map(attendee => {\n          return attendee.emailAddress.address;\n        })}\n      ></mgt-people>\n    `;\n  }\n\n  /**\n   * Render the event other field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderOther(event: MicrosoftGraph.Event): TemplateResult {\n    return this.hasTemplate('event-other')\n      ? html`\n          ${this.renderTemplate('event-other', { event }, event.id + '-other')}\n        `\n      : null;\n  }\n\n  /**\n   * Render the events in groups, each with a header.\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event[]} events\n   * @returns {TemplateResult}\n   * @memberof MgtAgenda\n   */\n  protected renderGroups(events: MicrosoftGraph.Event[]): TemplateResult {\n    // Render list, grouped by day\n    const grouped: Record<string, MicrosoftGraph.Event[]> = {};\n\n    events.forEach(event => {\n      let dateString = event?.start?.dateTime;\n      if (event.end.timeZone === 'UTC') {\n        dateString += 'Z';\n      }\n\n      const header = this.getDateHeaderFromDateTimeString(dateString);\n      grouped[header] = grouped[header] || [];\n      grouped[header].push(event);\n    });\n\n    return html`\n      ${Object.keys(grouped).map(\n        header =>\n          html`\n            <div class=\"group\">${this.renderHeader(header)} ${this.renderEvents(grouped[header])}</div>\n          `\n      )}\n    `;\n  }\n\n  /**\n   * Render a list of events.\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event[]} events\n   * @returns {TemplateResult}\n   * @memberof MgtAgenda\n   */\n  protected renderEvents(events: MicrosoftGraph.Event[]): TemplateResult {\n    return html`\n        ${events.map(\n          event =>\n            html`\n              <div\n                class=\"event-container\"\n                tabindex=\"0\"\n                @focus=${() => this.eventClicked(event)}>\n                ${this.renderTemplate('event', { event }, event.id) || this.renderEvent(event)}\n              </div>`\n        )}`;\n  }\n\n  /**\n   * Load state into the component\n   *\n   * @protected\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected async loadState() {\n    if (this.events) {\n      return;\n    }\n\n    const events = await this.loadEvents();\n    if (events?.length > 0) {\n      this.events = events;\n    }\n  }\n\n  private async reloadState() {\n    this.events = null;\n    await this.requestStateUpdate(true);\n  }\n\n  private readonly onResize = () => {\n    this._isNarrow = this.offsetWidth < 600;\n  };\n\n  private eventClicked(event: MicrosoftGraph.Event) {\n    this.fireCustomEvent('eventClick', event);\n  }\n\n  private getEventTimeString(event: MicrosoftGraph.Event) {\n    if (event.isAllDay) {\n      return 'ALL DAY';\n    }\n\n    // #937 When not specifying a preferred time zone using the\n    // preferred-timezone attribute, MGT treats the dates retrieved from\n    // Microsoft Graph as local time, rather than UTC.\n    let startString = event.start.dateTime;\n    if (event.start.timeZone === 'UTC') {\n      startString += 'Z';\n    }\n    let endString = event.end.dateTime;\n    if (event.end.timeZone === 'UTC') {\n      endString += 'Z';\n    }\n\n    const start = this.prettyPrintTimeFromDateTime(new Date(startString));\n    const end = this.prettyPrintTimeFromDateTime(new Date(endString));\n\n    return `${start} - ${end}`;\n  }\n\n  private async loadEvents(): Promise<MicrosoftGraph.Event[]> {\n    const p = Providers.globalProvider;\n    let events: MicrosoftGraph.Event[] = [];\n\n    if (p?.state === ProviderState.SignedIn) {\n      const graph = p.graph.forComponent(this);\n\n      if (this.eventQuery) {\n        try {\n          const tokens = this.eventQuery.split('|');\n          let scope: string;\n          let query: string;\n          if (tokens.length > 1) {\n            query = tokens[0].trim();\n            scope = tokens[1].trim();\n          } else {\n            query = this.eventQuery;\n          }\n          const iterator = await getEventsQueryPageIterator(graph, query, scope);\n          if (iterator?.value) {\n            events = iterator.value;\n\n            while (iterator.hasNext) {\n              await iterator.next();\n              events = iterator.value;\n            }\n          }\n          // eslint-disable-next-line no-empty\n        } catch (e) {}\n      } else {\n        const start = this.date ? new Date(this.date) : new Date();\n        const end = new Date(start.getTime());\n        end.setDate(start.getDate() + this.days);\n\n        try {\n          const iterator = await getEventsPageIterator(graph, start, end, this.groupId);\n          if (iterator?.value) {\n            events = iterator.value;\n\n            while (iterator.hasNext) {\n              await iterator.next();\n              events = iterator.value;\n            }\n          }\n        } catch (error) {\n          // noop - possible error with graph\n        }\n      }\n    }\n\n    return events;\n  }\n\n  private prettyPrintTimeFromDateTime(date: Date) {\n    return date.toLocaleTimeString(navigator.language, {\n      timeStyle: 'short',\n      timeZone: this.preferredTimezone\n    });\n  }\n\n  private getDateHeaderFromDateTimeString(dateTimeString: string) {\n    const date = new Date(dateTimeString);\n    return date.toLocaleDateString(navigator.language, {\n      dateStyle: 'full',\n      timeZone: this.preferredTimezone\n    });\n  }\n}\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host .people-list{list-style:none;margin:var(--people-list-margin,8px 4px 8px 8px);padding:unset;display:flex;align-items:center;gap:var(--people-avatar-gap,4px)}:host .overflow span{vertical-align:middle;color:var(--people-overflow-font-color,currentColor);font-size:var(--people-overflow-font-size,12px);font-weight:var(--people-overflow-font-weight,400)}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { html, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { getPeople, getPeopleFromResource, PersonType } from '../../graph/graph.people';\nimport { getUsersPresenceByPeople } from '../../graph/graph.presence';\nimport { findGroupMembers, getUsersForPeopleQueries, getUsersForUserIds } from '../../graph/graph.user';\nimport { IDynamicPerson } from '../../graph/types';\nimport { Providers, ProviderState, MgtTemplatedComponent, arraysAreEqual, mgtHtml } from '@microsoft/mgt-element';\nimport '../../styles/style-helper';\nimport { PersonCardInteraction } from './../PersonCardInteraction';\nimport { styles } from './mgt-people-css';\nimport { MgtPerson, registerMgtPersonComponent } from '../mgt-person/mgt-person';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport { PersonCardInteraction } from './../PersonCardInteraction';\n\n/**\n * web component to display a group of people or contacts by using their photos or initials.\n *\n * @export\n * @class MgtPeople\n * @extends {MgtTemplatedComponent}\n *\n * @cssprop --people-list-margin- {String} the margin around the list of people. Default is 8px 4px 8px 8px.\n * @cssprop --people-avatar-gap - {String} the gap between the people in the list. Default is 4px.\n * @cssprop --people-overflow-font-color - {Color} the color of the overflow text.\n * @cssprop --people-overflow-font-size - {String} the text color of the overflow text. Default is 12px.\n * @cssprop --people-overflow-font-weight - {String} the font weight of the overflow text. Default is 400.\n */\n\nexport const registerMgtPeopleComponent = () => {\n  registerMgtPersonComponent();\n  registerComponent('people', MgtPeople);\n};\n\nexport class MgtPeople extends MgtTemplatedComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  /**\n   * determines if agenda events come from specific group\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'group-id',\n    type: String\n  })\n  public get groupId(): string {\n    return this._groupId;\n  }\n  public set groupId(value) {\n    if (this._groupId === value) {\n      return;\n    }\n    this._groupId = value;\n    void this.requestStateUpdate(true);\n  }\n\n  /**\n   * user id array\n   *\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'user-ids',\n    converter: (value, _type) => {\n      return value.split(',').map(v => v.trim());\n    }\n  })\n  public get userIds(): string[] {\n    return this._userIds;\n  }\n  public set userIds(value: string[]) {\n    if (arraysAreEqual(this._userIds, value)) {\n      return;\n    }\n    this._userIds = value;\n    void this.requestStateUpdate(true);\n  }\n\n  /**\n   * containing array of people used in the component.\n   *\n   * @type {IDynamicPerson[]}\n   */\n  @property({\n    attribute: 'people',\n    type: Object\n  })\n  public people: IDynamicPerson[];\n\n  /**\n   * allows developer to define queries of people for component\n   *\n   * @type {string[]}\n   */\n\n  @property({\n    attribute: 'people-queries',\n    converter: (value, _type) => {\n      return value.split(',').map(v => v.trim());\n    }\n  })\n  public get peopleQueries(): string[] {\n    return this._peopleQueries;\n  }\n  public set peopleQueries(value: string[]) {\n    if (arraysAreEqual(this._peopleQueries, value)) {\n      return;\n    }\n    this._peopleQueries = value;\n    void this.requestStateUpdate(true);\n  }\n\n  /**\n   * developer determined max people shown in component\n   *\n   * @type {number}\n   */\n  @property({\n    attribute: 'show-max',\n    type: Number\n  })\n  public showMax: number;\n\n  /**\n   * determines if person component renders presence\n   *\n   * @type {boolean}\n   */\n  @property({\n    attribute: 'show-presence',\n    type: Boolean\n  })\n  public showPresence: boolean;\n\n  /**\n   * Sets how the person-card is invoked\n   * Set to PersonCardInteraction.none to not show the card\n   *\n   * @type {PersonCardInteraction}\n   * @memberof MgtPerson\n   */\n  @property({\n    attribute: 'person-card',\n    converter: (value, _type) => {\n      value = value.toLowerCase();\n      if (typeof PersonCardInteraction[value] === 'undefined') {\n        return PersonCardInteraction.hover;\n      } else {\n        return PersonCardInteraction[value] as PersonCardInteraction;\n      }\n    }\n  })\n  public personCardInteraction: PersonCardInteraction = PersonCardInteraction.hover;\n\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'resource',\n    type: String\n  })\n  public get resource(): string {\n    return this._resource;\n  }\n  public set resource(value) {\n    if (this._resource === value) {\n      return;\n    }\n    this._resource = value;\n    void this.requestStateUpdate(true);\n  }\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public get version(): string {\n    return this._version;\n  }\n  public set version(value) {\n    if (this._version === value) {\n      return;\n    }\n    this._version = value;\n    void this.requestStateUpdate(true);\n  }\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'scopes',\n    converter: value => {\n      return value ? value.toLowerCase().split(',') : null;\n    },\n    reflect: true\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Fallback when no user is found\n   *\n   * @type {IDynamicPerson[]}\n   */\n  @property({\n    attribute: 'fallback-details',\n    type: Array\n  })\n  public get fallbackDetails(): IDynamicPerson[] {\n    return this._fallbackDetails;\n  }\n  public set fallbackDetails(value: IDynamicPerson[]) {\n    if (value === this._fallbackDetails) {\n      return;\n    }\n\n    this._fallbackDetails = value;\n\n    void this.requestStateUpdate();\n  }\n\n  /**\n   * Get the scopes required for people\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtPeople\n   */\n  public static get requiredScopes(): string[] {\n    return [\n      ...new Set([\n        'user.read.all',\n        'people.read',\n        'user.readbasic.all',\n        'presence.read.all',\n        'contacts.read',\n        ...MgtPerson.requiredScopes\n      ])\n    ];\n  }\n\n  private _groupId: string;\n  private _userIds: string[];\n  private _peopleQueries: string[];\n  private _peoplePresence: Record<string, MicrosoftGraph.Presence> = {};\n  private _resource: string;\n  private _version = 'v1.0';\n  private _fallbackDetails: IDynamicPerson[];\n  @state() private _arrowKeyLocation = -1;\n\n  constructor() {\n    super();\n    this.showMax = 3;\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtPeople\n   */\n  protected clearState(): void {\n    this.people = null;\n  }\n\n  /**\n   * Request to reload the state.\n   * Use reload instead of load to ensure loading events are fired.\n   *\n   * @protected\n   * @memberof MgtBaseComponent\n   */\n  protected requestStateUpdate(force?: boolean) {\n    if (force) {\n      this.people = null;\n    }\n    return super.requestStateUpdate(force);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render() {\n    if (this.isLoadingState) {\n      return this.renderLoading();\n    }\n\n    if (!this.people || this.people.length === 0) {\n      return this.renderNoData();\n    }\n\n    return this.renderTemplate('default', { people: this.people, max: this.showMax }) || this.renderPeople();\n  }\n\n  /**\n   * Render the loading state.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPeople\n   */\n  protected renderLoading() {\n    return this.renderTemplate('loading', null) || html``;\n  }\n\n  /**\n   * Render the list of people.\n   *\n   * @protected\n   * @param {*} people\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderPeople(): TemplateResult {\n    const maxPeople = this.people.slice(0, this.showMax).filter(pple => pple);\n    return html`\n      <ul\n        tabindex=\"0\"\n        class=\"people-list\"\n        aria-label=\"people\"\n        @keydown=${this.handleKeyDown}>\n        ${repeat(\n          maxPeople,\n          p => (p.id ? p.id : p.displayName),\n          p => html`\n            <li tabindex=\"-1\" class=\"people-person\">\n              ${this.renderPerson(p)}\n            </li>\n          `\n        )}\n        ${this.people.length > this.showMax ? this.renderOverflow() : null}\n      </ul>\n    `;\n  }\n\n  /**\n   * Render the overflow content to represent any extra people, beyond the max.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderOverflow(): TemplateResult {\n    const extra = this.people.length - this.showMax;\n    return (\n      this.renderTemplate('overflow', {\n        extra,\n        max: this.showMax,\n        people: this.people\n      }) ||\n      html`\n        <li tabindex=\"-1\" aria-label=\"and ${extra} more attendees\" class=\"overflow\"><span>+${extra}</span></li>\n      `\n    );\n  }\n\n  /**\n   * Handles the keypresses on a keyboard for the listed people.\n   *\n   * @param event is a KeyboardEvent.\n   */\n  protected handleKeyDown = (event: KeyboardEvent) => {\n    const peopleContainer: HTMLElement = this.shadowRoot.querySelector('.people-list');\n    let person: HTMLElement;\n    const peopleElements: HTMLCollection = peopleContainer?.children;\n    // Default all tabindex values in li nodes to -1\n    for (const element of peopleElements) {\n      const el: HTMLElement = element as HTMLElement;\n      el.setAttribute('tabindex', '-1');\n      el.blur();\n    }\n\n    const childElementCount = peopleContainer.childElementCount;\n    const keyName = event.key;\n    if (keyName === 'ArrowRight') {\n      this._arrowKeyLocation = (this._arrowKeyLocation + 1 + childElementCount) % childElementCount;\n    } else if (keyName === 'ArrowLeft') {\n      this._arrowKeyLocation = (this._arrowKeyLocation - 1 + childElementCount) % childElementCount;\n    } else if (keyName === 'Tab' || keyName === 'Escape') {\n      this._arrowKeyLocation = -1;\n      peopleContainer.blur();\n    } else if (['Enter', 'space', ' '].includes(keyName)) {\n      if (this.personCardInteraction !== PersonCardInteraction.none) {\n        const personEl = peopleElements[this._arrowKeyLocation] as HTMLElement;\n        const mgtPerson = personEl.querySelector<MgtPerson>('mgt-person');\n        if (mgtPerson) {\n          mgtPerson.showPersonCard();\n        }\n      }\n    }\n\n    if (this._arrowKeyLocation > -1) {\n      person = peopleElements[this._arrowKeyLocation] as HTMLElement;\n      person.setAttribute('tabindex', '1');\n      person.focus();\n    }\n  };\n\n  /**\n   * Render an individual person.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderPerson(person: MicrosoftGraph.User | MicrosoftGraph.Person | MicrosoftGraph.Contact): TemplateResult {\n    let personPresence: MicrosoftGraph.Presence = {\n      // set up default presence\n      activity: 'Offline',\n      availability: 'Offline',\n      id: null\n    };\n    if (this.showPresence && this._peoplePresence) {\n      personPresence = this._peoplePresence[person.id];\n    }\n    const avatarSize = 'small';\n    return (\n      this.renderTemplate('person', { person }, person.id) ||\n      // set image to @ to flag the mgt-person component to\n      // query the image from the graph\n      mgtHtml`\n        <mgt-person\n          .personDetails=${person}\n          .fetchImage=${true}\n          .avatarSize=${avatarSize}\n          .personCardInteraction=${this.personCardInteraction}\n          .showPresence=${this.showPresence}\n          .personPresence=${personPresence}\n          .usage=${'people'}\n        ></mgt-person>\n      `\n    );\n  }\n\n  /**\n   * render the no data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderNoData(): TemplateResult {\n    return this.renderTemplate('no-data', null) || html``;\n  }\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPeople\n   */\n  protected async loadState() {\n    if (!this.people) {\n      const provider = Providers.globalProvider;\n\n      if (provider && provider.state === ProviderState.SignedIn) {\n        const graph = provider.graph.forComponent(this);\n\n        // populate people\n        if (this.groupId) {\n          this.people = await findGroupMembers(graph, null, this.groupId, this.showMax, PersonType.person);\n        } else if (this.userIds || this.peopleQueries) {\n          this.people = this.userIds\n            ? await getUsersForUserIds(graph, this.userIds, '', '', this._fallbackDetails)\n            : await getUsersForPeopleQueries(graph, this.peopleQueries, this._fallbackDetails);\n        } else if (this.resource) {\n          this.people = await getPeopleFromResource(graph, this.version, this.resource, this.scopes);\n        } else {\n          this.people = await getPeople(graph);\n        }\n\n        // populate presence for people\n        if (this.showPresence) {\n          this._peoplePresence = await getUsersPresenceByPeople(graph, this.people);\n        } else {\n          this._peoplePresence = null;\n        }\n      }\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { registerMgtSpinnerComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { ComponentMediaQuery } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type SpinnerProps = {\n\tmediaQuery?: ComponentMediaQuery;\n}\n\nexport const Spinner = wrapMgt<SpinnerProps>('spinner', registerMgtSpinnerComponent);\n\n"],"names":["useStyles","makeStyles","root","display","justifyContent","alignItems","height","message","paddingLeft","Loading","props","styles","_jsxs","className","children","_jsx","Spinner","css","_templateObject","_taggedTemplateLiteral","getEventsQueryPageIterator","graph","query","scopes","arguments","length","undefined","__awaiter","_regeneratorRuntime","mark","_callee","request","wrap","_context","prev","next","api","middlewareOptions","prepScopes","orderby","abrupt","GraphPageIterator","create","stop","getEventsPageIterator","startDateTime","endDateTime","groupId","_callee2","sdt","edt","uri","_context2","concat","toISOString","registerMgtAgendaComponent","registerFluentComponents","fluentCard","registerMgtPeopleComponent","registerComponent","MgtAgenda","_MgtTemplatedComponen","_inherits","_super","_createSuper","_this","_classCallCheck","_days","onResize","_isNarrow","offsetWidth","_createClass","key","get","this","_date","set","value","reloadState","_groupId","_eventQuery","_preferredTimezone","_get","_getPrototypeOf","prototype","call","window","addEventListener","removeEventListener","events","isLoadingState","renderLoading","renderNoData","showMax","slice","renderedTemplate","renderTemplate","agendaClasses","agenda","grouped","groupByDay","html","direction","classMap","renderGroups","renderEvents","_templateObject2","loadEvents","sent","_templateObject3","_templateObject4","event","eventClasses","narrow","_templateObject5","Object","assign","getEventTimeString","renderTitle","renderLocation","renderAttendees","renderOther","header","_templateObject6","_templateObject7","subject","location","displayName","_templateObject8","getSvg","SvgIcon","OfficeLocation","attendees","mgtHtml","_templateObject9","map","attendee","emailAddress","address","hasTemplate","_templateObject10","id","_this2","forEach","dateString","_a","start","dateTime","end","timeZone","getDateHeaderFromDateTimeString","push","_templateObject11","keys","_templateObject12","renderHeader","_this3","_templateObject13","_templateObject14","eventClicked","renderEvent","_context3","requestStateUpdate","_callee3","fireCustomEvent","isAllDay","startString","endString","prettyPrintTimeFromDateTime","Date","p","Providers","globalProvider","state","ProviderState","SignedIn","_context4","forComponent","eventQuery","tokens","split","trim","scope","iterator","hasNext","t0","date","getTime","setDate","getDate","days","t1","_callee4","toLocaleTimeString","navigator","language","timeStyle","preferredTimezone","dateTimeString","toLocaleDateString","dateStyle","_toConsumableArray","Set","MgtPeople","requiredScopes","MgtTemplatedComponent","__decorate","property","attribute","type","String","Number","Array","Boolean","registerMgtPersonComponent","personCardInteraction","PersonCardInteraction","hover","_peoplePresence","_version","_arrowKeyLocation","handleKeyDown","person","_step","peopleContainer","shadowRoot","querySelector","peopleElements","_iterator","_createForOfIteratorHelper","s","n","done","el","setAttribute","blur","err","e","f","childElementCount","keyName","includes","none","mgtPerson","showPersonCard","focus","_userIds","arraysAreEqual","_peopleQueries","_resource","_fallbackDetails","people","force","max","renderPeople","maxPeople","filter","pple","repeat","renderPerson","renderOverflow","extra","personPresence","activity","availability","showPresence","provider","findGroupMembers","PersonType","userIds","peopleQueries","getUsersForUserIds","getUsersForPeopleQueries","resource","getPeopleFromResource","version","getPeople","getUsersPresenceByPeople","MgtPerson","converter","_type","v","toLowerCase","reflect","wrapMgt","registerMgtSpinnerComponent"],"sourceRoot":""}