{"version":3,"file":"static/js/375.710f052a.chunk.js","mappings":"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","sources":["../../../node_modules/@fluentui/react-divider/lib/components/Divider/useDividerStyles.styles.js","../../../node_modules/@fluentui/react-divider/lib/components/Divider/Divider.js","../../../node_modules/@fluentui/react-divider/lib/components/Divider/useDivider.js","../../../node_modules/@fluentui/react-divider/lib/components/Divider/renderDivider.js","../../../packages/mgt-components/dist/es6/components/mgt-agenda/src/components/mgt-agenda/mgt-agenda-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-agenda/src/components/mgt-agenda/mgt-agenda.graph.ts","../../../packages/mgt-components/dist/es6/components/mgt-people/src/components/mgt-people/mgt-people-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-people/src/components/mgt-people/mgt-people.ts","../../../packages/mgt-components/dist/es6/components/mgt-agenda/src/components/mgt-agenda/mgt-agenda.ts","../../../packages/mgt-react/src/generated/agenda.ts","../../../packages/mgt-react/src/generated/spinner.ts"],"sourcesContent":["import { mergeClasses, shorthands, makeStyles } from '@griffel/react';\nimport { tokens } from '@fluentui/react-theme';\nexport const dividerClassNames = {\n    root: 'fui-Divider',\n    wrapper: 'fui-Divider__wrapper'\n};\nconst contentSpacing = '12px';\nconst insetSpacing = '12px';\nconst maxStartEndLength = '8px';\nconst minStartEndLength = '8px;';\nconst useBaseStyles = makeStyles({\n    // Base styles\n    base: {\n        alignItems: 'center',\n        boxSizing: 'border-box',\n        display: 'flex',\n        flexDirection: 'row',\n        flexGrow: 1,\n        position: 'relative',\n        fontFamily: tokens.fontFamilyBase,\n        fontSize: tokens.fontSizeBase200,\n        fontWeight: tokens.fontWeightRegular,\n        lineHeight: tokens.lineHeightBase200,\n        textAlign: 'center',\n        '::before': {\n            boxSizing: 'border-box',\n            display: 'flex',\n            flexGrow: 1\n        },\n        '::after': {\n            boxSizing: 'border-box',\n            display: 'flex',\n            flexGrow: 1\n        }\n    },\n    // Childless styles\n    childless: {\n        '::before': {\n            marginBottom: 0,\n            marginRight: 0\n        },\n        '::after': {\n            marginLeft: 0,\n            marginTop: 0\n        }\n    },\n    // Alignment variations\n    start: {\n        '::after': {\n            content: '\"\"'\n        }\n    },\n    center: {\n        '::before': {\n            content: '\"\"'\n        },\n        '::after': {\n            content: '\"\"'\n        }\n    },\n    end: {\n        '::before': {\n            content: '\"\"'\n        }\n    },\n    // Appearance variations\n    brand: {\n        color: tokens.colorBrandForeground1,\n        '::before': {\n            ...shorthands.borderColor(tokens.colorBrandStroke1)\n        },\n        '::after': {\n            ...shorthands.borderColor(tokens.colorBrandStroke1)\n        }\n    },\n    default: {\n        color: tokens.colorNeutralForeground2,\n        '::before': {\n            ...shorthands.borderColor(tokens.colorNeutralStroke2)\n        },\n        '::after': {\n            ...shorthands.borderColor(tokens.colorNeutralStroke2)\n        }\n    },\n    subtle: {\n        color: tokens.colorNeutralForeground2,\n        '::before': {\n            ...shorthands.borderColor(tokens.colorNeutralStroke3)\n        },\n        '::after': {\n            ...shorthands.borderColor(tokens.colorNeutralStroke3)\n        }\n    },\n    strong: {\n        color: tokens.colorNeutralForeground2,\n        '::before': {\n            ...shorthands.borderColor(tokens.colorNeutralStroke1)\n        },\n        '::after': {\n            ...shorthands.borderColor(tokens.colorNeutralStroke1)\n        }\n    }\n});\nconst useHorizontalStyles = makeStyles({\n    // Base styles\n    base: {\n        width: '100%',\n        '::before': {\n            borderTopStyle: 'solid',\n            borderTopWidth: tokens.strokeWidthThin,\n            minWidth: minStartEndLength\n        },\n        '::after': {\n            borderTopStyle: 'solid',\n            borderTopWidth: tokens.strokeWidthThin,\n            minWidth: minStartEndLength\n        }\n    },\n    // Inset styles\n    inset: {\n        paddingLeft: insetSpacing,\n        paddingRight: insetSpacing\n    },\n    // Alignment variations\n    start: {\n        '::before': {\n            content: '\"\"',\n            marginRight: contentSpacing,\n            maxWidth: maxStartEndLength\n        },\n        '::after': {\n            marginLeft: contentSpacing\n        }\n    },\n    center: {\n        '::before': {\n            marginRight: contentSpacing\n        },\n        '::after': {\n            marginLeft: contentSpacing\n        }\n    },\n    end: {\n        '::before': {\n            marginRight: contentSpacing\n        },\n        '::after': {\n            content: '\"\"',\n            marginLeft: contentSpacing,\n            maxWidth: maxStartEndLength\n        }\n    }\n});\nconst useVerticalStyles = makeStyles({\n    // Base styles\n    base: {\n        flexDirection: 'column',\n        minHeight: '20px',\n        '::before': {\n            borderRightStyle: 'solid',\n            borderRightWidth: tokens.strokeWidthThin,\n            minHeight: minStartEndLength\n        },\n        '::after': {\n            borderRightStyle: 'solid',\n            borderRightWidth: tokens.strokeWidthThin,\n            minHeight: minStartEndLength\n        }\n    },\n    // Inset styles\n    inset: {\n        marginTop: insetSpacing,\n        marginBottom: insetSpacing\n    },\n    // With children styles\n    withChildren: {\n        minHeight: '84px'\n    },\n    // Alignment variations\n    start: {\n        '::before': {\n            content: '\"\"',\n            marginBottom: contentSpacing,\n            maxHeight: maxStartEndLength\n        },\n        '::after': {\n            marginTop: contentSpacing\n        }\n    },\n    center: {\n        '::before': {\n            marginBottom: contentSpacing\n        },\n        '::after': {\n            marginTop: contentSpacing\n        }\n    },\n    end: {\n        '::before': {\n            marginBottom: contentSpacing\n        },\n        '::after': {\n            content: '\"\"',\n            marginTop: contentSpacing,\n            maxHeight: maxStartEndLength\n        }\n    }\n});\nexport const useDividerStyles_unstable = (state)=>{\n    const baseStyles = useBaseStyles();\n    const horizontalStyles = useHorizontalStyles();\n    const verticalStyles = useVerticalStyles();\n    const { alignContent, appearance, inset, vertical } = state;\n    state.root.className = mergeClasses(dividerClassNames.root, // Base styles\n    baseStyles.base, baseStyles[alignContent], appearance && baseStyles[appearance], // Horizontal styles\n    !vertical && horizontalStyles.base, !vertical && inset && horizontalStyles.inset, !vertical && horizontalStyles[alignContent], // Vertical styles\n    vertical && verticalStyles.base, vertical && inset && verticalStyles.inset, vertical && verticalStyles[alignContent], vertical && state.root.children !== undefined && verticalStyles.withChildren, // Childless styles\n    state.root.children === undefined && baseStyles.childless, // User provided class name\n    state.root.className);\n    if (state.wrapper) {\n        state.wrapper.className = mergeClasses(dividerClassNames.wrapper, state.wrapper.className);\n    }\n    return state;\n};\n","import * as React from 'react';\nimport { renderDivider_unstable } from './renderDivider';\nimport { useDivider_unstable } from './useDivider';\nimport { useDividerStyles_unstable } from './useDividerStyles.styles';\nimport { useCustomStyleHook_unstable } from '@fluentui/react-shared-contexts';\n/**\n * A divider visually segments content into groups.\n */ export const Divider = /*#__PURE__*/ React.forwardRef((props, ref)=>{\n    const state = useDivider_unstable(props, ref);\n    useDividerStyles_unstable(state);\n    useCustomStyleHook_unstable('useDividerStyles_unstable')(state);\n    return renderDivider_unstable(state);\n});\nDivider.displayName = 'Divider';\n","import * as React from 'react';\nimport { getIntrinsicElementProps, useId, slot } from '@fluentui/react-utilities';\n/**\n * Returns the props and state required to render the component\n * @param props - User-provided props to the Divider component.\n * @param ref - User-provided ref to be passed to the Divider component.\n */ export const useDivider_unstable = (props, ref)=>{\n    const { alignContent = 'center', appearance = 'default', inset = false, vertical = false, wrapper } = props;\n    const dividerId = useId('divider-');\n    return {\n        // Props passed at the top-level\n        alignContent,\n        appearance,\n        inset,\n        vertical,\n        // Slots definition\n        components: {\n            root: 'div',\n            wrapper: 'div'\n        },\n        root: slot.always(getIntrinsicElementProps('div', {\n            role: 'separator',\n            'aria-orientation': vertical ? 'vertical' : 'horizontal',\n            'aria-labelledby': props.children ? dividerId : undefined,\n            ...props,\n            // FIXME:\n            // `ref` is wrongly assigned to be `HTMLElement` instead of `HTMLDivElement`\n            // but since it would be a breaking change to fix it, we are casting ref to it's proper type\n            ref: ref\n        }), {\n            elementType: 'div'\n        }),\n        wrapper: slot.always(wrapper, {\n            defaultProps: {\n                id: dividerId,\n                children: props.children\n            },\n            elementType: 'div'\n        })\n    };\n};\n","  import { jsx as _jsx } from \"@fluentui/react-jsx-runtime/jsx-runtime\";\nimport { assertSlots } from '@fluentui/react-utilities';\n/**\n * Renders a Divider component by passing the slot props (defined in `state`) to the appropriate slots.\n */ export const renderDivider_unstable = (state)=>{\n    assertSlots(state);\n    return /*#__PURE__*/ _jsx(state.root, {\n        children: state.root.children !== undefined && /*#__PURE__*/ _jsx(state.wrapper, {\n            children: state.root.children\n        })\n    });\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{--card-height:auto;--card-width:99%;background-color:var(--agenda-background-color,transparent)}:host .header{margin:var(--agenda-header-margin,18px 0 12px 10px);font-size:var(--agenda-header-font-size,24px);font-style:normal;font-weight:400;line-height:32px;color:var(--agenda-header-color,var(--neutral-foreground-rest));opacity:.9}:host .agenda,:host .group{display:flex;flex-direction:column;row-gap:var(--agenda-event-row-gap,14px)}:host .agenda>.group:first-child>.header,:host .group>.group:first-child>.header{margin-top:0}:host .agenda .event,:host .group .event{background:var(--agenda-event-background-color,var(--fill-color));border:var(--agenda-event-border,solid 2px transparent);box-shadow:var(--agenda-event-box-shadow,var(--elevation-shadow-card-rest));padding:var(--agenda-event-padding,12px);position:relative;display:flex;flex:1 1 auto;content-visibility:visible;contain:none}:host .agenda .event-container,:host .group .event-container{border-radius:calc(var(--layer-corner-radius) * 1px);padding:1px}:host .agenda .event.narrow,:host .group .event.narrow{display:flex;flex-direction:column;inset:0}:host .agenda .event-time-container,:host .group .event-time-container{font-style:normal;font-weight:600;font-size:12px;color:var(--agenda-event-time-color,var(--neutral-foreground-rest));width:112px;height:16px}:host .agenda .event-time-container.narrow,:host .group .event-time-container.narrow{margin-bottom:1px;width:100%}:host .agenda .event-time,:host .group .event-time{font-size:var(--agenda-event-time-font-size,12px);color:var(--agenda-event-time-color,var(--neutral-foreground-rest));font-weight:600}:host .agenda .event-details-container,:host .group .event-details-container{display:flex;flex-direction:column;position:relative;bottom:8px;top:0;padding-inline-start:32px}:host .agenda .event-details-container.narrow,:host .group .event-details-container.narrow{position:inherit;left:6px;display:flex;flex-direction:column;padding-inline-start:0}:host .agenda .event-subject,:host .group .event-subject{font-style:normal;font-weight:400;font-size:var(--agenda-event-subject-font-size,20px);line-height:28px;color:var(--agenda-event-subject-color,var(--neutral-foreground-rest));mix-blend-mode:normal;position:inherit;bottom:8px}:host .agenda .event-location-container,:host .group .event-location-container{display:inline-flex;flex-direction:row}:host .agenda .event-location-container .event-location,:host .group .event-location-container .event-location{padding-inline-start:3px;font-style:normal;font-weight:400;font-size:var(--agenda-event-location-font-size,12px);line-height:16px;color:var(--agenda-event-location-color,var(--neutral-foreground-rest))}:host .agenda .event-location-container .event-location-loading,:host .group .event-location-container .event-location-loading{width:90px;height:10px;margin:2px 0 0 4px}:host .agenda .event-location-container .event-location-icon,:host .group .event-location-container .event-location-icon{display:inline-flex}:host .agenda .event-location-container .event-location-icon svg,:host .group .event-location-container .event-location-icon svg{position:relative;top:2px;width:12px;height:12px}:host .agenda .event-location-container .event-location-icon svg path,:host .group .event-location-container .event-location-icon svg path{stroke:var(--agenda-event-location-color,var(--neutral-foreground-rest))}:host .agenda .event-location-container .event-location-icon-loading,:host .group .event-location-container .event-location-icon-loading{width:14px;height:14px}:host .agenda .event-location-container .event-attendee-loading,:host .group .event-location-container .event-attendee-loading{width:20px;height:20px;border-radius:10px;margin:0 2px 0 0}:host .agenda .event-attendees,:host .group .event-attendees{--list-margin:8px 0 0 0;--person-avatar-size:20px}fluent-card.event.event-loading{--card-height:90px}:host .event-attendees{--color:$agenda-event-attendees-color}:host fluent-tooltip{width:auto;contain:inline-size}[dir=rtl] :host{direction:rtl}[dir=rtl] .event-time-container{direction:ltr;display:flex;justify-content:flex-end}@media (forced-colors:active) and (prefers-color-scheme:dark){:host .agenda .event-location-container .event-location-icon svg path{stroke:#fff!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host .agenda .event-location-container .event-location-icon svg path{stroke:#000!important}}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphPageIterator, IGraph, prepScopes } from '@microsoft/mgt-element';\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n\nexport const getEventsQueryPageIterator = async (\n  graph: IGraph,\n  query: string,\n  scopes = 'calendars.read'\n): Promise<GraphPageIterator<MicrosoftGraph.Event>> => {\n  const request = graph.api(query).middlewareOptions(prepScopes(scopes)).orderby('start/dateTime');\n\n  return GraphPageIterator.create<MicrosoftGraph.Event>(graph, request);\n};\n\n/**\n * returns Calender events iterator associated with either the logged in user or a specific groupId\n *\n * @param {Date} startDateTime\n * @param {Date} endDateTime\n * @param {string} [groupId]\n * @param {string} preferredTimezone\n * @returns {(Promise<Event[]>)}\n * @memberof Graph\n */\nexport const getEventsPageIterator = async (\n  graph: IGraph,\n  startDateTime: Date,\n  endDateTime: Date,\n  groupId?: string\n): Promise<GraphPageIterator<MicrosoftGraph.Event>> => {\n  const sdt = `startdatetime=${startDateTime.toISOString()}`;\n  const edt = `enddatetime=${endDateTime.toISOString()}`;\n\n  let uri: string;\n\n  if (groupId) {\n    uri = `groups/${groupId}/calendar`;\n  } else {\n    uri = 'me';\n  }\n\n  uri += `/calendarview?${sdt}&${edt}`;\n\n  return getEventsQueryPageIterator(graph, uri);\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host .people-list{list-style:none;margin:var(--people-list-margin,8px 4px 8px 8px);padding:unset;display:flex;align-items:center;gap:var(--people-avatar-gap,4px)}:host .people-list .people-person{--person-avatar-size:var(--people-person-avatar-size, 24px)}:host .overflow span{vertical-align:middle;color:var(--people-overflow-font-color,currentColor);font-size:var(--people-overflow-font-size,12px);font-weight:var(--people-overflow-font-weight,400)}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { html, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { getPeople, getPeopleFromResource, PersonType } from '../../graph/graph.people';\nimport { getUsersPresenceByPeople } from '../../graph/graph.presence';\nimport { findGroupMembers, getUsersForPeopleQueries, getUsersForUserIds } from '../../graph/graph.user';\nimport { IDynamicPerson } from '../../graph/types';\nimport { Providers, ProviderState, MgtTemplatedTaskComponent, mgtHtml } from '@microsoft/mgt-element';\nimport '../../styles/style-helper';\nimport { PersonCardInteraction } from './../PersonCardInteraction';\nimport { styles } from './mgt-people-css';\nimport { MgtPerson, registerMgtPersonComponent } from '../mgt-person/mgt-person';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport { PersonCardInteraction } from './../PersonCardInteraction';\n\n/**\n * web component to display a group of people or contacts by using their photos or initials.\n *\n * @export\n * @class MgtPeople\n * @extends {MgtTemplatedTaskComponent}\n *\n * @cssprop --people-list-margin- {String} the margin around the list of people. Default is 8px 4px 8px 8px.\n * @cssprop --people-avatar-gap - {String} the gap between the people in the list. Default is 4px.\n * @cssprop --people-overflow-font-color - {Color} the color of the overflow text.\n * @cssprop --people-overflow-font-size - {String} the text color of the overflow text. Default is 12px.\n * @cssprop --people-overflow-font-weight - {String} the font weight of the overflow text. Default is 400.\n * @cssprop --people-person-avatar-size - {Length} the size of the avatar. Default is 24px.\n */\n\nexport const registerMgtPeopleComponent = () => {\n  registerMgtPersonComponent();\n  registerComponent('people', MgtPeople);\n};\n\nexport class MgtPeople extends MgtTemplatedTaskComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  /**\n   * determines if agenda events come from specific group\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'group-id',\n    type: String\n  })\n  public groupId: string;\n\n  /**\n   * user id array\n   *\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'user-ids',\n    converter: (value, _type) => {\n      return value.split(',').map(v => v.trim());\n    }\n  })\n  public userIds: string[];\n\n  /**\n   * containing array of people used in the component.\n   *\n   * @type {IDynamicPerson[]}\n   */\n  @property({\n    attribute: 'people',\n    type: Object\n  })\n  public people: IDynamicPerson[];\n\n  /**\n   * allows developer to define queries of people for component\n   *\n   * @type {string[]}\n   */\n\n  @property({\n    attribute: 'people-queries',\n    converter: (value, _type) => {\n      return value.split(',').map(v => v.trim());\n    }\n  })\n  public peopleQueries: string[];\n\n  /**\n   * developer determined max people shown in component\n   *\n   * @type {number}\n   */\n  @property({\n    attribute: 'show-max',\n    type: Number\n  })\n  public showMax: number;\n\n  /**\n   * determines if person component renders presence\n   *\n   * @type {boolean}\n   */\n  @property({\n    attribute: 'show-presence',\n    type: Boolean\n  })\n  public showPresence: boolean;\n\n  /**\n   * Sets how the person-card is invoked\n   * Set to PersonCardInteraction.none to not show the card\n   *\n   * @type {PersonCardInteraction}\n   * @memberof MgtPerson\n   */\n  @property({\n    attribute: 'person-card',\n    converter: (value, _type) => {\n      value = value.toLowerCase();\n      if (typeof PersonCardInteraction[value] === 'undefined') {\n        return PersonCardInteraction.hover;\n      } else {\n        return PersonCardInteraction[value] as PersonCardInteraction;\n      }\n    }\n  })\n  public personCardInteraction: PersonCardInteraction = PersonCardInteraction.hover;\n\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'resource',\n    type: String\n  })\n  public resource: string;\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'v1.0';\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'scopes',\n    converter: value => {\n      return value ? value.toLowerCase().split(',') : null;\n    },\n    reflect: true\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Fallback when no user is found\n   *\n   * @type {IDynamicPerson[]}\n   */\n  @property({\n    attribute: 'fallback-details',\n    type: Array\n  })\n  public fallbackDetails: IDynamicPerson[];\n\n  /**\n   * Get the scopes required for people\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtPeople\n   */\n  public static get requiredScopes(): string[] {\n    return [\n      ...new Set([\n        'user.read.all',\n        'people.read',\n        'user.readbasic.all',\n        'presence.read.all',\n        'contacts.read',\n        ...MgtPerson.requiredScopes\n      ])\n    ];\n  }\n\n  private _peoplePresence: Record<string, MicrosoftGraph.Presence> = {};\n  @state() private _arrowKeyLocation = -1;\n\n  constructor() {\n    super();\n    this.showMax = 3;\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtPeople\n   */\n  protected clearState(): void {\n    this.people = null;\n  }\n\n  protected args(): unknown[] {\n    return [\n      this.providerState,\n      this.groupId,\n      this.userIds,\n      this.peopleQueries,\n      this.showMax,\n      this.resource,\n      this.version,\n      this.fallbackDetails\n    ];\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected renderContent = () => {\n    if (!this.people || this.people.length === 0) {\n      return this.renderNoData();\n    }\n\n    return this.renderTemplate('default', { people: this.people, max: this.showMax }) || this.renderPeople();\n  };\n\n  /**\n   * Render the loading state.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPeople\n   */\n  protected renderLoading = () => {\n    return this.renderTemplate('loading', null) || html``;\n  };\n\n  /**\n   * Render the list of people.\n   *\n   * @protected\n   * @param {*} people\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderPeople(): TemplateResult {\n    const maxPeople = this.people.slice(0, this.showMax).filter(pple => pple);\n    return html`\n      <ul\n        tabindex=\"0\"\n        class=\"people-list\"\n        aria-label=\"people\"\n        @keydown=${this.handleKeyDown}>\n        ${repeat(\n          maxPeople,\n          p => (p.id ? p.id : p.displayName),\n          p => html`\n            <li tabindex=\"-1\" class=\"people-person\">\n              ${this.renderPerson(p)}\n            </li>\n          `\n        )}\n        ${this.people.length > this.showMax ? this.renderOverflow() : null}\n      </ul>\n    `;\n  }\n\n  /**\n   * Render the overflow content to represent any extra people, beyond the max.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderOverflow(): TemplateResult {\n    const extra = this.people.length - this.showMax;\n    return (\n      this.renderTemplate('overflow', {\n        extra,\n        max: this.showMax,\n        people: this.people\n      }) ||\n      html`\n        <li tabindex=\"-1\" aria-label=\"and ${extra} more attendees\" class=\"overflow\"><span>+${extra}</span></li>\n      `\n    );\n  }\n\n  /**\n   * Handles the keypresses on a keyboard for the listed people.\n   *\n   * @param event is a KeyboardEvent.\n   */\n  protected handleKeyDown = (event: KeyboardEvent) => {\n    const peopleContainer: HTMLElement = this.shadowRoot.querySelector('.people-list');\n    let person: HTMLElement;\n    const peopleElements: HTMLCollection = peopleContainer?.children;\n    // Default all tabindex values in li nodes to -1\n    for (const element of peopleElements) {\n      const el: HTMLElement = element as HTMLElement;\n      el.setAttribute('tabindex', '-1');\n      el.blur();\n    }\n\n    const childElementCount = peopleContainer.childElementCount;\n    const keyName = event.key;\n    if (keyName === 'ArrowRight') {\n      this._arrowKeyLocation = (this._arrowKeyLocation + 1 + childElementCount) % childElementCount;\n    } else if (keyName === 'ArrowLeft') {\n      this._arrowKeyLocation = (this._arrowKeyLocation - 1 + childElementCount) % childElementCount;\n    } else if (keyName === 'Tab' || keyName === 'Escape') {\n      this._arrowKeyLocation = -1;\n      peopleContainer.blur();\n    } else if (['Enter', 'space', ' '].includes(keyName)) {\n      if (this.personCardInteraction !== PersonCardInteraction.none) {\n        const personEl = peopleElements[this._arrowKeyLocation] as HTMLElement;\n        const mgtPerson = personEl.querySelector<MgtPerson>('mgt-person');\n        if (mgtPerson) {\n          mgtPerson.showPersonCard();\n        }\n      }\n    }\n\n    if (this._arrowKeyLocation > -1) {\n      person = peopleElements[this._arrowKeyLocation] as HTMLElement;\n      person.setAttribute('tabindex', '1');\n      person.focus();\n    }\n  };\n\n  /**\n   * Render an individual person.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderPerson(person: MicrosoftGraph.User | MicrosoftGraph.Person | MicrosoftGraph.Contact): TemplateResult {\n    let personPresence: MicrosoftGraph.Presence = {\n      // set up default presence\n      activity: 'Offline',\n      availability: 'Offline',\n      id: null\n    };\n    if (this.showPresence && this._peoplePresence) {\n      personPresence = this._peoplePresence[person.id];\n    }\n    const avatarSize = 'small';\n    return (\n      this.renderTemplate('person', { person }, person.id) ||\n      // set image to @ to flag the mgt-person component to\n      // query the image from the graph\n      mgtHtml`\n        <mgt-person\n          class=\"people-person\"\n          .personDetails=${person}\n          .fetchImage=${true}\n          .avatarSize=${avatarSize}\n          .personCardInteraction=${this.personCardInteraction}\n          .showPresence=${this.showPresence}\n          .personPresence=${personPresence}\n          .usage=${'people'}\n        ></mgt-person>\n      `\n    );\n  }\n\n  /**\n   * render the no data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderNoData(): TemplateResult {\n    return this.renderTemplate('no-data', null) || html``;\n  }\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPeople\n   */\n  protected async loadState() {\n    if (!this.people) {\n      const provider = Providers.globalProvider;\n\n      if (provider && provider.state === ProviderState.SignedIn) {\n        const graph = provider.graph.forComponent(this);\n\n        // populate people\n        if (this.groupId) {\n          this.people = await findGroupMembers(graph, null, this.groupId, this.showMax, PersonType.person);\n        } else if (this.userIds || this.peopleQueries) {\n          this.people = this.userIds\n            ? await getUsersForUserIds(graph, this.userIds, '', '', this.fallbackDetails)\n            : await getUsersForPeopleQueries(graph, this.peopleQueries, this.fallbackDetails);\n        } else if (this.resource) {\n          this.people = await getPeopleFromResource(graph, this.version, this.resource, this.scopes);\n        } else {\n          this.people = await getPeople(graph);\n        }\n\n        // populate presence for people\n        if (this.showPresence) {\n          this._peoplePresence = await getUsersPresenceByPeople(graph, this.people);\n        } else {\n          this._peoplePresence = null;\n        }\n      }\n    }\n  }\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { Providers, ProviderState, mgtHtml, MgtTemplatedTaskComponent } from '@microsoft/mgt-element';\nimport '../../styles/style-helper';\nimport '../mgt-person/mgt-person';\nimport { styles } from './mgt-agenda-css';\nimport { getEventsPageIterator, getEventsQueryPageIterator } from './mgt-agenda.graph';\nimport { SvgIcon, getSvg } from '../../utils/SvgHelper';\nimport { MgtPeople, registerMgtPeopleComponent } from '../mgt-people/mgt-people';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentCard } from '@fluentui/web-components';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { registerComponent } from '@microsoft/mgt-element';\n\n/**\n * Web Component which represents events in a user or group calendar.\n *\n * @export\n * @class MgtAgenda\n * @extends {MgtTemplatedComponent}\n *\n * @fires {CustomEvent<MicrosoftGraph.Event>} eventClick - Fired when user click an event\n *\n * @cssprop --event-box-shadow - {String} Event box shadow color and size\n * @cssprop --event-row-gap - {String} The size of the gap between two event elements\n * @cssprop --event-padding - {String} Event padding\n * @cssprop --event-background-color - {Color} Event background color\n * @cssprop --event-border - {String} Event border style\n * @cssprop --agenda-header-margin - {String} Agenda header margin size\n * @cssprop --agenda-header-font-size - {Length} Agenda header font size\n * @cssprop --agenda-header-color - {Color} Agenda header color\n * @cssprop --event-time-font-size - {Length} Event time font size\n * @cssprop --event-time-color - {Color} Event time color\n * @cssprop --event-subject-font-size - {Length} Event subject font size\n * @cssprop --event-subject-color - {Color} Event subject color\n * @cssprop --event-location-font-size - {Length} Event location font size\n * @cssprop --event-location-color - {Color} Event location color\n * @cssprop --event-attendees-color - {Color} Event attendees color\n */\n\nexport const registerMgtAgendaComponent = () => {\n  registerFluentComponents(fluentCard);\n  // register dependent components\n  registerMgtPeopleComponent();\n  // register self\n  registerComponent('agenda', MgtAgenda);\n};\n\nexport class MgtAgenda extends MgtTemplatedTaskComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  /**\n   * stores current date for initial calender selection in events.\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'date',\n    type: String\n  })\n  public date: string;\n\n  /**\n   * determines if agenda events come from specific group\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'group-id',\n    type: String\n  })\n  public groupId: string;\n\n  /**\n   * sets number of days until end date, 3 is the default\n   *\n   * @type {number}\n   */\n  @property({\n    attribute: 'days',\n    type: Number\n  })\n  public days = 3;\n\n  /**\n   * allows developer to specify a different graph query that retrieves events\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'event-query',\n    type: String\n  })\n  public eventQuery: string;\n\n  /**\n   * array containing events from user agenda.\n   *\n   * @type {MicrosoftGraph.Event[]}\n   */\n  @property({\n    attribute: 'events',\n    type: Array,\n    hasChanged: (newVal: [], oldVal: []) => {\n      return newVal !== oldVal;\n    }\n  })\n  public events: MicrosoftGraph.Event[];\n\n  /**\n   * allows developer to define max number of events shown\n   *\n   * @type {number}\n   */\n  @property({\n    attribute: 'show-max',\n    type: Number\n  })\n  public showMax: number;\n\n  /**\n   * allows developer to define agenda to group events by day.\n   *\n   * @type {boolean}\n   */\n  @property({\n    attribute: 'group-by-day',\n    type: Boolean\n  })\n  public groupByDay: boolean;\n\n  /**\n   * allows developer to specify preferred timezone that should be used for\n   * rendering events retrieved from Graph, eg. `America/Los_Angeles`.\n   * By default events are rendered using the current timezone of the\n   * device being used.\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'preferred-timezone',\n    type: String\n  })\n  public preferredTimezone: string;\n\n  /**\n   * Get the scopes required for agenda\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtAgenda\n   */\n  public static get requiredScopes(): string[] {\n    return [...new Set(['calendars.read', ...MgtPeople.requiredScopes])];\n  }\n\n  /**\n   * determines width available for agenda component.\n   *\n   * @type {boolean}\n   */\n  @property({ attribute: false }) private _isNarrow: boolean;\n\n  /**\n   * Determines width available if resize is necessary, adds onResize event listener to window\n   *\n   * @memberof MgtAgenda\n   */\n  public connectedCallback() {\n    this._isNarrow = this.offsetWidth < 600;\n    super.connectedCallback();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  /**\n   * Removes onResize event listener from window\n   *\n   * @memberof MgtAgenda\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('resize', this.onResize);\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return a lit-html TemplateResult.\n   * Setting properties inside this method will not trigger the element to update\n   *\n   * @returns\n   * @memberof MgtAgenda\n   */\n  public renderContent = (): TemplateResult => {\n    // No data\n    if (!this.events || this.events.length === 0) {\n      return this.renderNoData();\n    }\n\n    // Prep data\n    const events = this.showMax && this.showMax > 0 ? this.events.slice(0, this.showMax) : this.events;\n\n    // Default template\n    const renderedTemplate = this.renderTemplate('default', { events });\n    if (renderedTemplate) {\n      return renderedTemplate;\n    }\n\n    const agendaClasses = {\n      agenda: true,\n      grouped: this.groupByDay\n    };\n\n    // Render list\n    return html`\n      <div dir=${this.direction} class=\"${classMap(agendaClasses)}\">\n        ${this.groupByDay ? this.renderGroups(events) : this.renderEvents(events)}\n      </div>\n    `;\n  };\n\n  /**\n   * Reloads the component with its current settings and potential new data\n   *\n   * @memberof MgtAgenda\n   */\n  public async reload() {\n    this.events = await this.loadEvents();\n  }\n\n  /**\n   * Render the loading state\n   *\n   * @protected\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderLoading = (): TemplateResult => {\n    return (\n      this.renderTemplate('loading', null) ||\n      html`\n        <fluent-card class=\"event event-loading\">\n          <div class=\"event-time-container\">\n            <div class=\"event-time-loading loading-element\"></div>\n          </div>\n          <div class=\"event-details-container\">\n            <div class=\"event-subject-loading loading-element\"></div>\n            <div class=\"event-location-container\">\n              <div class=\"event-location-icon-loading loading-element\"></div>\n              <div class=\"event-location-loading loading-element\"></div>\n            </div>\n            <div class=\"event-location-container\">\n              <div class=\"event-attendee-loading loading-element\"></div>\n              <div class=\"event-attendee-loading loading-element\"></div>\n              <div class=\"event-attendee-loading loading-element\"></div>\n            </div>\n          </div>\n        </fluent-card>`\n    );\n  };\n\n  /**\n   * Clears state of the component\n   *\n   * @protected\n   * @memberof MgtAgenda\n   */\n  protected clearState(): void {\n    this.events = null;\n  }\n\n  /**\n   * Render the no-data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtAgenda\n   */\n  protected renderNoData(): TemplateResult {\n    return this.renderTemplate('no-data', null) || html``;\n  }\n\n  /**\n   * Render an individual Event.\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderEvent(event: MicrosoftGraph.Event): TemplateResult {\n    // Update narrow state\n    this._isNarrow = this.offsetWidth < 600;\n\n    const eventClasses = {\n      narrow: this._isNarrow\n    };\n\n    return html`\n      <fluent-card class=\"${classMap({ event: true, ...eventClasses })}\">\n        <div class=\"${classMap({ 'event-time-container': true, ...eventClasses })}\">\n          <div class=\"event-time\" aria-label=\"${this.getEventTimeString(event)}\">${this.getEventTimeString(event)}</div>\n        </div>\n        <div class=\"${classMap({ 'event-details-container': true, ...eventClasses })}\">\n          ${this.renderTitle(event)} ${this.renderLocation(event)} ${this.renderAttendees(event)}\n        </div>\n        <div class=\"event-other-container\">${this.renderOther(event)}</div>\n      </fluent-card>\n    `;\n  }\n\n  /**\n   * Render the header for a group.\n   * Only relevant for grouped Events.\n   *\n   * @protected\n   * @param {Date} date\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderHeader(header: string): TemplateResult {\n    return (\n      this.renderTemplate('header', { header }, 'header-' + header) ||\n      html`\n        <div class=\"header\" aria-label=\"${header}\">${header}</div>\n      `\n    );\n  }\n\n  /**\n   * Render the title field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderTitle(event: MicrosoftGraph.Event): TemplateResult {\n    return html`\n      <div\n        aria-label=${event.subject}\n        class=\"${classMap({\n          'event-subject': true,\n          narrow: this._isNarrow\n        })}\"\n      >\n        ${event.subject}\n      </div>`;\n  }\n\n  /**\n   * Render the location field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderLocation(event: MicrosoftGraph.Event): TemplateResult {\n    if (!event.location.displayName) {\n      return null;\n    }\n\n    return html`\n      <div class=\"event-location-container\">\n        <div class=\"event-location-icon\">${getSvg(SvgIcon.OfficeLocation)}</div>\n        <div class=\"event-location\" aria-label=\"${event.location.displayName}\">${event.location.displayName}</div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the attendees field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderAttendees(event: MicrosoftGraph.Event): TemplateResult {\n    if (!event.attendees.length) {\n      return null;\n    }\n    return mgtHtml`\n      <mgt-people\n        show-max=\"5\"\n        show-presence\n        class=\"event-attendees\"\n        .peopleQueries=${event.attendees.map(attendee => {\n          return attendee.emailAddress.address;\n        })}\n      ></mgt-people>\n    `;\n  }\n\n  /**\n   * Render the event other field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderOther(event: MicrosoftGraph.Event): TemplateResult {\n    return this.hasTemplate('event-other')\n      ? html`\n          ${this.renderTemplate('event-other', { event }, event.id + '-other')}\n        `\n      : null;\n  }\n\n  /**\n   * Render the events in groups, each with a header.\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event[]} events\n   * @returns {TemplateResult}\n   * @memberof MgtAgenda\n   */\n  protected renderGroups(events: MicrosoftGraph.Event[]): TemplateResult {\n    // Render list, grouped by day\n    const grouped: Record<string, MicrosoftGraph.Event[]> = {};\n\n    events.forEach(event => {\n      let dateString = event?.start?.dateTime;\n      if (event.end.timeZone === 'UTC') {\n        dateString += 'Z';\n      }\n\n      const header = this.getDateHeaderFromDateTimeString(dateString);\n      grouped[header] = grouped[header] || [];\n      grouped[header].push(event);\n    });\n\n    return html`\n      ${Object.keys(grouped).map(\n        header =>\n          html`\n            <div class=\"group\">${this.renderHeader(header)} ${this.renderEvents(grouped[header])}</div>\n          `\n      )}\n    `;\n  }\n\n  /**\n   * Render a list of events.\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event[]} events\n   * @returns {TemplateResult}\n   * @memberof MgtAgenda\n   */\n  protected renderEvents(events: MicrosoftGraph.Event[]): TemplateResult {\n    return html`\n        ${events.map(\n          event =>\n            html`\n              <div\n                class=\"event-container\"\n                tabindex=\"0\"\n                @focus=${() => this.eventClicked(event)}>\n                ${this.renderTemplate('event', { event }, event.id) || this.renderEvent(event)}\n              </div>`\n        )}`;\n  }\n\n  protected args() {\n    return [this.providerState, this.preferredTimezone, this.eventQuery, this.date, this.groupId, this.days];\n  }\n\n  /**\n   * Load state into the component\n   *\n   * @protected\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected async loadState() {\n    if (this.events) {\n      return;\n    }\n\n    const events = await this.loadEvents();\n    if (events?.length > 0) {\n      this.events = events;\n    }\n  }\n\n  private readonly onResize = () => {\n    this._isNarrow = this.offsetWidth < 600;\n  };\n\n  private eventClicked(event: MicrosoftGraph.Event) {\n    this.fireCustomEvent('eventClick', event);\n  }\n\n  private getEventTimeString(event: MicrosoftGraph.Event) {\n    if (event.isAllDay) {\n      return 'ALL DAY';\n    }\n\n    // #937 When not specifying a preferred time zone using the\n    // preferred-timezone attribute, MGT treats the dates retrieved from\n    // Microsoft Graph as local time, rather than UTC.\n    let startString = event.start.dateTime;\n    if (event.start.timeZone === 'UTC') {\n      startString += 'Z';\n    }\n    let endString = event.end.dateTime;\n    if (event.end.timeZone === 'UTC') {\n      endString += 'Z';\n    }\n\n    const start = this.prettyPrintTimeFromDateTime(new Date(startString));\n    const end = this.prettyPrintTimeFromDateTime(new Date(endString));\n\n    return `${start} - ${end}`;\n  }\n\n  private async loadEvents(): Promise<MicrosoftGraph.Event[]> {\n    const p = Providers.globalProvider;\n    let events: MicrosoftGraph.Event[] = [];\n\n    if (p?.state === ProviderState.SignedIn) {\n      const graph = p.graph.forComponent(this);\n\n      if (this.eventQuery) {\n        try {\n          const tokens = this.eventQuery.split('|');\n          let scope: string;\n          let query: string;\n          if (tokens.length > 1) {\n            query = tokens[0].trim();\n            scope = tokens[1].trim();\n          } else {\n            query = this.eventQuery;\n          }\n          const iterator = await getEventsQueryPageIterator(graph, query, scope);\n          if (iterator?.value) {\n            events = iterator.value;\n\n            while (iterator.hasNext) {\n              await iterator.next();\n              events = iterator.value;\n            }\n          }\n          // eslint-disable-next-line no-empty\n        } catch (e) {}\n      } else {\n        const start = this.date ? new Date(this.date) : new Date();\n        const end = new Date(start.getTime());\n        end.setDate(start.getDate() + this.days);\n\n        try {\n          const iterator = await getEventsPageIterator(graph, start, end, this.groupId);\n          if (iterator?.value) {\n            events = iterator.value;\n\n            while (iterator.hasNext) {\n              await iterator.next();\n              events = iterator.value;\n            }\n          }\n        } catch (error) {\n          // noop - possible error with graph\n        }\n      }\n    }\n\n    return events;\n  }\n\n  private prettyPrintTimeFromDateTime(date: Date) {\n    return date.toLocaleTimeString(navigator.language, {\n      timeStyle: 'short',\n      timeZone: this.preferredTimezone\n    });\n  }\n\n  private getDateHeaderFromDateTimeString(dateTimeString: string) {\n    const date = new Date(dateTimeString);\n    return date.toLocaleDateString(navigator.language, {\n      dateStyle: 'full',\n      timeZone: this.preferredTimezone\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { registerMgtAgendaComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type AgendaProps = {\n\tdate?: string;\n\tgroupId?: string;\n\tdays?: number;\n\teventQuery?: string;\n\tevents?: MicrosoftGraph.Event[];\n\tshowMax?: number;\n\tgroupByDay?: boolean;\n\tpreferredTimezone?: string;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Agenda = wrapMgt<AgendaProps>('agenda', registerMgtAgendaComponent);\n\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { registerMgtSpinnerComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { ComponentMediaQuery } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type SpinnerProps = {\n\tmediaQuery?: ComponentMediaQuery;\n}\n\nexport const Spinner = wrapMgt<SpinnerProps>('spinner', registerMgtSpinnerComponent);\n\n"],"names":["dividerClassNames","useBaseStyles","__styles","base","Bt984gj","B7ck84d","mc9l5x","Beiy3e4","Bh6795r","qhf8xq","Bahqtrf","Be2twd7","Bhrd7zp","Bg96gwp","fsow6f","Bcvre1j","Br0sdwz","Bn78ew0","li1rpt","ap17g6","B771hl4","childless","susq4k","Bicfajf","jwcpgy","B4rk6o","start","Bsft5z2","center","Ftih45","end","brand","sj55zd","Bq4z7u6","Bk5zm6e","Bqjgrrk","Bm6vgfq","B0n5ga8","s924m2","B1q35kw","Gp14am","subtle","strong","d","useHorizontalStyles","a9b677","Bdkvgpv","B0qfbqy","pbipgd","Bm2nyyq","xrcqlc","i5u598","inset","uwmqm3","z189sj","Bxwl2t9","Iy66sp","useVerticalStyles","sshi5w","m598lv","B4f6apu","zkzzav","Barhvk9","Ihftqj","Bde111x","B6of3ja","jrapky","withChildren","Bbdr6tz","gn64ia","Divider","React","props","ref","state","_props$alignContent","alignContent","_props$appearance","appearance","_props$inset","_props$vertical","vertical","wrapper","dividerId","useId","components","root","slot","getIntrinsicElementProps","_objectSpread","role","children","undefined","elementType","defaultProps","id","useDivider_unstable","baseStyles","horizontalStyles","verticalStyles","className","mergeClasses","useDividerStyles_unstable","useCustomStyleHook_unstable","assertSlots","_jsx","renderDivider_unstable","displayName","styles","css","_templateObject","_taggedTemplateLiteral","getEventsQueryPageIterator","graph","query","scopes","arguments","length","__awaiter","_regeneratorRuntime","mark","_callee","request","wrap","_context","prev","next","api","middlewareOptions","prepScopes","orderby","abrupt","GraphPageIterator","create","stop","getEventsPageIterator","startDateTime","endDateTime","groupId","_callee2","sdt","edt","uri","_context2","concat","toISOString","MgtPeople","_MgtTemplatedTaskComp","_inherits","_super","_createSuper","_this","_classCallCheck","call","personCardInteraction","PersonCardInteraction","hover","version","_peoplePresence","_arrowKeyLocation","renderContent","people","renderTemplate","max","showMax","renderPeople","renderNoData","renderLoading","html","handleKeyDown","event","person","_step","peopleContainer","shadowRoot","querySelector","peopleElements","_iterator","_createForOfIteratorHelper","s","n","done","el","value","setAttribute","blur","err","e","f","childElementCount","keyName","key","includes","none","mgtPerson","showPersonCard","focus","_createClass","this","providerState","userIds","peopleQueries","resource","fallbackDetails","_this2","maxPeople","slice","filter","pple","_templateObject2","repeat","p","_templateObject3","renderPerson","renderOverflow","extra","_templateObject4","personPresence","activity","availability","showPresence","mgtHtml","_templateObject5","_templateObject6","provider","Providers","globalProvider","ProviderState","SignedIn","forComponent","findGroupMembers","PersonType","sent","getUsersForUserIds","t0","getUsersForPeopleQueries","getPeopleFromResource","getPeople","getUsersPresenceByPeople","get","_toConsumableArray","Set","MgtPerson","requiredScopes","MgtTemplatedTaskComponent","__decorate","property","attribute","type","String","converter","_type","split","map","v","trim","Object","Number","Boolean","toLowerCase","reflect","Array","MgtAgenda","days","events","renderedTemplate","agendaClasses","agenda","grouped","groupByDay","direction","classMap","renderGroups","renderEvents","onResize","_isNarrow","offsetWidth","_get","_getPrototypeOf","prototype","window","addEventListener","removeEventListener","loadEvents","eventClasses","narrow","assign","getEventTimeString","renderTitle","renderLocation","renderAttendees","renderOther","header","subject","location","_templateObject7","getSvg","SvgIcon","OfficeLocation","attendees","_templateObject8","attendee","emailAddress","address","hasTemplate","_templateObject9","forEach","dateString","_a","dateTime","timeZone","getDateHeaderFromDateTimeString","push","_templateObject10","keys","_templateObject11","renderHeader","_this3","_templateObject12","_templateObject13","eventClicked","renderEvent","preferredTimezone","eventQuery","date","fireCustomEvent","isAllDay","startString","endString","prettyPrintTimeFromDateTime","Date","_context3","tokens","scope","iterator","hasNext","getTime","setDate","getDate","t1","_callee3","toLocaleTimeString","navigator","language","timeStyle","dateTimeString","toLocaleDateString","dateStyle","hasChanged","newVal","oldVal","Agenda","wrapMgt","registerFluentComponents","fluentCard","registerMgtPersonComponent","registerComponent","Spinner","registerMgtSpinnerComponent"],"sourceRoot":""}