{"version":3,"file":"static/js/882.34e6bc6f.chunk.js","mappings":"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","sources":["../../../node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.form-associated.js","../../../node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.js","../../../node_modules/@fluentui/web-components/dist/esm/checkbox/index.js","../../../node_modules/@microsoft/fast-foundation/dist/esm/checkbox/checkbox.template.js","../../../node_modules/@fluentui/web-components/dist/esm/checkbox/checkbox.styles.js","../../../node_modules/lit-html/src/directive-helpers.ts","../../../node_modules/lit-html/src/directives/repeat.ts"],"sourcesContent":["import { CheckableFormAssociated } from \"../form-associated/form-associated.js\";\nimport { FoundationElement } from \"../foundation-element/foundation-element.js\";\nclass _Checkbox extends FoundationElement {\n}\n/**\n * A form-associated base class for the {@link @microsoft/fast-foundation#(Checkbox:class)} component.\n *\n * @internal\n */\nexport class FormAssociatedCheckbox extends CheckableFormAssociated(_Checkbox) {\n    constructor() {\n        super(...arguments);\n        this.proxy = document.createElement(\"input\");\n    }\n}\n","import { __decorate } from \"tslib\";\nimport { attr, observable } from \"@microsoft/fast-element\";\nimport { keySpace } from \"@microsoft/fast-web-utilities\";\nimport { FormAssociatedCheckbox } from \"./checkbox.form-associated.js\";\n/**\n * A Checkbox Custom HTML Element.\n * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#checkbox | ARIA checkbox }.\n *\n * @slot checked-indicator - The checked indicator\n * @slot indeterminate-indicator - The indeterminate indicator\n * @slot - The default slot for the label\n * @csspart control - The element representing the visual checkbox control\n * @csspart label - The label\n * @fires change - Emits a custom change event when the checked state changes\n *\n * @public\n */\nexport class Checkbox extends FormAssociatedCheckbox {\n    constructor() {\n        super();\n        /**\n         * The element's value to be included in form submission when checked.\n         * Default to \"on\" to reach parity with input[type=\"checkbox\"]\n         *\n         * @internal\n         */\n        this.initialValue = \"on\";\n        /**\n         * The indeterminate state of the control\n         */\n        this.indeterminate = false;\n        /**\n         * @internal\n         */\n        this.keypressHandler = (e) => {\n            if (this.readOnly) {\n                return;\n            }\n            switch (e.key) {\n                case keySpace:\n                    if (this.indeterminate) {\n                        this.indeterminate = false;\n                    }\n                    this.checked = !this.checked;\n                    break;\n            }\n        };\n        /**\n         * @internal\n         */\n        this.clickHandler = (e) => {\n            if (!this.disabled && !this.readOnly) {\n                if (this.indeterminate) {\n                    this.indeterminate = false;\n                }\n                this.checked = !this.checked;\n            }\n        };\n        this.proxy.setAttribute(\"type\", \"checkbox\");\n    }\n    readOnlyChanged() {\n        if (this.proxy instanceof HTMLInputElement) {\n            this.proxy.readOnly = this.readOnly;\n        }\n    }\n}\n__decorate([\n    attr({ attribute: \"readonly\", mode: \"boolean\" })\n], Checkbox.prototype, \"readOnly\", void 0);\n__decorate([\n    observable\n], Checkbox.prototype, \"defaultSlottedNodes\", void 0);\n__decorate([\n    observable\n], Checkbox.prototype, \"indeterminate\", void 0);\n","import { Checkbox, checkboxTemplate as template } from '@microsoft/fast-foundation';\nimport { checkboxStyles as styles } from './checkbox.styles';\n/**\n * The Fluent Checkbox Element. Implements {@link @microsoft/fast-foundation#Checkbox},\n * {@link @microsoft/fast-foundation#checkboxTemplate}\n *\n *\n * @public\n * @remarks\n * HTML Element: \\<fluent-checkbox\\>\n */\nexport const fluentCheckbox = Checkbox.compose({\n    baseName: 'checkbox',\n    template,\n    styles,\n    checkedIndicator: `\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M13.86 3.66a.5.5 0 01-.02.7l-7.93 7.48a.6.6 0 01-.84-.02L2.4 9.1a.5.5 0 01.72-.7l2.4 2.44 7.65-7.2a.5.5 0 01.7.02z\"/>\n    </svg>\n  `,\n    indeterminateIndicator: `\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M3 8c0-.28.22-.5.5-.5h9a.5.5 0 010 1h-9A.5.5 0 013 8z\"/>\n    </svg>\n  `,\n});\n/**\n * Styles for Checkbox\n * @public\n */\nexport const checkboxStyles = styles;\n","import { html, slotted } from \"@microsoft/fast-element\";\n/**\n * The template for the {@link @microsoft/fast-foundation#(Checkbox:class)} component.\n * @public\n */\nexport const checkboxTemplate = (context, definition) => html `\n    <template\n        role=\"checkbox\"\n        aria-checked=\"${x => x.checked}\"\n        aria-required=\"${x => x.required}\"\n        aria-disabled=\"${x => x.disabled}\"\n        aria-readonly=\"${x => x.readOnly}\"\n        tabindex=\"${x => (x.disabled ? null : 0)}\"\n        @keypress=\"${(x, c) => x.keypressHandler(c.event)}\"\n        @click=\"${(x, c) => x.clickHandler(c.event)}\"\n        class=\"${x => (x.readOnly ? \"readonly\" : \"\")} ${x => x.checked ? \"checked\" : \"\"} ${x => (x.indeterminate ? \"indeterminate\" : \"\")}\"\n    >\n        <div part=\"control\" class=\"control\">\n            <slot name=\"checked-indicator\">\n                ${definition.checkedIndicator || \"\"}\n            </slot>\n            <slot name=\"indeterminate-indicator\">\n                ${definition.indeterminateIndicator || \"\"}\n            </slot>\n        </div>\n        <label\n            part=\"label\"\n            class=\"${x => x.defaultSlottedNodes && x.defaultSlottedNodes.length\n    ? \"label\"\n    : \"label label__hidden\"}\"\n        >\n            <slot ${slotted(\"defaultSlottedNodes\")}></slot>\n        </label>\n    </template>\n`;\n","import { css } from '@microsoft/fast-element';\nimport { disabledCursor, display, focusVisible, forcedColorsStylesheetBehavior, } from '@microsoft/fast-foundation';\nimport { SystemColors } from '@microsoft/fast-web-utilities';\nimport { heightNumber } from '../styles';\nimport { accentFillActive, accentFillHover, accentFillRest, controlCornerRadius, designUnit, disabledOpacity, foregroundOnAccentRest, neutralFillInputAltActive, neutralFillInputAltFocus, neutralFillInputAltHover, neutralFillInputAltRest, neutralForegroundRest, neutralStrokeStrongActive, neutralStrokeStrongHover, neutralStrokeStrongRest, strokeWidth, } from '../design-tokens';\nimport { typeRampBase } from '../styles/patterns/type-ramp';\nimport { focusTreatmentTight } from '../styles/focus';\nexport const checkboxStyles = (context, definition) => css `\n    ${display('inline-flex')} :host {\n      align-items: center;\n      outline: none;\n      ${\n/*\n * Chromium likes to select label text or the default slot when\n * the checkbox is clicked. Maybe there is a better solution here?\n */ ''} user-select: none;\n    }\n\n    .control {\n      position: relative;\n      width: calc((${heightNumber} / 2 + ${designUnit}) * 1px);\n      height: calc((${heightNumber} / 2 + ${designUnit}) * 1px);\n      box-sizing: border-box;\n      border-radius: calc(${controlCornerRadius} * 1px);\n      border: calc(${strokeWidth} * 1px) solid ${neutralStrokeStrongRest};\n      background: ${neutralFillInputAltRest};\n      cursor: pointer;\n    }\n\n    .label__hidden {\n      display: none;\n      visibility: hidden;\n    }\n\n    .label {\n      ${typeRampBase}\n      color: ${neutralForegroundRest};\n      ${\n/* Need to discuss with Brian how HorizontalSpacingNumber can work. https://github.com/microsoft/fast/issues/2766 */ ''} padding-inline-start: calc(${designUnit} * 2px + 2px);\n      margin-inline-end: calc(${designUnit} * 2px + 2px);\n      cursor: pointer;\n    }\n\n    slot[name='checked-indicator'],\n    slot[name='indeterminate-indicator'] {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%;\n      height: 100%;\n      fill: ${neutralForegroundRest};\n      opacity: 0;\n      pointer-events: none;\n    }\n\n    slot[name='indeterminate-indicator'] {\n      position: absolute;\n      top: 0;\n    }\n\n    :host(.checked) slot[name='checked-indicator'],\n    :host(.checked) slot[name='indeterminate-indicator'] {\n      fill: ${foregroundOnAccentRest};\n    }\n\n    :host(:not(.disabled):hover) .control {\n      background: ${neutralFillInputAltHover};\n      border-color: ${neutralStrokeStrongHover};\n    }\n\n    :host(:not(.disabled):active) .control {\n      background: ${neutralFillInputAltActive};\n      border-color: ${neutralStrokeStrongActive};\n    }\n\n    :host(:${focusVisible}) .control {\n      background: ${neutralFillInputAltFocus};\n      ${focusTreatmentTight}\n    }\n\n    :host(.checked) .control {\n      background: ${accentFillRest};\n      border-color: transparent;\n    }\n\n    :host(.checked:not(.disabled):hover) .control {\n      background: ${accentFillHover};\n      border-color: transparent;\n    }\n\n    :host(.checked:not(.disabled):active) .control {\n      background: ${accentFillActive};\n      border-color: transparent;\n    }\n\n    :host(.disabled) .label,\n    :host(.readonly) .label,\n    :host(.readonly) .control,\n    :host(.disabled) .control {\n      cursor: ${disabledCursor};\n    }\n\n    :host(.checked:not(.indeterminate)) slot[name='checked-indicator'],\n    :host(.indeterminate) slot[name='indeterminate-indicator'] {\n      opacity: 1;\n    }\n\n    :host(.disabled) {\n      opacity: ${disabledOpacity};\n    }\n  `.withBehaviors(forcedColorsStylesheetBehavior(css `\n        .control {\n          border-color: ${SystemColors.FieldText};\n          background: ${SystemColors.Field};\n        }\n        :host(:not(.disabled):hover) .control,\n        :host(:not(.disabled):active) .control {\n          border-color: ${SystemColors.Highlight};\n          background: ${SystemColors.Field};\n        }\n        slot[name='checked-indicator'],\n        slot[name='indeterminate-indicator'] {\n          fill: ${SystemColors.FieldText};\n        }\n        :host(:${focusVisible}) .control {\n          forced-color-adjust: none;\n          outline-color: ${SystemColors.FieldText};\n          background: ${SystemColors.Field};\n          border-color: ${SystemColors.Highlight};\n        }\n        :host(.checked) .control {\n          background: ${SystemColors.Highlight};\n          border-color: ${SystemColors.Highlight};\n        }\n        :host(.checked:not(.disabled):hover) .control,\n        :host(.checked:not(.disabled):active) .control {\n          background: ${SystemColors.HighlightText};\n          border-color: ${SystemColors.Highlight};\n        }\n        :host(.checked) slot[name='checked-indicator'],\n        :host(.checked) slot[name='indeterminate-indicator'] {\n          fill: ${SystemColors.HighlightText};\n        }\n        :host(.checked:hover ) .control slot[name='checked-indicator'],\n        :host(.checked:hover ) .control slot[name='indeterminate-indicator'] {\n          fill: ${SystemColors.Highlight};\n        }\n        :host(.disabled) {\n          opacity: 1;\n        }\n        :host(.disabled) .control {\n          border-color: ${SystemColors.GrayText};\n          background: ${SystemColors.Field};\n        }\n        :host(.disabled) slot[name='checked-indicator'],\n        :host(.checked.disabled:hover) .control slot[name='checked-indicator'],\n        :host(.disabled) slot[name='indeterminate-indicator'],\n        :host(.checked.disabled:hover) .control slot[name='indeterminate-indicator'] {\n          fill: ${SystemColors.GrayText};\n        }\n      `));\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\nimport {\n  insertPart,\n  getCommittedValue,\n  removePart,\n  setCommittedValue,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map<unknown, number>();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\nclass RepeatDirective extends Directive {\n  private _itemKeys?: unknown[];\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('repeat() can only be used in text expressions');\n    }\n  }\n\n  private _getValuesAndKeys<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    let keyFn: KeyFn<T> | undefined;\n    if (template === undefined) {\n      template = keyFnOrTemplate;\n    } else if (keyFnOrTemplate !== undefined) {\n      keyFn = keyFnOrTemplate as KeyFn<T>;\n    }\n    const keys = [];\n    const values = [];\n    let index = 0;\n    for (const item of items) {\n      keys[index] = keyFn ? keyFn(item, index) : index;\n      values[index] = template!(item, index);\n      index++;\n    }\n    return {\n      values,\n      keys,\n    };\n  }\n\n  render<T>(items: Iterable<T>, template: ItemTemplate<T>): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;\n  }\n\n  override update<T>(\n    containerPart: ChildPart,\n    [items, keyFnOrTemplate, template]: [\n      Iterable<T>,\n      KeyFn<T> | ItemTemplate<T>,\n      ItemTemplate<T>\n    ]\n  ) {\n    // Old part & key lists are retrieved from the last update (which may\n    // be primed by hydration)\n    const oldParts = getCommittedValue(\n      containerPart\n    ) as Array<ChildPart | null>;\n    const {values: newValues, keys: newKeys} = this._getValuesAndKeys(\n      items,\n      keyFnOrTemplate,\n      template\n    );\n\n    // We check that oldParts, the committed value, is an Array as an\n    // indicator that the previous value came from a repeat() call. If\n    // oldParts is not an Array then this is the first render and we return\n    // an array for lit-html's array handling to render, and remember the\n    // keys.\n    if (!Array.isArray(oldParts)) {\n      this._itemKeys = newKeys;\n      return newValues;\n    }\n\n    // In SSR hydration it's possible for oldParts to be an array but for us\n    // to not have item keys because the update() hasn't run yet. We set the\n    // keys to an empty array. This will cause all oldKey/newKey comparisons\n    // to fail and execution to fall to the last nested brach below which\n    // reuses the oldPart.\n    const oldKeys = (this._itemKeys ??= []);\n\n    // New part list will be built up as we go (either reused from\n    // old parts or created for new keys in this update). This is\n    // saved in the above cache at the end of the update.\n    const newParts: ChildPart[] = [];\n\n    // Maps from key to index for current and previous update; these\n    // are generated lazily only when needed as a performance\n    // optimization, since they are only required for multiple\n    // non-contiguous changes in the list, which are less common.\n    let newKeyToIndexMap!: Map<unknown, number>;\n    let oldKeyToIndexMap!: Map<unknown, number>;\n\n    // Head and tail pointers to old parts and new values\n    let oldHead = 0;\n    let oldTail = oldParts.length - 1;\n    let newHead = 0;\n    let newTail = newValues.length - 1;\n\n    // Overview of O(n) reconciliation algorithm (general approach\n    // based on ideas found in ivi, vue, snabbdom, etc.):\n    //\n    // * We start with the list of old parts and new values (and\n    //   arrays of their respective keys), head/tail pointers into\n    //   each, and we build up the new list of parts by updating\n    //   (and when needed, moving) old parts or creating new ones.\n    //   The initial scenario might look like this (for brevity of\n    //   the diagrams, the numbers in the array reflect keys\n    //   associated with the old parts or new values, although keys\n    //   and parts/values are actually stored in parallel arrays\n    //   indexed using the same head/tail pointers):\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n    //                                      item order\n    //      newHead ^                 ^ newTail\n    //\n    // * Iterate old & new lists from both sides, updating,\n    //   swapping, or removing parts at the head/tail locations\n    //   until neither head nor tail can move.\n    //\n    // * Example below: keys at head pointers match, so update old\n    //   part 0 in-place (no need to move it) and record part 0 in\n    //   the `newParts` list. The last thing we do is advance the\n    //   `oldHead` and `newHead` pointers (will be reflected in the\n    //   next diagram).\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //      newHead ^                 ^ newTail\n    //\n    // * Example below: head pointers don't match, but tail\n    //   pointers do, so update part 6 in place (no need to move\n    //   it), and record part 6 in the `newParts` list. Last,\n    //   advance the `oldTail` and `oldHead` pointers.\n    //\n    //         oldHead v              v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n    //                                      & newTail\n    //         newHead ^              ^ newTail\n    //\n    // * If neither head nor tail match; next check if one of the\n    //   old head/tail items was removed. We first need to generate\n    //   the reverse map of new keys to index (`newKeyToIndexMap`),\n    //   which is done once lazily as a performance optimization,\n    //   since we only hit this case if multiple non-contiguous\n    //   changes were made. Note that for contiguous removal\n    //   anywhere in the list, the head and tails would advance\n    //   from either end and pass each other before we get to this\n    //   case and removals would be handled in the final while loop\n    //   without needing to generate the map.\n    //\n    // * Example below: The key at `oldTail` was removed (no longer\n    //   in the `newKeyToIndexMap`), so remove that part from the\n    //   DOM and advance just the `oldTail` pointer.\n    //\n    //         oldHead v           v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n    //         newHead ^           ^ newTail\n    //\n    // * Once head and tail cannot move, any mismatches are due to\n    //   either new or moved items; if a new key is in the previous\n    //   \"old key to old index\" map, move the old part to the new\n    //   location, otherwise create and insert a new part. Note\n    //   that when moving an old part we null its position in the\n    //   oldParts array if it lies between the head and tail so we\n    //   know to skip it when the pointers get there.\n    //\n    // * Example below: neither head nor tail match, and neither\n    //   were removed; so find the `newHead` key in the\n    //   `oldKeyToIndexMap`, and move that old part's DOM into the\n    //   next head position (before `oldParts[oldHead]`). Last,\n    //   null the part in the `oldPart` array since it was\n    //   somewhere in the remaining oldParts still to be scanned\n    //   (between the head and tail pointers) so that we know to\n    //   skip that old part on future iterations.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n    //                                      newHead\n    //         newHead ^           ^ newTail\n    //\n    // * Note that for moves/insertions like the one above, a part\n    //   inserted at the head pointer is inserted before the\n    //   current `oldParts[oldHead]`, and a part inserted at the\n    //   tail pointer is inserted before `newParts[newTail+1]`. The\n    //   seeming asymmetry lies in the fact that new parts are\n    //   moved into place outside in, so to the right of the head\n    //   pointer are old parts, and to the right of the tail\n    //   pointer are new parts.\n    //\n    // * We always restart back from the top of the algorithm,\n    //   allowing matching and simple updates in place to\n    //   continue...\n    //\n    // * Example below: the head pointers once again match, so\n    //   simply update part 1 and record it in the `newParts`\n    //   array.  Last, advance both head pointers.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //            newHead ^        ^ newTail\n    //\n    // * As mentioned above, items that were moved as a result of\n    //   being stuck (the final else clause in the code below) are\n    //   marked with null, so we always advance old pointers over\n    //   these so we're comparing the next actual old value on\n    //   either end.\n    //\n    // * Example below: `oldHead` is null (already placed in\n    //   newParts), so advance `oldHead`.\n    //\n    //            oldHead v     v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n    //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //               newHead ^     ^ newTail\n    //\n    // * Note it's not critical to mark old parts as null when they\n    //   are moved from head to tail or tail to head, since they\n    //   will be outside the pointer range and never visited again.\n    //\n    // * Example below: Here the old tail key matches the new head\n    //   key, so the part at the `oldTail` position and move its\n    //   DOM to the new head position (before `oldParts[oldHead]`).\n    //   Last, advance `oldTail` and `newHead` pointers.\n    //\n    //               oldHead v  v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n    //                                     advance oldTail & newHead\n    //               newHead ^     ^ newTail\n    //\n    // * Example below: Old and new head keys match, so update the\n    //   old head part in place, and advance the `oldHead` and\n    //   `newHead` pointers.\n    //\n    //               oldHead v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n    //                                      newHead\n    //                  newHead ^  ^ newTail\n    //\n    // * Once the new or old pointers move past each other then all\n    //   we have left is additions (if old list exhausted) or\n    //   removals (if new list exhausted). Those are handled in the\n    //   final while loops at the end.\n    //\n    // * Example below: `oldHead` exceeded `oldTail`, so we're done\n    //   with the main loop.  Create the remaining part and insert\n    //   it at the new head position, and the update is complete.\n    //\n    //                   (oldHead > oldTail)\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //                     newHead ^ newTail\n    //\n    // * Note that the order of the if/else clauses is not\n    //   important to the algorithm, as long as the null checks\n    //   come first (to ensure we're always working on valid old\n    //   parts) and that the final else clause comes last (since\n    //   that's where the expensive moves occur). The order of\n    //   remaining clauses is is just a simple guess at which cases\n    //   will be most common.\n    //\n    // * Note, we could calculate the longest\n    //   increasing subsequence (LIS) of old items in new position,\n    //   and only move those not in the LIS set. However that costs\n    //   O(nlogn) time and adds a bit more code, and only helps\n    //   make rare types of mutations require fewer moves. The\n    //   above handles removes, adds, reversal, swaps, and single\n    //   moves of contiguous items in linear time, in the minimum\n    //   number of moves. As the number of multiple moves where LIS\n    //   might help approaches a random shuffle, the LIS\n    //   optimization becomes less helpful, so it seems not worth\n    //   the code at this point. Could reconsider if a compelling\n    //   case arises.\n\n    while (oldHead <= oldTail && newHead <= newTail) {\n      if (oldParts[oldHead] === null) {\n        // `null` means old part at head has already been used\n        // below; skip\n        oldHead++;\n      } else if (oldParts[oldTail] === null) {\n        // `null` means old part at tail has already been used\n        // below; skip\n        oldTail--;\n      } else if (oldKeys[oldHead] === newKeys[newHead]) {\n        // Old head matches new head; update in place\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newHead]\n        );\n        oldHead++;\n        newHead++;\n      } else if (oldKeys[oldTail] === newKeys[newTail]) {\n        // Old tail matches new tail; update in place\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newTail]\n        );\n        oldTail--;\n        newTail--;\n      } else if (oldKeys[oldHead] === newKeys[newTail]) {\n        // Old head matches new tail; update and move to new tail\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newTail]\n        );\n        insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]!);\n        oldHead++;\n        newTail--;\n      } else if (oldKeys[oldTail] === newKeys[newHead]) {\n        // Old tail matches new head; update and move to new head\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newHead]\n        );\n        insertPart(containerPart, oldParts[oldHead]!, oldParts[oldTail]!);\n        oldTail--;\n        newHead++;\n      } else {\n        if (newKeyToIndexMap === undefined) {\n          // Lazily generate key-to-index maps, used for removals &\n          // moves below\n          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n        }\n        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n          // Old head is no longer in new list; remove\n          removePart(oldParts[oldHead]!);\n          oldHead++;\n        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n          // Old tail is no longer in new list; remove\n          removePart(oldParts[oldTail]!);\n          oldTail--;\n        } else {\n          // Any mismatches at this point are due to additions or\n          // moves; see if we have an old part we can reuse and move\n          // into place\n          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n          const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n          if (oldPart === null) {\n            // No old part for this value; create a new one and\n            // insert it\n            const newPart = insertPart(containerPart, oldParts[oldHead]!);\n            setChildPartValue(newPart, newValues[newHead]);\n            newParts[newHead] = newPart;\n          } else {\n            // Reuse old part\n            newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);\n            insertPart(containerPart, oldParts[oldHead]!, oldPart);\n            // This marks the old part as having been used, so that\n            // it will be skipped in the first two checks above\n            oldParts[oldIndex as number] = null;\n          }\n          newHead++;\n        }\n      }\n    }\n    // Add parts for any remaining new values\n    while (newHead <= newTail) {\n      // For all remaining additions, we insert before last new\n      // tail, since old pointers are no longer valid\n      const newPart = insertPart(containerPart, newParts[newTail + 1]);\n      setChildPartValue(newPart, newValues[newHead]);\n      newParts[newHead++] = newPart;\n    }\n    // Remove any remaining unused old parts\n    while (oldHead <= oldTail) {\n      const oldPart = oldParts[oldHead++];\n      if (oldPart !== null) {\n        removePart(oldPart);\n      }\n    }\n\n    // Save order of new parts for next round\n    this._itemKeys = newKeys;\n    // Directly set part value, bypassing it's dirty-checking\n    setCommittedValue(containerPart, newParts);\n    return noChange;\n  }\n}\n\nexport interface RepeatDirectiveFn {\n  <T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ): unknown;\n  <T>(items: Iterable<T>, template: ItemTemplate<T>): unknown;\n  <T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): unknown;\n}\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * The `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n *\n * ```js\n * html`\n *   <ol>\n *     ${repeat(this.items, (item) => item.id, (item, index) => {\n *       return html`<li>${index}: ${item.name}</li>`;\n *     })}\n *   </ol>\n * `\n * ```\n *\n * **Important**: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive(RepeatDirective) as RepeatDirectiveFn;\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RepeatDirective};\n"],"names":["_Checkbox","_FoundationElement","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","FoundationElement","FormAssociatedCheckbox","_CheckableFormAssocia","_super2","_this","proxy","document","createElement","CheckableFormAssociated","Checkbox","_FormAssociatedCheckb","call","initialValue","indeterminate","keypressHandler","e","readOnly","key","keySpace","checked","clickHandler","disabled","setAttribute","value","this","HTMLInputElement","__decorate","attr","attribute","mode","prototype","observable","fluentCheckbox","compose","baseName","template","context","definition","html","_templateObject","_taggedTemplateLiteral","x","required","c","event","checkedIndicator","indeterminateIndicator","defaultSlottedNodes","length","slotted","styles","css","display","heightNumber","designUnit","controlCornerRadius","strokeWidth","neutralStrokeStrongRest","neutralFillInputAltRest","typeRampBase","neutralForegroundRest","foregroundOnAccentRest","neutralFillInputAltHover","neutralStrokeStrongHover","neutralFillInputAltActive","neutralStrokeStrongActive","focusVisible","neutralFillInputAltFocus","focusTreatmentTight","accentFillRest","accentFillHover","accentFillActive","disabledCursor","disabledOpacity","withBehaviors","forcedColorsStylesheetBehavior","_templateObject2","SystemColors","FieldText","Field","Highlight","HighlightText","GrayText","t","o","D","s","createComment","r","i","n","_$AA","parentNode","l","_$AB","insertBefore","options","_n$_$AQ","_n","nextSibling","_$AM","_$AQ","_$AP","_$AU","v","undefined","_$AI","u","h","_o$_$AP","remove","Map","set","_t","_class","type","CHILD","Error","_possibleConstructorReturn","_step","_iterator","_createForOfIteratorHelper","done","err","f","values","keys","ht","_ref","_this$dt","_ref2","_slicedToArray","d","_$AH","_this$ht","p","a","Array","isArray","dt","m","y","j","k","w","has","get"],"sourceRoot":""}