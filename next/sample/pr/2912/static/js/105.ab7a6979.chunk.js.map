{"version":3,"file":"static/js/105.ab7a6979.chunk.js","mappings":"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","sources":["components/PageHeader.tsx","../../../packages/mgt-components/dist/es6/components/mgt-get/src/components/mgt-get/mgt-get.ts"],"sourcesContent":["import * as React from 'react';\nimport { Divider, makeStyles } from '@fluentui/react-components';\n\nexport interface IPageHeaderProps {\n  title: string;\n  description: string;\n}\n\nconst useStyles = makeStyles({\n  divider: {\n    alignItems: 'self-start',\n    paddingTop: '20px',\n    marginBottom: '20px'\n  }\n});\n\nexport const PageHeader: React.FunctionComponent<IPageHeaderProps> = props => {\n  const styles = useStyles();\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <div>{props.description}</div>\n      <Divider className={styles.divider} />\n    </div>\n  );\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport {\n  CacheService,\n  CacheStore,\n  equals,\n  MgtTemplatedTaskComponent,\n  prepScopes,\n  Providers,\n  ProviderState,\n  CollectionResponse,\n  IGraph\n} from '@microsoft/mgt-element';\n\nimport { getPhotoForResource } from '../../graph/graph.photos';\nimport { getDocumentThumbnail } from '../../graph/graph.files';\nimport { schemas } from '../../graph/cacheStores';\nimport { CacheResponse } from '../CacheResponse';\nimport { Entity } from '@microsoft/microsoft-graph-types';\nimport { GraphRequest } from '@microsoft/microsoft-graph-client';\nimport { registerComponent } from '@microsoft/mgt-element';\n\n/**\n * Simple holder type for an image\n */\ninterface ImageValue {\n  image: string;\n}\n\n/**\n * A type guard to check if a value is a collection response\n *\n * @param value {*} the value to check\n * @returns {boolean} true if the value is a collection response\n */\nexport const isCollectionResponse = (value: unknown): value is CollectionResponse<unknown> =>\n  Array.isArray((value as CollectionResponse<unknown>)?.value);\n\n/**\n * Enumeration to define what types of query are available\n *\n * @export\n * @enum {string}\n */\nexport enum ResponseType {\n  /**\n   * Fetches a call as JSON\n   */\n  json = 'json',\n\n  /**\n   * Fetches a call as image\n   */\n  image = 'image'\n}\n\n/**\n * Defines the expiration time\n */\nconst getResponseInvalidationTime = (currentInvalidationPeriod: number): number =>\n  currentInvalidationPeriod ||\n  CacheService.config.response.invalidationPeriod ||\n  CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether the response store is enabled\n */\nconst getIsResponseCacheEnabled = (): boolean =>\n  CacheService.config.response.isEnabled && CacheService.config.isEnabled;\n\n/**\n * Holder type emitted with the dataChange event\n */\nexport interface DataChangedDetail {\n  response?: CollectionResponse<Entity>;\n  error?: object;\n}\n\nexport const registerMgtGetComponent = () => registerComponent('get', MgtGet);\n\n/**\n * Custom element for making Microsoft Graph get queries\n *\n * @fires {CustomEvent<DataChangedDetail>} dataChange - Fired when data changes\n *\n * @export\n * @class mgt-get\n * @extends {MgtTemplatedComponent}\n */\nexport class MgtGet extends MgtTemplatedTaskComponent {\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtGet\n   */\n  @property({\n    attribute: 'resource',\n    reflect: true,\n    type: String\n  })\n  public resource: string;\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtGet\n   */\n  @property({\n    attribute: 'scopes',\n    converter: (value, _type) => {\n      return value ? value.toLowerCase().split(',') : null;\n    },\n    reflect: true\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtGet\n   */\n  @property({\n    attribute: 'version',\n    reflect: true,\n    type: String\n  })\n  public version = 'v1.0';\n\n  /**\n   * Type of response\n   * Default = json\n   * Supported values = json, image\n   *\n   * @type {ResponseType}\n   * @memberof MgtGet\n   */\n  @property({\n    attribute: 'type',\n    reflect: true,\n    type: ResponseType\n  })\n  public type: ResponseType = ResponseType.json;\n\n  /**\n   * Maximum number of pages to get for the resource\n   * default = 3\n   * if <= 0, all pages will be fetched\n   *\n   * @type {number}\n   * @memberof MgtGet\n   */\n  @property({\n    attribute: 'max-pages',\n    reflect: true,\n    type: Number\n  })\n  public maxPages = 3;\n\n  /**\n   * Number of milliseconds to poll the delta API and\n   * update the response. Set to positive value to enable\n   *\n   * @type {number}\n   * @memberof MgtGet\n   */\n  @property({\n    attribute: 'polling-rate',\n    reflect: true,\n    type: Number\n  })\n  public pollingRate = 0;\n\n  /**\n   * Enables cache on the response from the specified resource\n   * default = false\n   *\n   * @type {boolean}\n   * @memberof MgtGet\n   */\n  @property({\n    attribute: 'cache-enabled',\n    reflect: true,\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds\n   *\n   * @type {number}\n   * @memberof MgtGet\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    type: Number\n  })\n  public cacheInvalidationPeriod = 0;\n\n  /**\n   * Gets or sets the response of the request\n   *\n   * @type any\n   * @memberof MgtGet\n   */\n  @property({ attribute: false }) public response: CollectionResponse<Entity> | Entity | ImageValue;\n\n  /**\n   *\n   * Gets or sets the error (if any) of the request\n   *\n   * @type any\n   * @memberof MgtGet\n   */\n  @property({ attribute: false }) public error: object;\n\n  private isPolling = false;\n  private isRefreshing = false;\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtGet\n   */\n  public refresh(hardRefresh = false) {\n    this.isRefreshing = true;\n    if (hardRefresh) {\n      this.clearState();\n    }\n    void this._task.run();\n  }\n\n  /**\n   * Clears state of the component\n   *\n   * @protected\n   * @memberof MgtGet\n   */\n  protected clearState(): void {\n    this.response = null;\n  }\n\n  protected args(): unknown[] {\n    return [\n      this.providerState,\n      this.resource,\n      this.scopes,\n      this.version,\n      this.pollingRate,\n      this.type,\n      this.maxPages,\n      this.cacheEnabled,\n      this.cacheInvalidationPeriod\n    ];\n  }\n\n  protected renderLoading = () => {\n    const loading = this.renderTemplate('loading', null);\n    return isCollectionResponse(this.response)\n      ? this.renderValueContentWithDefaultTemplate(\n          html`${this.response.value.map(v => this.renderTemplate('value', v, v.id))} ${loading} `\n        )\n      : loading;\n  };\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected renderContent = () => {\n    if (this.hasTemplate('value') && isCollectionResponse(this.response)) {\n      const valueContent: TemplateResult = isCollectionResponse(this.response)\n        ? html`\n          ${this.response.value.map(v => this.renderTemplate('value', v, v.id))}\n        `\n        : this.renderTemplate('value', this.response);\n\n      return this.renderValueContentWithDefaultTemplate(valueContent);\n    } else if (this.response) {\n      return this.renderTemplate('default', this.response) || html``;\n    } else if (this.hasTemplate('no-data')) {\n      return this.renderTemplate('no-data', null);\n    } else {\n      return html``;\n    }\n  };\n\n  private renderValueContentWithDefaultTemplate(valueContent: TemplateResult) {\n    if (this.hasTemplate('default')) {\n      const defaultContent = this.renderTemplate('default', this.response);\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/dot-notation\n      if (this.templates['value'].templateOrder > this.templates['default'].templateOrder) {\n        return html`\n          ${defaultContent}${valueContent}\n        `;\n      } else {\n        return html`\n          ${valueContent}${defaultContent}\n        `;\n      }\n    } else {\n      return valueContent;\n    }\n  }\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtGet\n   */\n  protected async loadState() {\n    const provider = Providers.globalProvider;\n\n    this.error = null;\n\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return;\n    }\n\n    if (this.resource) {\n      try {\n        let cache: CacheStore<CacheResponse>;\n        const key = `${this.version}${this.resource}`;\n        let response: Entity | CollectionResponse<Entity> | ImageValue = null;\n\n        if (this.shouldRetrieveCache()) {\n          cache = CacheService.getCache<CacheResponse>(schemas.get, schemas.get.stores.responses);\n          const result: CacheResponse = getIsResponseCacheEnabled() ? await cache.getValue(key) : null;\n          if (result && getResponseInvalidationTime(this.cacheInvalidationPeriod) > Date.now() - result.timeCached) {\n            response = JSON.parse(result.response) as CollectionResponse<Entity>;\n          }\n        }\n\n        if (!response) {\n          let uri = this.resource;\n          let isDeltaLink = false;\n\n          // if we had a response earlier with a delta link, use it instead\n          if (this.response?.['@odata.deltaLink']) {\n            uri = this.response['@odata.deltaLink'] as string;\n            isDeltaLink = true;\n          } else {\n            // TODO: Check this against the base url for the cloud in use.\n            isDeltaLink = new URL(uri, 'https://graph.microsoft.com').pathname.endsWith('delta');\n          }\n\n          const graph: IGraph = provider.graph.forComponent(this);\n          let request: GraphRequest = graph.api(uri).version(this.version);\n\n          if (this.scopes?.length) {\n            request = request.middlewareOptions(prepScopes(...this.scopes));\n          }\n\n          if (this.type === ResponseType.json) {\n            response = (await request.get()) as CollectionResponse<Entity> | Entity;\n\n            if (isDeltaLink && isCollectionResponse(this.response) && isCollectionResponse(response)) {\n              const responseValues: Entity[] = response.value;\n              response.value = this.response.value.concat(responseValues);\n            }\n\n            if (!this.isPolling && !equals(this.response, response)) {\n              this.response = response;\n            }\n\n            // get more pages if there are available\n            if (isCollectionResponse(response) && response['@odata.nextLink']) {\n              let pageCount = 1;\n              let page = response;\n\n              while (\n                (pageCount < this.maxPages || this.maxPages <= 0 || (isDeltaLink && this.pollingRate)) &&\n                page?.['@odata.nextLink']\n              ) {\n                pageCount++;\n                const nextResource = (page['@odata.nextLink'] as string).split(this.version)[1];\n                page = (await graph.client.api(nextResource).version(this.version).get()) as CollectionResponse<Entity>;\n                if (page?.value?.length) {\n                  page.value = response.value.concat(page.value);\n                  response = page;\n                  if (!this.isPolling) {\n                    this.response = response;\n                  }\n                }\n              }\n            }\n          } else {\n            if (this.resource.indexOf('/photo/$value') === -1 && this.resource.indexOf('/thumbnails/') === -1) {\n              throw new Error('Only /photo/$value and /thumbnails/ endpoints support the image type');\n            }\n\n            let image: string;\n            if (this.resource.indexOf('/photo/$value') > -1) {\n              // Sanitizing the resource to ensure getPhotoForResource gets the right format\n              const sanitizedResource = this.resource.replace('/photo/$value', '');\n              const photoResponse = await getPhotoForResource(graph, sanitizedResource, this.scopes);\n              if (photoResponse) {\n                image = photoResponse.photo;\n              }\n            } else if (this.resource.indexOf('/thumbnails/') > -1) {\n              const imageResponse = await getDocumentThumbnail(graph, this.resource, this.scopes);\n              if (imageResponse) {\n                image = imageResponse.thumbnail;\n              }\n            }\n\n            if (image) {\n              response = {\n                image\n              };\n            }\n          }\n\n          if (this.shouldUpdateCache() && response) {\n            cache = CacheService.getCache<CacheResponse>(schemas.get, schemas.get.stores.responses);\n            await cache.putValue(key, { response: JSON.stringify(response) });\n          }\n        }\n\n        if (!equals(this.response, response)) {\n          this.response = response;\n        }\n      } catch (e: unknown) {\n        this.error = e as object;\n      }\n\n      if (this.response) {\n        this.error = null;\n\n        if (this.pollingRate) {\n          setTimeout(() => {\n            this.isPolling = true;\n            void this.loadState().finally(() => {\n              this.isPolling = false;\n            });\n          }, this.pollingRate);\n        }\n      }\n    } else {\n      this.response = null;\n    }\n    this.isRefreshing = false;\n    this.fireCustomEvent('dataChange', { response: this.response, error: this.error });\n  }\n\n  private shouldRetrieveCache(): boolean {\n    return getIsResponseCacheEnabled() && this.cacheEnabled && !(this.isRefreshing || this.isPolling);\n  }\n\n  private shouldUpdateCache(): boolean {\n    return getIsResponseCacheEnabled() && this.cacheEnabled;\n  }\n}\n"],"names":["useStyles","makeStyles","divider","alignItems","paddingTop","marginBottom","PageHeader","props","styles","_jsxs","children","_jsx","title","description","Divider","className","ResponseType","isCollectionResponse","value","Array","isArray","getIsResponseCacheEnabled","CacheService","config","response","isEnabled","registerMgtGetComponent","registerComponent","MgtGet","_MgtTemplatedTaskComp","_inherits","_super","_createSuper","_this","_classCallCheck","scopes","version","type","json","maxPages","pollingRate","cacheEnabled","cacheInvalidationPeriod","isPolling","isRefreshing","renderLoading","loading","renderTemplate","renderValueContentWithDefaultTemplate","html","_templateObject","_taggedTemplateLiteral","map","v","id","renderContent","hasTemplate","valueContent","_templateObject2","_templateObject3","_templateObject4","_createClass","key","hardRefresh","arguments","length","undefined","this","clearState","_task","run","providerState","resource","defaultContent","templates","templateOrder","_templateObject5","_templateObject6","provider","Providers","globalProvider","error","state","ProviderState","SignedIn","_context","next","abrupt","prev","concat","shouldRetrieveCache","cache","getCache","schemas","get","stores","responses","getValue","t0","sent","result","invalidationPeriod","defaultInvalidationPeriod","Date","now","timeCached","JSON","parse","uri","isDeltaLink","_a","URL","pathname","endsWith","graph","forComponent","request","api","_b","middlewareOptions","prepScopes","apply","_toConsumableArray","responseValues","equals","pageCount","page","nextResource","split","client","_c","indexOf","Error","sanitizedResource","replace","getPhotoForResource","photoResponse","image","photo","getDocumentThumbnail","imageResponse","thumbnail","shouldUpdateCache","putValue","stringify","t1","setTimeout","_this2","loadState","finally","fireCustomEvent","stop","_callee","MgtTemplatedTaskComponent","__decorate","property","attribute","reflect","String","converter","_type","toLowerCase","Number","Boolean"],"sourceRoot":""}