{"version":3,"file":"static/js/885.949c1f70.chunk.js","mappings":"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","sources":["components/PageHeader.tsx","../../../packages/mgt-components/dist/es6/components/mgt-search-results/src/components/mgt-search-results/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-search-results/src/components/mgt-search-results/mgt-search-results-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-search-results/src/components/mgt-search-results/mgt-search-results.ts","../../../packages/mgt-react/src/generated/search-results.ts","pages/Search/AllResults.tsx","pages/Search/PeopleResults.tsx","pages/Search/ExternalItemsResults.tsx","pages/Search/FilesResults.tsx","pages/SearchPage.tsx","../../../packages/mgt-element/dist/es6/src/BetaGraph.ts","../../../packages/mgt-react/src/generated/file.ts"],"sourcesContent":["import * as React from 'react';\nimport { Divider, makeStyles } from '@fluentui/react-components';\n\nexport interface IPageHeaderProps {\n  title: string;\n  description: string;\n}\n\nconst useStyles = makeStyles({\n  divider: {\n    alignItems: 'self-start',\n    paddingTop: '20px',\n    marginBottom: '20px'\n  }\n});\n\nexport const PageHeader: React.FunctionComponent<IPageHeaderProps> = props => {\n  const styles = useStyles();\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <div>{props.description}</div>\n      <Divider className={styles.divider} />\n    </div>\n  );\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  modified: 'modified on',\n  back: 'Back',\n  next: 'Next',\n  pages: 'pages',\n  page: 'Page'\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}.search-results{scroll-margin:100px}.search-result-grid{font-size:14px;margin:16px 4px;display:grid;grid-template-columns:32px 2fr 0fr;gap:.5rem}.search-result{font-size:14px;margin:16px 4px}.file-icon{--file-type-icon-height:32px}.search-result-info{margin:4px 0;display:inline-flex}.search-result-date{padding-top:3px}.search-result-date__shimmer{border-radius:4px;margin-top:2%;margin-left:5px;height:10px;width:200px}.search-result-summary{margin:4px 0;color:var(--body-subtle-text-color)}.search-result-thumbnail__shimmer{width:126px;height:72px}.search-result-thumbnail img{height:72px;max-width:126px;width:126px;object-fit:cover}.search-result-url{font-size:14px;font-weight:600;margin:4px 0}.search-result-url a{color:var(--color);text-decoration:none}.search-result-url a:hover{text-decoration:underline}.search-result-content__shimmer{border-radius:4px;margin-top:10px;height:10px}.search-result-name{font-size:16px;font-weight:600;margin:4px 0}.search-result-name__shimmer{border-radius:4px;margin-top:10px;height:10px;width:20%}.search-result-name a{color:var(--color);text-decoration:none}.search-result-name a:hover{text-decoration:underline}.search-result-author__shimmer{width:24px;height:24px}.search-result-icon{width:30px;height:30px}.search-result-icon__shimmer{width:32px;height:32px}.search-result-icon img{width:100%}.search-result-icon svg,.search-result-icon svg>path{width:100%;height:100%;fill:var(--neutral-foreground-rest);fill-rule:nonzero!important;clip-rule:nonzero!important}.search-results-page-active{border-bottom-style:solid;border-bottom-color:var(--accent-base-color)}.search-results-page svg,.search-results-page svg>path{height:12px;fill:var(--neutral-foreground-rest);fill-rule:nonzero!important;clip-rule:nonzero!important}.search-result-answer{box-shadow:var(--answer-box-shadow,0 3.2px 7.2px rgba(0,0,0,.132),0 .6px 1.8px rgba(0,0,0,.108));border-radius:var(--answer-border-radius,4px);border:var(--answer-border,none);padding:var(--answer-padding,10px)}.search-results-pages{margin:16px 4px}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, HTMLTemplateResult, nothing, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport {\n  CacheService,\n  CacheStore,\n  equals,\n  prepScopes,\n  Providers,\n  ProviderState,\n  mgtHtml,\n  BetaGraph,\n  BatchResponse,\n  CollectionResponse,\n  MgtTemplatedTaskComponent\n} from '@microsoft/mgt-element';\n\nimport { schemas } from '../../graph/cacheStores';\nimport { strings } from './strings';\nimport { styles } from './mgt-search-results-css';\nimport {\n  DirectoryObject,\n  Drive,\n  DriveItem,\n  EntityType,\n  List,\n  ListItem,\n  Message,\n  SearchHit,\n  SearchHitsContainer,\n  SearchRequest,\n  SearchResponse,\n  Site\n} from '@microsoft/microsoft-graph-types';\nimport { SearchRequest as BetaSearchRequest } from '@microsoft/microsoft-graph-types-beta';\nimport {\n  getIsResponseCacheEnabled,\n  getNameFromUrl,\n  getRelativeDisplayDate,\n  getResponseInvalidationTime,\n  sanitizeSummary,\n  trimFileExtension\n} from '../../utils/Utils';\nimport { getSvg, SvgIcon } from '../../utils/SvgHelper';\nimport { fluentSkeleton, fluentButton, fluentTooltip, fluentDivider } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { CacheResponse } from '../CacheResponse';\nimport { registerComponent } from '@microsoft/mgt-element';\nimport { registerMgtFileComponent } from '../mgt-file/mgt-file';\nimport { registerMgtPersonComponent } from '../mgt-person/mgt-person';\n\n/**\n * Object representing a thumbnail\n */\ninterface Thumbnail {\n  /**\n   * The url of the Thumbnail\n   */\n  url?: string;\n}\n\n/**\n * Object representing a Binary Thumbnail\n */\ninterface BinaryThumbnail {\n  /**\n   * The url of the Thumbnail\n   */\n  url?: string;\n\n  /**\n   * The web Url of the Thumbnail\n   */\n  thumbnailWebUrl?: string;\n}\n\n/**\n * Object representing a Search Answer\n */\ninterface Answer {\n  '@odata.type': string;\n  displayName?: string;\n  description?: string;\n  webUrl?: string;\n}\n\n/**\n * Object representing a search resource supporting thumbnails\n */\ninterface ThumbnailResource {\n  thumbnail: Thumbnail;\n}\n\ninterface UserResource {\n  lastModifiedBy?: {\n    user?: {\n      email?: string;\n    };\n  };\n  userPrincipalName?: string;\n}\n\n/**\n * Object representing a Search Resource\n */\ntype SearchResource = Partial<\n  DriveItem & Site & List & Message & ListItem & Drive & DirectoryObject & Answer & ThumbnailResource & UserResource\n>;\n\n/**\n * Object representing a full Search Response\n */\ntype SearchResponseCollection = CollectionResponse<SearchResponse>;\n\nexport const registerMgtSearchResultsComponent = () => {\n  registerFluentComponents(fluentSkeleton, fluentButton, fluentTooltip, fluentDivider);\n\n  registerMgtFileComponent();\n  registerMgtPersonComponent();\n  registerComponent('search-results', MgtSearchResults);\n};\n\n/**\n * **Preview component** Custom element for making Microsoft Graph get queries.\n * Component may change before general availability release.\n *\n * @fires {CustomEvent<DataChangedDetail>} dataChange - Fired when data changes\n *\n * @cssprop --answer-border-radius - {Length} Border radius of an answer\n * @cssprop --answer-box-shadow - {Length} Box shadow of an answer\n * @cssprop --answer-border - {Length} Border of an answer\n * @cssprop --answer-padding - {Length} Padding of an answer\n *\n * @class mgt-search-results\n * @extends {MgtTemplatedTaskComponent}\n */\nexport class MgtSearchResults extends MgtTemplatedTaskComponent {\n  /**\n   * Default page size is 10\n   */\n  private _size = 10;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * user the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  /**\n   * Gets all the localization strings for the component\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  private _queryString: string;\n\n  /**\n   * The query to send to Microsoft Search\n   *\n   * @type {string}\n   * @memberof MgtSearchResults\n   */\n  public get queryString(): string {\n    return this._queryString;\n  }\n  @property({\n    attribute: 'query-string',\n    type: String\n  })\n  public set queryString(value: string) {\n    if (this._queryString !== value) {\n      this._queryString = value;\n      this.currentPage = 1;\n    }\n  }\n\n  /**\n   * Query template to use in complex search scenarios\n   * Query Templates are currently supported only on the beta endpoint\n   */\n  @property({\n    attribute: 'query-template',\n    type: String\n  })\n  public queryTemplate: string;\n\n  /**\n   * One or more types of resources expected in the response.\n   * Possible values are: list, site, listItem, message, event,\n   * drive, driveItem, externalItem.\n   *\n   * @type {string[]}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'entity-types',\n    converter: value => {\n      return value.split(',').map(v => v.trim());\n    },\n    type: String\n  })\n  public entityTypes: string[] = ['driveItem', 'listItem', 'site'];\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'scopes',\n    converter: (value, _type) => {\n      return value ? value.toLowerCase().split(',') : null;\n    }\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Content sources to use with External Items\n   *\n   * @type {string[]}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'content-sources',\n    converter: (value, _type) => {\n      return value ? value.toLowerCase().split(',') : null;\n    }\n  })\n  public contentSources: string[] = [];\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'version',\n    reflect: true,\n    type: String\n  })\n  public version = 'v1.0';\n\n  /**\n   * Specifies the offset for the search results.\n   * Offset 0 returns the very first result.\n   *\n   * @type {number}\n   * @memberof MgtSearchResults\n   */\n  public get from(): number {\n    return (this.currentPage - 1) * this.size;\n  }\n\n  /**\n   * The size of the page to be retrieved.\n   * The maximum value is 1000.\n   *\n   * @type {number}\n   * @memberof MgtSearchResults\n   */\n  public get size(): number {\n    return this._size;\n  }\n  @property({\n    attribute: 'size',\n    reflect: true,\n    type: Number\n  })\n  public set size(value) {\n    if (value > this.maxPageSize) {\n      this._size = this.maxPageSize;\n    } else {\n      this._size = value;\n    }\n  }\n\n  /**\n   * The maximum number of pages to be clickable\n   * in the paging control\n   *\n   * @type {number}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'paging-max',\n    reflect: true,\n    type: Number\n  })\n  public pagingMax = 7;\n\n  /**\n   * Sets whether the result thumbnail should be fetched\n   * from the Microsoft Graph\n   *\n   * @type {boolean}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'fetch-thumbnail',\n    type: Boolean\n  })\n  public fetchThumbnail: boolean;\n\n  /**\n   * Contains the fields to be returned for each resource\n   *\n   * @type {string[]}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'fields',\n    converter: value => {\n      return value.split(',').map(v => v.trim());\n    },\n    type: String\n  })\n  public fields: string[];\n\n  /**\n   * This triggers hybrid sort for messages : the first 3 messages are the most relevant.\n   * This property is only applicable to entityType=message\n   *\n   * @type {boolean}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'enable-top-results',\n    reflect: true,\n    type: Boolean\n  })\n  public enableTopResults = false;\n\n  /**\n   * Enables cache on the response from the specified resource\n   * default = false\n   *\n   * @type {boolean}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'cache-enabled',\n    reflect: true,\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds\n   *\n   * @type {number}\n   * @memberof MgtSearchResults\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    reflect: true,\n    type: Number\n  })\n  public cacheInvalidationPeriod = 30000;\n\n  /**\n   * Gets or sets the response of the request\n   *\n   * @type any\n   * @memberof MgtSearchResults\n   */\n  @state() private response: SearchResponseCollection;\n\n  private isRefreshing = false;\n  private get searchEndpoint() {\n    return '/search/query';\n  }\n  private get maxPageSize() {\n    return 1000;\n  }\n  private readonly defaultFields: string[] = [\n    'webUrl',\n    'lastModifiedBy',\n    'lastModifiedDateTime',\n    'summary',\n    'displayName',\n    'name'\n  ];\n\n  @property({ attribute: false })\n  public currentPage = 1;\n\n  constructor() {\n    super();\n  }\n\n  protected args(): unknown[] {\n    return [\n      this.providerState,\n      this.queryString,\n      this.queryTemplate,\n      this.entityTypes,\n      this.contentSources,\n      this.scopes,\n      this.version,\n      this.size,\n      this.fetchThumbnail,\n      this.fields,\n      this.enableTopResults,\n      this.currentPage\n    ];\n  }\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtSearchResults\n   */\n  public refresh(hardRefresh = false) {\n    this.isRefreshing = true;\n    if (hardRefresh) {\n      this.clearState();\n    }\n    void this._task.run();\n  }\n\n  /**\n   * Clears state of the component\n   *\n   * @protected\n   * @memberof MgtSearchResults\n   */\n  protected clearState(): void {\n    this.response = null;\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected renderContent = (): TemplateResult => {\n    let renderedTemplate: TemplateResult = null;\n    let headerTemplate: TemplateResult = null;\n    let footerTemplate: TemplateResult = null;\n\n    if (this.hasTemplate('header')) {\n      headerTemplate = this.renderTemplate('header', this.response);\n    }\n\n    footerTemplate = this.renderFooter(this.response?.value[0]?.hitsContainers[0]);\n\n    if (this.response && this.hasTemplate('default')) {\n      renderedTemplate = this.renderTemplate('default', this.response) || html``;\n    } else if (this.response?.value[0]?.hitsContainers[0]) {\n      renderedTemplate = html`${this.response?.value[0]?.hitsContainers[0]?.hits?.map(result =>\n        this.renderResult(result)\n      )}`;\n    } else if (this.hasTemplate('no-data')) {\n      renderedTemplate = this.renderTemplate('no-data', null);\n    } else {\n      renderedTemplate = html``;\n    }\n\n    return html`\n      ${headerTemplate}\n      <div class=\"search-results\">\n        ${renderedTemplate}\n      </div>\n      ${footerTemplate}`;\n  };\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtSearchResults\n   */\n  protected async loadState() {\n    const provider = Providers.globalProvider;\n\n    this.error = null;\n\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return;\n    }\n\n    if (this.queryString) {\n      try {\n        const requestOptions = this.getRequestOptions();\n\n        let cache: CacheStore<CacheResponse>;\n        const key = JSON.stringify({\n          endpoint: `${this.version}${this.searchEndpoint}`,\n          requestOptions\n        });\n        let response: SearchResponseCollection = null;\n\n        if (this.shouldRetrieveCache()) {\n          cache = CacheService.getCache<CacheResponse>(schemas.search, schemas.search.stores.responses);\n          const result: CacheResponse = getIsResponseCacheEnabled() ? await cache.getValue(key) : null;\n          if (result && getResponseInvalidationTime(this.cacheInvalidationPeriod) > Date.now() - result.timeCached) {\n            response = JSON.parse(result.response) as SearchResponseCollection;\n          }\n        }\n\n        if (!response) {\n          const graph = provider.graph.forComponent(this);\n          let request = graph.api(this.searchEndpoint).version(this.version);\n\n          if (this.scopes?.length) {\n            request = request.middlewareOptions(prepScopes(...this.scopes));\n          }\n\n          response = (await request.post({ requests: [requestOptions] })) as SearchResponseCollection;\n\n          if (this.fetchThumbnail) {\n            const thumbnailBatch = graph.createBatch<BinaryThumbnail>();\n            const thumbnailBatchBeta = BetaGraph.fromGraph(graph).createBatch<BinaryThumbnail>();\n\n            const hits =\n              response.value?.length && response.value[0].hitsContainers?.length\n                ? response.value[0].hitsContainers[0]?.hits ?? []\n                : [];\n            for (const element of hits) {\n              const resource = element.resource as SearchResource;\n              if (\n                (resource.size > 0 || resource.webUrl?.endsWith('.aspx')) &&\n                (resource['@odata.type'] === '#microsoft.graph.driveItem' ||\n                  resource['@odata.type'] === '#microsoft.graph.listItem')\n              ) {\n                if (resource['@odata.type'] === '#microsoft.graph.listItem') {\n                  thumbnailBatchBeta.get(\n                    element.hitId.toString(),\n                    `/sites/${resource.parentReference.siteId}/pages/${resource.id}`\n                  );\n                } else {\n                  thumbnailBatch.get(\n                    element.hitId.toString(),\n                    `/drives/${resource.parentReference.driveId}/items/${resource.id}/thumbnails/0/medium`\n                  );\n                }\n              }\n            }\n\n            /**\n             * Based on the batch response, augment the search result resource with the thumbnail url\n             *\n             * @param thumbnailResponse\n             */\n            const augmentResponse = (thumbnailResponse: Map<string, BatchResponse<BinaryThumbnail>>) => {\n              if (thumbnailResponse && thumbnailResponse.size > 0) {\n                for (const [k, value] of thumbnailResponse) {\n                  const result: SearchHit = response.value[0].hitsContainers[0].hits[k] as SearchHit;\n                  const thumbnail: Thumbnail =\n                    result.resource['@odata.type'] === '#microsoft.graph.listItem'\n                      ? { url: value.content.thumbnailWebUrl }\n                      : { url: value.content.url };\n                  (result.resource as SearchResource).thumbnail = thumbnail;\n                }\n              }\n            };\n\n            try {\n              augmentResponse(await thumbnailBatch.executeAll());\n              augmentResponse(await thumbnailBatchBeta.executeAll());\n            } catch {\n              // no-op\n            }\n          }\n\n          if (this.shouldUpdateCache() && response) {\n            cache = CacheService.getCache<CacheResponse>(schemas.search, schemas.search.stores.responses);\n            await cache.putValue(key, { response: JSON.stringify(response) });\n          }\n        }\n\n        if (!equals(this.response, response)) {\n          this.response = response;\n        }\n      } catch (e: unknown) {\n        this.error = e as Error;\n      }\n\n      if (this.response) {\n        this.error = null;\n      }\n    } else {\n      this.response = null;\n    }\n    this.isRefreshing = false;\n    this.fireCustomEvent('dataChange', { response: this.response, error: this.error as Error });\n  }\n\n  /**\n   * Render the loading state.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtSearchResults\n   */\n  protected readonly renderLoading = (): TemplateResult => {\n    return (\n      this.renderTemplate('loading', null) ||\n      // creates an array of n items where n is the current max number of results, this builds a shimmer for that many results\n      html`\n        ${[...Array<number>(this.size)].map(() => {\n          return html`\n            <div class=\"search-result\">\n              <div class=\"search-result-grid\">\n                <div class=\"search-result-icon\">\n                  <fluent-skeleton class=\"search-result-icon__shimmer\" shape=\"rect\" shimmer></fluent-skeleton>\n                </div>\n                <div class=\"searc-result-content\">\n                  <div class=\"search-result-name\">\n                    <fluent-skeleton class=\"search-result-name__shimmer\" shape=\"rect\" shimmer></fluent-skeleton>\n                  </div>\n                  <div class=\"search-result-info\">\n                    <div class=\"search-result-author\">\n                      <fluent-skeleton class=\"search-result-author__shimmer\" shape=\"circle\" shimmer></fluent-skeleton>\n                    </div>\n                    <div class=\"search-result-date\">\n                      <fluent-skeleton class=\"search-result-date__shimmer\" shape=\"rect\" shimmer></fluent-skeleton>\n                    </div>\n                  </div>\n                  <fluent-skeleton class=\"search-result-content__shimmer\" shape=\"rect\" shimmer></fluent-skeleton>\n                  <fluent-skeleton class=\"search-result-content__shimmer\" shape=\"rect\" shimmer></fluent-skeleton>\n                </div>\n                ${\n                  this.fetchThumbnail &&\n                  html`\n                    <div class=\"search-result-thumbnail\">\n                      <fluent-skeleton class=\"search-result-thumbnail__shimmer\" shape=\"rect\" shimmer></fluent-skeleton>\n                    </div>\n                  `\n                }\n              </div>\n              <fluent-divider></fluent-divider>\n            </div>\n          `;\n        })}\n       `\n    );\n  };\n\n  /**\n   * Render the result item.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtSearchResults\n   */\n  protected renderResult(result: SearchHit): TemplateResult {\n    const type = this.getResourceType(result.resource);\n    if (this.hasTemplate(`result-${type}`)) {\n      return this.renderTemplate(`result-${type}`, result, result.hitId);\n    } else {\n      switch (result.resource['@odata.type']) {\n        case '#microsoft.graph.driveItem':\n          return this.renderDriveItem(result);\n        case '#microsoft.graph.site':\n          return this.renderSite(result);\n        case '#microsoft.graph.person':\n          return this.renderPerson(result);\n        case '#microsoft.graph.drive':\n        case '#microsoft.graph.list':\n          return this.renderList(result);\n        case '#microsoft.graph.listItem':\n          return this.renderListItem(result);\n        case '#microsoft.graph.search.bookmark':\n          return this.renderBookmark(result);\n        case '#microsoft.graph.search.acronym':\n          return this.renderAcronym(result);\n        case '#microsoft.graph.search.qna':\n          return this.renderQnA(result);\n        default:\n          return this.renderDefault(result);\n      }\n    }\n  }\n\n  /**\n   * Renders the footer with pages if required\n   *\n   * @param hitsContainer Search results\n   */\n  private renderFooter(hitsContainer: SearchHitsContainer) {\n    if (this.pagingRequired(hitsContainer)) {\n      const pages = this.getActivePages(hitsContainer.total);\n\n      return html`\n        <div class=\"search-results-pages\">\n          ${this.renderPreviousPage()}\n          ${this.renderFirstPage(pages)}\n          ${this.renderAllPages(pages)}\n          ${this.renderNextPage()}\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Validates if paging is required based on the provided results\n   *\n   * @param hitsContainer\n   */\n  private pagingRequired(hitsContainer: SearchHitsContainer) {\n    return hitsContainer?.moreResultsAvailable || this.currentPage * this.size < hitsContainer?.total;\n  }\n\n  /**\n   * Gets a list of active pages to render for paging purposes\n   *\n   * @param totalResults Total number of results of the search query\n   */\n  private getActivePages(totalResults: number) {\n    const getFirstPage = () => {\n      const medianPage = this.currentPage - Math.floor(this.pagingMax / 2) - 1;\n\n      if (medianPage >= Math.floor(this.pagingMax / 2)) {\n        return medianPage;\n      } else {\n        return 0;\n      }\n    };\n\n    const pages: number[] = [];\n    const firstPage = getFirstPage();\n\n    if (firstPage + 1 > this.pagingMax - this.currentPage || this.pagingMax === this.currentPage) {\n      for (\n        let i = firstPage + 1;\n        i < Math.ceil(totalResults / this.size) &&\n        i < this.pagingMax + (this.currentPage - 1) &&\n        pages.length < this.pagingMax - 2;\n        ++i\n      ) {\n        pages.push(i + 1);\n      }\n    } else {\n      for (let i = firstPage; i < this.pagingMax; ++i) {\n        pages.push(i + 1);\n      }\n    }\n\n    return pages;\n  }\n\n  /**\n   * Renders all sequential pages buttons\n   *\n   * @param pages\n   */\n  private renderAllPages(pages: number[]) {\n    return html`\n      ${pages.map(\n        page =>\n          html`\n            <fluent-button\n              title=\"${strings.page} ${page}\"\n              appearance=\"stealth\"\n              class=\"${page === this.currentPage ? 'search-results-page-active' : 'search-results-page'}\"\n              @click=\"${() => this.onPageClick(page)}\">\n                ${page}\n            </fluent-button>`\n      )}`;\n  }\n\n  /**\n   * Renders the \"First page\" button\n   *\n   * @param pages\n   */\n  private renderFirstPage(pages: number[]) {\n    return html`\n      ${\n        pages.some(page => page === 1)\n          ? nothing\n          : html`\n              <fluent-button\n                 title=\"${strings.page} 1\"\n                 appearance=\"stealth\"\n                 class=\"search-results-page\"\n                 @click=\"${this.onFirstPageClick}\">\n                 1\n               </fluent-button>`\n          ? html`\n              <fluent-button\n                id=\"page-back-dot\"\n                appearance=\"stealth\"\n                class=\"search-results-page\"\n                title=\"${this.getDotButtonTitle()}\"\n                @click=\"${() => this.onPageClick(this.currentPage - Math.ceil(this.pagingMax / 2))}\"\n              >\n                ...\n              </fluent-button>`\n          : nothing\n      }`;\n  }\n\n  /**\n   * Constructs the \"dot dot dot\" button title\n   */\n  private getDotButtonTitle() {\n    return `${strings.back} ${Math.ceil(this.pagingMax / 2)} ${strings.pages}`;\n  }\n\n  /**\n   * Renders the \"Previous page\" button\n   */\n  private renderPreviousPage() {\n    return this.currentPage > 1\n      ? html`\n          <fluent-button\n            appearance=\"stealth\"\n            class=\"search-results-page\"\n            title=\"${strings.back}\"\n            @click=\"${this.onPageBackClick}\">\n              ${getSvg(SvgIcon.ChevronLeft)}\n            </fluent-button>`\n      : nothing;\n  }\n\n  /**\n   * Renders the \"Next page\" button\n   */\n  private renderNextPage() {\n    return !this.isLastPage()\n      ? html`\n          <fluent-button\n            appearance=\"stealth\"\n            class=\"search-results-page\"\n            title=\"${strings.next}\"\n            aria-label=\"${strings.next}\"\n            @click=\"${this.onPageNextClick}\">\n              ${getSvg(SvgIcon.ChevronRight)}\n            </fluent-button>`\n      : nothing;\n  }\n\n  /**\n   * Triggers a specific page click\n   *\n   * @param pageNumber\n   */\n  private onPageClick(pageNumber: number) {\n    this.currentPage = pageNumber;\n    this.scrollToFirstResult();\n  }\n\n  /**\n   * Triggers a first page click\n   *\n   */\n  private readonly onFirstPageClick = () => {\n    this.currentPage = 1;\n    this.scrollToFirstResult();\n  };\n\n  /**\n   * Triggers a previous page click\n   */\n  private readonly onPageBackClick = () => {\n    this.currentPage--;\n    this.scrollToFirstResult();\n  };\n\n  /**\n   * Triggers a next page click\n   */\n  private readonly onPageNextClick = () => {\n    this.currentPage++;\n    this.scrollToFirstResult();\n  };\n\n  /**\n   * Validates if the current page is the last page of the collection\n   */\n  private isLastPage() {\n    return this.currentPage === Math.ceil(this.response.value[0].hitsContainers[0].total / this.size);\n  }\n\n  /**\n   * Scroll to the top of the search results\n   */\n  private scrollToFirstResult() {\n    const target = this.renderRoot.querySelector('.search-results');\n    target.scrollIntoView({\n      block: 'start',\n      behavior: 'smooth'\n    });\n  }\n\n  /**\n   * Gets the resource type (entity) of a search result\n   *\n   * @param resource\n   */\n  private getResourceType(resource: SearchResource) {\n    return resource['@odata.type'].split('.').pop();\n  }\n\n  /**\n   * Renders a driveItem entity\n   *\n   * @param result\n   */\n  private renderDriveItem(result: SearchHit) {\n    const resource = result.resource as SearchResource;\n    return mgtHtml`\n      <div class=\"search-result-grid\">\n        <div class=\"search-result-icon\">\n          <mgt-file\n            .fileDetails=\"${result.resource}\"\n            view=\"image\"\n            class=\"file-icon\">\n          </mgt-file>\n        </div>\n        <div class=\"search-result-content\">\n          <div class=\"search-result-name\">\n            <a href=\"${resource.webUrl}?Web=1\" target=\"_blank\">${trimFileExtension(resource.name)}</a>\n          </div>\n          <div class=\"search-result-info\">\n            <div class=\"search-result-author\">\n              <mgt-person\n                person-query=${resource.lastModifiedBy.user.email}\n                view=\"oneLine\"\n                person-card=\"hover\"\n                show-presence=\"true\">\n              </mgt-person>\n            </div>\n            <div class=\"search-result-date\">\n              &nbsp; ${strings.modified} ${getRelativeDisplayDate(new Date(resource.lastModifiedDateTime))}\n            </div>\n          </div>\n          <div class=\"search-result-summary\" .innerHTML=\"${sanitizeSummary(result.summary)}\"></div>\n        </div>\n        ${\n          resource.thumbnail?.url &&\n          html`\n          <div class=\"search-result-thumbnail\">\n            <a href=\"${resource.webUrl}\" target=\"_blank\"><img alt=\"${resource.name}\" src=\"${resource.thumbnail?.url}\" /></a>\n          </div>`\n        }\n\n      </div>\n      <fluent-divider></fluent-divider>\n    `;\n  }\n\n  /**\n   * Renders a site entity\n   *\n   * @param result\n   * @returns\n   */\n  private renderSite(result: SearchHit): HTMLTemplateResult {\n    const resource = result.resource as SearchResource;\n    return html`\n      <div class=\"search-result-grid\">\n        <div class=\"search-result-icon\">\n          ${this.getResourceIcon(resource)}\n        </div>\n        <div class=\"searc-result-content\">\n          <div class=\"search-result-name\">\n            <a href=\"${resource.webUrl}\" target=\"_blank\">${resource.displayName}</a>\n          </div>\n          <div class=\"search-result-info\">\n            <div class=\"search-result-url\">\n              <a href=\"${resource.webUrl}\" target=\"_blank\">${resource.webUrl}</a>\n            </div>\n          </div>\n          <div class=\"search-result-summary\" .innerHTML=\"${sanitizeSummary(result.summary)}\"></div>\n        </div>\n      </div>\n      <fluent-divider></fluent-divider>\n    `;\n  }\n\n  /**\n   * Renders a list entity\n   *\n   * @param result\n   * @returns\n   */\n  private renderList(result: SearchHit): HTMLTemplateResult {\n    const resource = result.resource as SearchResource;\n    return mgtHtml`\n      <div class=\"search-result-grid\">\n        <div class=\"search-result-icon\">\n          <mgt-file\n            .fileDetails=\"${result.resource}\"\n            view=\"image\">\n          </mgt-file>\n        </div>\n        <div class=\"search-result-content\">\n          <div class=\"search-result-name\">\n            <a href=\"${resource.webUrl}?Web=1\" target=\"_blank\">\n              ${trimFileExtension(resource.name || getNameFromUrl(resource.webUrl))}\n            </a>\n          </div>\n          <div class=\"search-result-summary\" .innerHTML=\"${sanitizeSummary(result.summary)}\"></div>\n        </div>\n      </div>\n      <fluent-divider></fluent-divider>\n    `;\n  }\n\n  /**\n   * Renders a listItem entity\n   *\n   * @param result\n   * @returns\n   */\n  private renderListItem(result: SearchHit): HTMLTemplateResult {\n    const resource = result.resource as SearchResource;\n    return mgtHtml`\n      <div class=\"search-result-grid\">\n        <div class=\"search-result-icon\">\n          ${resource.webUrl.endsWith('.aspx') ? getSvg(SvgIcon.News) : getSvg(SvgIcon.FileOuter)}\n        </div>\n        <div class=\"search-result-content\">\n          <div class=\"search-result-name\">\n            <a href=\"${resource.webUrl}?Web=1\" target=\"_blank\">\n              ${trimFileExtension(resource.name || getNameFromUrl(resource.webUrl))}\n            </a>\n          </div>\n          <div class=\"search-result-info\">\n            <div class=\"search-result-author\">\n              <mgt-person\n                person-query=${resource.lastModifiedBy.user.email}\n                view=\"oneLine\"\n                person-card=\"hover\"\n                show-presence=\"true\">\n              </mgt-person>\n            </div>\n            <div class=\"search-result-date\">\n              &nbsp; ${strings.modified} ${getRelativeDisplayDate(new Date(resource.lastModifiedDateTime))}\n            </div>\n          </div>\n          <div class=\"search-result-summary\" .innerHTML=\"${sanitizeSummary(result.summary)}\"></div>\n        </div>\n        ${\n          resource.thumbnail?.url &&\n          html`\n          <div class=\"search-result-thumbnail\">\n            <a href=\"${resource.webUrl}\" target=\"_blank\"><img alt=\"${trimFileExtension(\n              resource.name || getNameFromUrl(resource.webUrl)\n            )}\" src=\"${resource.thumbnail?.url || nothing}\" /></a>\n          </div>`\n        }\n      </div>\n      <fluent-divider></fluent-divider>\n    `;\n  }\n\n  /**\n   * Renders a person entity\n   *\n   * @param result\n   * @returns\n   */\n  private renderPerson(result: SearchHit): HTMLTemplateResult {\n    const resource = result.resource as SearchResource;\n    return mgtHtml`\n      <div class=\"search-result\">\n        <mgt-person\n          view=\"fourLines\"\n          person-query=${resource.userPrincipalName}\n          person-card=\"hover\"\n          show-presence=\"true\">\n        </mgt-person>\n      </div>\n      <fluent-divider></fluent-divider>\n    `;\n  }\n\n  /**\n   * Renders a bookmark entity\n   *\n   * @param result\n   */\n  private renderBookmark(result: SearchHit) {\n    return this.renderAnswer(result, SvgIcon.DoubleBookmark);\n  }\n\n  /**\n   * Renders an acronym entity\n   *\n   * @param result\n   */\n  private renderAcronym(result: SearchHit) {\n    return this.renderAnswer(result, SvgIcon.BookOpen);\n  }\n\n  /**\n   * Renders a qna entity\n   *\n   * @param result\n   */\n  private renderQnA(result: SearchHit) {\n    return this.renderAnswer(result, SvgIcon.BookQuestion);\n  }\n\n  /**\n   * Renders an answer entity\n   *\n   * @param result\n   */\n  private renderAnswer(result: SearchHit, icon: SvgIcon) {\n    const resource = result.resource as SearchResource;\n    return html`\n      <div class=\"search-result-grid search-result-answer\">\n        <div class=\"search-result-icon\">\n          ${getSvg(icon)}\n        </div>\n        <div class=\"search-result-content\">\n          <div class=\"search-result-name\">\n            <a href=\"${this.getResourceUrl(resource)}?Web=1\" target=\"_blank\">${resource.displayName}</a>\n          </div>\n          <div class=\"search-result-summary\">${resource.description}</div>\n        </div>\n      </div>\n      <fluent-divider></fluent-divider>\n    `;\n  }\n\n  /**\n   * Renders any entity\n   *\n   * @param result\n   */\n  private renderDefault(result: SearchHit) {\n    const resource = result.resource as SearchResource;\n    const resourceUrl = this.getResourceUrl(resource);\n    return html`\n      <div class=\"search-result-grid\">\n        <div class=\"search-result-icon\">\n          ${this.getResourceIcon(resource)}\n        </div>\n        <div class=\"search-result-content\">\n          <div class=\"search-result-name\">\n            ${\n              resourceUrl\n                ? html`\n                  <a href=\"${resourceUrl}?Web=1\" target=\"_blank\">${this.getResourceName(resource)}</a>\n                `\n                : html`\n                  ${this.getResourceName(resource)}\n                `\n            }\n          </div>\n          <div class=\"search-result-summary\" .innerHTML=\"${this.getResultSummary(result)}\"></div>\n        </div>\n      </div>\n      <fluent-divider></fluent-divider>\n    `;\n  }\n\n  /**\n   * Gets default resource URLs\n   *\n   * @param resource\n   */\n  private getResourceUrl(resource: SearchResource) {\n    return resource.webUrl || /* resource.url ||*/ resource.webLink || null;\n  }\n\n  /**\n   * Gets default resource Names\n   *\n   * @param resource\n   */\n  private getResourceName(resource: SearchResource) {\n    return resource.displayName || resource.subject || trimFileExtension(resource.name);\n  }\n\n  /**\n   * Gets default result summary\n   *\n   * @param resource\n   */\n  private getResultSummary(result: SearchHit) {\n    return sanitizeSummary(result.summary || (result.resource as SearchResource)?.description || null);\n  }\n\n  /**\n   * Gets default resource icon\n   *\n   * @param resource\n   */\n  private getResourceIcon(resource: SearchResource) {\n    switch (resource['@odata.type']) {\n      case '#microsoft.graph.site':\n        return getSvg(SvgIcon.Globe);\n      case '#microsoft.graph.message':\n        return getSvg(SvgIcon.Email);\n      case '#microsoft.graph.event':\n        return getSvg(SvgIcon.Event);\n      case 'microsoft.graph.chatMessage':\n        return getSvg(SvgIcon.SmallChat);\n      default:\n        return getSvg(SvgIcon.FileOuter);\n    }\n  }\n\n  /**\n   * Validates if cache should be retrieved\n   *\n   * @returns\n   */\n  private shouldRetrieveCache(): boolean {\n    return getIsResponseCacheEnabled() && this.cacheEnabled && !this.isRefreshing;\n  }\n\n  /**\n   * Validates if cache should be updated\n   *\n   * @returns\n   */\n  private shouldUpdateCache(): boolean {\n    return getIsResponseCacheEnabled() && this.cacheEnabled;\n  }\n\n  /**\n   * Builds the appropriate RequestOption for the search query\n   *\n   * @returns\n   */\n  private getRequestOptions(): SearchRequest | BetaSearchRequest {\n    const requestOptions: SearchRequest = {\n      entityTypes: this.entityTypes as EntityType[],\n      query: {\n        queryString: this.queryString\n      },\n      from: this.from ? this.from : undefined,\n      size: this.size ? this.size : undefined,\n      fields: this.getFields(),\n      enableTopResults: this.enableTopResults ? this.enableTopResults : undefined\n    };\n\n    if (this.entityTypes.includes('externalItem')) {\n      requestOptions.contentSources = this.contentSources;\n    }\n\n    if (this.version === 'beta') {\n      (requestOptions as BetaSearchRequest).query.queryTemplate = this.queryTemplate ? this.queryTemplate : undefined;\n    }\n\n    return requestOptions;\n  }\n\n  /**\n   * Gets the fields and default fields for default render methods\n   *\n   * @returns\n   */\n  private getFields(): string[] {\n    if (this.fields) {\n      return this.defaultFields.concat(this.fields);\n    }\n\n    return undefined;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtSearchResultsComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type SearchResultsProps = {\n\tqueryString?: string;\n\tqueryTemplate?: string;\n\tentityTypes?: string[];\n\tscopes?: string[];\n\tcontentSources?: string[];\n\tversion?: string;\n\tfrom?: number;\n\tsize?: number;\n\tpagingMax?: number;\n\tfetchThumbnail?: boolean;\n\tfields?: string[];\n\tenableTopResults?: boolean;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tcurrentPage?: number;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const SearchResults = wrapMgt<SearchResultsProps>('search-results', registerMgtSearchResultsComponent);\n\n","import * as React from 'react';\nimport { IResultsProps } from './IResultsProps';\nimport { MgtTemplateProps, SearchResults } from '@microsoft/mgt-react';\n\nexport const AllResults: React.FunctionComponent<IResultsProps> = (props: IResultsProps) => {\n  return (\n    <>\n      {props.searchTerm && (\n        <>\n          {props.searchTerm !== '*' && (\n            <SearchResults\n              entityTypes={['bookmark']}\n              queryString={props.searchTerm}\n              version=\"beta\"\n              size={1}\n              scopes={['Bookmark.Read.All']}\n            >\n              <NoDataTemplate template=\"no-data\"></NoDataTemplate>\n            </SearchResults>\n          )}\n          <SearchResults\n            entityTypes={['driveItem', 'listItem', 'site']}\n            queryString={props.searchTerm}\n            scopes={['Files.Read.All', 'Sites.Read.All']}\n            fetchThumbnail={true}\n          ></SearchResults>\n        </>\n      )}\n    </>\n  );\n};\n\nconst NoDataTemplate = (props: MgtTemplateProps) => {\n  return <></>;\n};\n","import { SearchResults } from '@microsoft/mgt-react';\nimport * as React from 'react';\nimport { IResultsProps } from './IResultsProps';\n\nexport const PeopleResults: React.FunctionComponent<IResultsProps> = (props: IResultsProps) => {\n  return (\n    <>\n      <SearchResults entityTypes={['people']} size={20} queryString={props.searchTerm} version={'beta'}></SearchResults>\n    </>\n  );\n};\n","import { SearchResults } from '@microsoft/mgt-react';\nimport * as React from 'react';\nimport { IResultsProps } from './IResultsProps';\n\nexport const ExternalItemsResults: React.FunctionComponent<IResultsProps> = (props: IResultsProps) => {\n  return (\n    <>\n      {props.searchTerm && (\n        <SearchResults\n          entityTypes={['externalItem']}\n          contentSources={['/external/connections/contosoBlogPosts']}\n          queryString={props.searchTerm}\n          scopes={['ExternalItem.Read.All']}\n          version=\"beta\"\n        ></SearchResults>\n      )}\n    </>\n  );\n};\n","import { SearchResults } from '@microsoft/mgt-react';\nimport * as React from 'react';\nimport { IResultsProps } from './IResultsProps';\nimport { MgtTemplateProps, Person, File, PersonCardInteraction, ViewType } from '@microsoft/mgt-react';\nimport {\n  DataGrid,\n  DataGridBody,\n  DataGridCell,\n  DataGridHeader,\n  DataGridHeaderCell,\n  DataGridRow,\n  SkeletonItem,\n  TableCellLayout,\n  TableColumnDefinition,\n  createTableColumn,\n  makeStyles,\n  shorthands,\n  tokens\n} from '@fluentui/react-components';\nimport { SlideSearchRegular } from '@fluentui/react-icons';\n\nconst useStyles = makeStyles({\n  container: {\n    ...shorthands.gap('16px'),\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  card: {\n    width: '300px',\n    height: 'fit-content',\n    maxWidth: '100%'\n  },\n  caption: {\n    color: tokens.colorNeutralForeground3\n  },\n  noDataSearchTerm: {\n    fontWeight: tokens.fontWeightSemibold\n  },\n  emptyContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: 'calc(100vh - 300px)'\n  },\n  fileContainer: {\n    display: 'flex'\n  },\n  fileTitle: {\n    paddingLeft: '10px',\n    alignSelf: 'center'\n  },\n  noDataMessage: {\n    paddingLeft: '10px'\n  },\n  noDataIcon: {\n    fontSize: '128px'\n  },\n  row: {\n    cursor: 'pointer'\n  }\n});\n\nconst pageSize = 30;\n\nexport const FilesResults: React.FunctionComponent<IResultsProps> = (props: IResultsProps) => {\n  return (\n    <>\n      {props.searchTerm && (\n        <SearchResults\n          entityTypes={['driveItem']}\n          queryString={props.searchTerm}\n          fetchThumbnail={true}\n          queryTemplate=\"({searchTerms}) ContentTypeId:0x0101*\"\n          version=\"beta\"\n          fields={['createdBy', 'lastModifiedDateTime', 'Title', 'DefaultEncodingURL']}\n          size={pageSize}\n          cacheEnabled={true}\n        >\n          <FileTemplate template=\"default\"></FileTemplate>\n          <FileTemplate template=\"loading\"></FileTemplate>\n          <FileNoDataTemplate template=\"no-data\"></FileNoDataTemplate>\n        </SearchResults>\n      )}\n    </>\n  );\n};\n\nconst getColumns = (shimmered: boolean, styles): TableColumnDefinition<any>[] => {\n  const columns: TableColumnDefinition<any>[] = [\n    createTableColumn<any>({\n      columnId: 'name',\n      renderHeaderCell: () => {\n        return 'Name';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? (\n              <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} />\n            ) : (\n              <div className={styles.fileContainer}>\n                <File fileDetails={item.resource} view={ViewType.image} />\n                <span className={styles.fileTitle}>{item.resource.listItem.fields.title}</span>\n              </div>\n            )}\n          </TableCellLayout>\n        );\n      }\n    }),\n    createTableColumn<any>({\n      columnId: 'modified',\n      renderHeaderCell: () => {\n        return 'Modified';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? (\n              <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} />\n            ) : (\n              getRelativeDisplayDate(new Date(item.resource.lastModifiedDateTime))\n            )}\n          </TableCellLayout>\n        );\n      }\n    }),\n    createTableColumn<any>({\n      columnId: 'owner',\n      renderHeaderCell: () => {\n        return 'Owner';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? (\n              <div\n                style={{\n                  display: 'grid',\n                  alignItems: 'center',\n                  position: 'relative',\n                  gridTemplateColumns: 'min-content 80%',\n                  gap: '10px'\n                }}\n              >\n                <SkeletonItem shape=\"circle\" size={32} />\n                <SkeletonItem style={{ width: '120px' }} />\n              </div>\n            ) : (\n              <Person\n                personQuery={item.resource.createdBy.user.email}\n                view={ViewType.oneline}\n                personCardInteraction={PersonCardInteraction.hover}\n              />\n            )}\n          </TableCellLayout>\n        );\n      }\n    })\n  ];\n\n  return columns;\n};\n\nconst FileTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [driveItems] = React.useState<any>(props.dataContext.value?.[0]?.hitsContainers[0]?.hits);\n\n  const onRowClick = (item: any) => {\n    const url = new URL(item.resource.listItem.fields.defaultEncodingURL);\n    url.searchParams.append('Web', '1');\n    window.open(url.toString(), '_blank');\n  };\n\n  return (\n    <div>\n      <DataGrid\n        columns={getColumns(props.template === 'loading', styles)}\n        items={props.template === 'loading' ? [...Array<number>(pageSize)] : driveItems}\n      >\n        <DataGridHeader>\n          <DataGridRow>\n            {({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}\n          </DataGridRow>\n        </DataGridHeader>\n        <DataGridBody<any>>\n          {({ item, rowId }) => (\n            <DataGridRow<any> key={rowId} className={styles.row} onClick={() => onRowClick(item)}>\n              {({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}\n            </DataGridRow>\n          )}\n        </DataGridBody>\n      </DataGrid>\n    </div>\n  );\n};\n\nconst FileNoDataTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [searchTerms] = React.useState<string[]>(props.dataContext.value[0]?.searchTerms);\n\n  return (\n    <div className={styles.emptyContainer}>\n      <div>\n        <SlideSearchRegular className={styles.noDataIcon} />\n      </div>\n      <div className={styles.noDataMessage}>\n        We couldn't find any results for <span className={styles.noDataSearchTerm}>{searchTerms.join(' ')}</span>\n      </div>\n    </div>\n  );\n};\n\nconst getRelativeDisplayDate = (date: Date): string => {\n  const now = new Date();\n\n  // Today -> 5:23 PM\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  if (date >= today) {\n    return date.toLocaleString('default', {\n      hour: 'numeric',\n      minute: 'numeric'\n    });\n  }\n\n  // This week -> Sun 3:04 PM\n  const sunday = new Date(today);\n  sunday.setDate(now.getDate() - now.getDay());\n  if (date >= sunday) {\n    return date.toLocaleString('default', {\n      hour: 'numeric',\n      minute: 'numeric',\n      weekday: 'short'\n    });\n  }\n\n  // Last two week -> Sun 8/2\n  const lastTwoWeeks = new Date(sunday);\n  lastTwoWeeks.setDate(sunday.getDate() - 7);\n  if (date >= lastTwoWeeks) {\n    return date.toLocaleString('default', {\n      day: 'numeric',\n      month: 'numeric',\n      weekday: 'short'\n    });\n  }\n\n  // More than two weeks ago -> 8/1/2020\n  return date.toLocaleString('default', {\n    day: 'numeric',\n    month: 'numeric',\n    year: 'numeric'\n  });\n};\n","import * as React from 'react';\nimport { PageHeader } from '../components/PageHeader';\nimport { AllResults, PeopleResults } from './Search';\nimport {\n  SelectTabData,\n  SelectTabEvent,\n  Tab,\n  TabList,\n  TabValue,\n  makeStyles,\n  shorthands\n} from '@fluentui/react-components';\nimport { useAppContext } from '../AppContext';\nimport { ExternalItemsResults } from './Search/ExternalItemsResults';\nimport { FilesResults } from './Search/FilesResults';\n\nconst useStyles = makeStyles({\n  panels: {\n    ...shorthands.padding('10px')\n  },\n  container: {\n    maxWidth: '1028px',\n    width: '100%'\n  }\n});\n\nconst SearchPage: React.FunctionComponent = () => {\n  const styles = useStyles();\n  const appContext = useAppContext();\n  const [query] = React.useState(new URLSearchParams(window.location.search).get('q'));\n\n  const [selectedTab, setSelectedTab] = React.useState<TabValue>('allResults');\n\n  const onTabSelect = (event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedTab(data.value);\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={'Search'}\n        description={'Use this Search Center to test Microsot Graph Toolkit search components capabilities'}\n      ></PageHeader>\n\n      <div className={styles.container}>\n        <TabList selectedValue={selectedTab} onTabSelect={onTabSelect}>\n          <Tab value=\"allResults\">All Results</Tab>\n          <Tab value=\"driveItems\">Files</Tab>\n          <Tab value=\"externalItems\">External Items</Tab>\n          <Tab value=\"people\">People</Tab>\n        </TabList>\n        <div className={styles.panels}>\n          {selectedTab === 'allResults' && <AllResults searchTerm={query ?? appContext.state.searchTerm}></AllResults>}\n          {selectedTab === 'driveItems' && (\n            <FilesResults searchTerm={query ?? appContext.state.searchTerm}></FilesResults>\n          )}\n          {selectedTab === 'externalItems' && (\n            <ExternalItemsResults searchTerm={query ?? appContext.state.searchTerm}></ExternalItemsResults>\n          )}\n          {selectedTab === 'people' && (\n            <PeopleResults searchTerm={query ?? appContext.state.searchTerm}></PeopleResults>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SearchPage;\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph } from './IGraph';\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { Graph } from './Graph';\n\n/**\n * The version of the Graph to use for making requests.\n */\nconst GRAPH_VERSION = 'beta';\n\n/**\n * BetaGraph\n *\n * @export\n * @class BetaGraph\n * @extends {BetaGraph}\n */\nexport class BetaGraph extends Graph {\n  /**\n   * get a BetaGraph instance based on an existing IGraph implementation.\n   *\n   * @static\n   * @param {Graph} graph\n   * @returns {BetaGraph}\n   * @memberof BetaGraph\n   */\n  public static fromGraph(graph: IGraph): BetaGraph {\n    const betaGraph = new BetaGraph(graph.client);\n    betaGraph.setComponent(graph.componentName);\n    return betaGraph;\n  }\n\n  constructor(client: Client, version: string = GRAPH_VERSION) {\n    super(client, version);\n  }\n\n  /**\n   * Returns a new instance of the Graph using the same\n   * client within the context of the provider.\n   *\n   * @param {Element} component\n   * @returns {BetaGraph}\n   * @memberof BetaGraph\n   */\n  public forComponent(component: Element | string): BetaGraph {\n    const graph = new BetaGraph(this.client);\n    this.setComponent(component);\n    return graph;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { OfficeGraphInsightString,ViewType } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtFileComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type FileProps = {\n\tfileQuery?: string;\n\tsiteId?: string;\n\tdriveId?: string;\n\tgroupId?: string;\n\tlistId?: string;\n\tuserId?: string;\n\titemId?: string;\n\titemPath?: string;\n\tinsightType?: OfficeGraphInsightString;\n\tinsightId?: string;\n\tfileDetails?: MicrosoftGraph.DriveItem;\n\tfileIcon?: string;\n\tdriveItem?: MicrosoftGraph.DriveItem;\n\tline1Property?: string;\n\tline2Property?: string;\n\tline3Property?: string;\n\tview?: ViewType;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const File = wrapMgt<FileProps>('file', registerMgtFileComponent);\n\n"],"names":["useStyles","makeStyles","divider","alignItems","paddingTop","marginBottom","PageHeader","props","styles","_jsxs","children","_jsx","title","description","Divider","className","strings","modified","back","next","pages","page","css","_templateObject","_taggedTemplateLiteral","MgtSearchResults","_MgtTemplatedTaskComp","_inherits","_super","_createSuper","_this","_classCallCheck","call","_size","entityTypes","scopes","contentSources","version","pagingMax","enableTopResults","cacheEnabled","cacheInvalidationPeriod","isRefreshing","defaultFields","currentPage","renderContent","footerTemplate","renderedTemplate","headerTemplate","hasTemplate","renderTemplate","response","renderFooter","_b","_a","value","hitsContainers","html","_d","_c","_templateObject2","_h","_g","_f","_e","hits","map","result","renderResult","_templateObject3","_templateObject4","renderLoading","_templateObject5","_toConsumableArray","Array","size","_templateObject6","fetchThumbnail","_templateObject7","onFirstPageClick","scrollToFirstResult","onPageBackClick","onPageNextClick","_createClass","key","get","this","_queryString","set","maxPageSize","providerState","queryString","queryTemplate","fields","hardRefresh","arguments","length","undefined","clearState","_task","run","provider","Providers","globalProvider","error","state","ProviderState","SignedIn","_context","abrupt","prev","requestOptions","getRequestOptions","JSON","stringify","endpoint","concat","searchEndpoint","shouldRetrieveCache","cache","CacheService","getCache","schemas","search","stores","responses","getIsResponseCacheEnabled","getValue","t0","sent","getResponseInvalidationTime","Date","now","timeCached","parse","graph","forComponent","request","api","middlewareOptions","prepScopes","apply","post","requests","thumbnailBatch","createBatch","thumbnailBatchBeta","BetaGraph","fromGraph","_iterator","_createForOfIteratorHelper","s","_step","n","done","element","resource","webUrl","endsWith","hitId","toString","parentReference","siteId","id","driveId","err","e","f","augmentResponse","thumbnailResponse","_step2","_iterator2","_step2$value","_slicedToArray","k","thumbnail","url","content","thumbnailWebUrl","t1","executeAll","t2","t3","t4","t5","shouldUpdateCache","putValue","equals","t6","fireCustomEvent","stop","_callee","type","getResourceType","renderDriveItem","renderSite","renderPerson","renderList","renderListItem","renderBookmark","renderAcronym","renderQnA","renderDefault","hitsContainer","pagingRequired","getActivePages","total","_templateObject8","renderPreviousPage","renderFirstPage","renderAllPages","renderNextPage","moreResultsAvailable","totalResults","_this2","firstPage","medianPage","Math","floor","getFirstPage","i","ceil","push","_this3","_templateObject9","_templateObject10","onPageClick","_this4","_templateObject11","some","nothing","_templateObject12","_templateObject13","getDotButtonTitle","_templateObject14","getSvg","SvgIcon","ChevronLeft","isLastPage","_templateObject15","ChevronRight","pageNumber","renderRoot","querySelector","scrollIntoView","block","behavior","split","pop","mgtHtml","_templateObject16","trimFileExtension","name","lastModifiedBy","user","email","getRelativeDisplayDate","lastModifiedDateTime","sanitizeSummary","summary","_templateObject17","_templateObject18","getResourceIcon","displayName","_templateObject19","getNameFromUrl","_templateObject20","News","FileOuter","_templateObject21","_templateObject22","userPrincipalName","renderAnswer","DoubleBookmark","BookOpen","BookQuestion","icon","_templateObject23","getResourceUrl","resourceUrl","_templateObject24","_templateObject25","getResourceName","_templateObject26","getResultSummary","webLink","subject","Globe","Email","Event","SmallChat","query","from","getFields","includes","MgtTemplatedTaskComponent","__decorate","property","attribute","String","converter","v","trim","_type","toLowerCase","reflect","Number","Boolean","SearchResults","wrapMgt","registerFluentComponents","fluentSkeleton","fluentButton","fluentTooltip","fluentDivider","registerMgtFileComponent","registerMgtPersonComponent","registerComponent","AllResults","_Fragment","searchTerm","NoDataTemplate","template","PeopleResults","ExternalItemsResults","container","_objectSpread","shorthands","gap","display","flexDirection","flexWrap","card","width","height","maxWidth","caption","color","tokens","colorNeutralForeground3","noDataSearchTerm","fontWeight","fontWeightSemibold","emptyContainer","justifyContent","fileContainer","fileTitle","paddingLeft","alignSelf","noDataMessage","noDataIcon","fontSize","row","cursor","FilesResults","FileTemplate","FileNoDataTemplate","getColumns","shimmered","createTableColumn","columnId","renderHeaderCell","renderCell","item","TableCellLayout","SkeletonItem","shape","style","File","fileDetails","view","ViewType","image","listItem","position","gridTemplateColumns","Person","personQuery","createdBy","oneline","personCardInteraction","PersonCardInteraction","hover","_props$dataContext$va","_props$dataContext$va2","_props$dataContext$va3","_React$useState","React","dataContext","driveItems","DataGrid","columns","items","DataGridHeader","DataGridRow","_ref","DataGridHeaderCell","DataGridBody","_ref2","rowId","onClick","URL","defaultEncodingURL","searchParams","append","window","open","onRowClick","_ref3","DataGridCell","_props$dataContext$va4","_React$useState3","searchTerms","SlideSearchRegular","join","date","today","getFullYear","getMonth","getDate","toLocaleString","hour","minute","sunday","setDate","getDay","weekday","lastTwoWeeks","day","month","year","panels","padding","appContext","useAppContext","URLSearchParams","location","_React$useState4","selectedTab","setSelectedTab","TabList","selectedValue","onTabSelect","event","data","Tab","_Graph","client","component","setComponent","betaGraph","componentName","Graph"],"sourceRoot":""}