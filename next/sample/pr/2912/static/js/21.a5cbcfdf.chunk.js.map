{"version":3,"file":"static/js/21.a5cbcfdf.chunk.js","mappings":"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","sources":["../../../packages/mgt-components/dist/es6/components/mgt-tasks-base/src/components/mgt-tasks-base/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-tasks-base/src/components/mgt-tasks-base/mgt-tasks-base.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/graph.todo.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/mgt-todo-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/mgt-todo.ts","../../../packages/mgt-components/dist/es6/utils/src/utils/isDark.ts","../../../packages/mgt-react/src/generated/todo.ts","components/DirectReports.tsx","pages/DashboardPage.tsx","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker.ts","../../../packages/mgt-react/src/generated/get.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nexport const strings = {\n  cancelNewTaskSubtitle: 'Cancel',\n  newTaskPlaceholder: 'Add a task',\n  addTaskButtonSubtitle: 'Add',\n  removeTaskSubtitle: 'Delete Task'\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ComponentMediaQuery, Providers, ProviderState, MgtTemplatedTaskComponent } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentTextField, fluentButton, fluentCalendar } from '@fluentui/web-components';\nimport { TodoTask } from '@microsoft/microsoft-graph-types';\n/**\n * The foundation for creating task based components.\n *\n * @export\n * @class MgtTasksBase\n * @extends {MgtTemplatedComponent}\n */\nexport abstract class MgtTasksBase extends MgtTemplatedTaskComponent {\n  /**\n   * determines if tasks are un-editable\n   *\n   * @type {boolean}\n   */\n  @property({ attribute: 'read-only', type: Boolean })\n  public readOnly: boolean;\n\n  /**\n   * sets whether the header is rendered\n   *\n   * @type {boolean}\n   * @memberof MgtTasksBase\n   */\n  @property({ attribute: 'hide-header', type: Boolean })\n  public hideHeader: boolean;\n\n  /**\n   * sets whether the options are rendered\n   *\n   * @type {boolean}\n   * @memberof MgtTasksBase\n   */\n  @property({ attribute: 'hide-options', type: Boolean })\n  public hideOptions: boolean;\n\n  /**\n   * if set, the component will only show tasks from the target list\n   *\n   * @type {string}\n   */\n  @property({ attribute: 'target-id', type: String })\n  public targetId: string;\n\n  /**\n   * if set, the component will first show tasks from this list\n   *\n   * @type {string}\n   * @memberof MgtTodo\n   */\n  @property({ attribute: 'initial-id', type: String })\n  public initialId: string;\n\n  private _previousMediaQuery: ComponentMediaQuery;\n\n  protected get strings(): Record<string, string> {\n    return strings;\n  }\n\n  constructor() {\n    super();\n\n    registerFluentComponents(fluentTextField, fluentButton, fluentCalendar);\n\n    this.clearState();\n    this._previousMediaQuery = this.mediaQuery;\n  }\n\n  protected args(): unknown[] {\n    return [this.providerState, this.targetId, this.initialId];\n  }\n\n  /**\n   * updates provider state\n   *\n   * @memberof MgtTasksBase\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  /**\n   * removes updates on provider state\n   *\n   * @memberof MgtTasksBase\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('resize', this.onResize);\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Render the loading state\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTasksBase\n   */\n  protected renderLoading = (): TemplateResult => {\n    return this.renderLoadingTask();\n  };\n\n  /**\n   * Invoked by render when the task is in a completed state\n   */\n  protected renderContent = () => {\n    const provider = Providers.globalProvider;\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return html``;\n    }\n\n    const picker = this.renderPicker();\n    const newTaskTemplate = this.renderNewTask();\n    const tasksTemplate = this.renderTasks();\n\n    return html`\n      ${picker}\n      ${newTaskTemplate}\n      <div class=\"tasks\" dir=${this.direction}>\n        ${tasksTemplate}\n      </div>\n    `;\n  };\n\n  /**\n   * Render a task in a loading state.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTodo\n   */\n  protected renderLoadingTask() {\n    return html`\n      <div class=\"task loading-task\">\n        <div class=\"task-details\">\n          <div class=\"title\"></div>\n          <div class=\"task-due\"></div>\n          <div class=\"task-delete\"></div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the panel for creating a new task.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderNewTask(): TemplateResult;\n\n  /**\n   * Render the generic picker.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderPicker(): TemplateResult;\n\n  /**\n   * Render the list of todo tasks\n   *\n   * @protected\n   * @abstract\n   * @param {ITask[]} tasks\n   * @returns {TemplateResult}\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderTasks(): TemplateResult;\n\n  /**\n   * Make a service call to create the new task object.\n   *\n   * @protected\n   * @abstract\n   * @memberof MgtTasksBase\n   */\n  protected abstract createNewTask(): Promise<void>;\n\n  /**\n   * Clear the form data from the new task panel.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract clearNewTaskData(): void;\n\n  /**\n   * Clear the component state.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected clearState(): void {\n    this.requestUpdate();\n  }\n\n  /**\n   * Handle when a task is clicked\n   *\n   * @protected\n   * @param {Event} e\n   * @param {TodoTask} task\n   * @memberof MgtTasksBase\n   */\n  protected handleTaskClick = (task: TodoTask): void => {\n    this.fireCustomEvent('taskClick', { task });\n  };\n\n  /**\n   * Convert a date to a properly formatted string\n   *\n   * @protected\n   * @param {Date} date\n   * @returns\n   * @memberof MgtTasksBase\n   */\n  protected dateToInputValue(date: Date): string {\n    if (date) {\n      return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n    }\n\n    return null;\n  }\n\n  private readonly onResize = () => {\n    if (this.mediaQuery !== this._previousMediaQuery) {\n      this._previousMediaQuery = this.mediaQuery;\n      this.requestUpdate();\n    }\n  };\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { TodoTaskList, TodoTask } from '@microsoft/microsoft-graph-types';\nimport { IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { CollectionResponse } from '@microsoft/mgt-element';\n\nexport interface LinkedResource {\n  id: string;\n  webUrl: string;\n  applicationName: string;\n  displayName: string;\n  externalId: string;\n}\n\n/**\n * Get all todo tasks for a specific task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTask[]>}\n */\nexport const getTodoTasks = async (graph: IGraph, listId: string): Promise<TodoTask[]> => {\n  const tasks = (await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<TodoTask>;\n\n  return tasks?.value;\n};\n\n/**\n * Get a specific todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<TodoTask>}\n */\nexport const getTodoTask = async (graph: IGraph, listId: string, taskId: string): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as TodoTask;\n\n/**\n * get all todo task lists\n *\n * @export\n * @param {IGraph} graph\n * @returns {Promise<TodoTaskList[]>}\n */\nexport const getTodoTaskLists = async (graph: IGraph): Promise<TodoTaskList[]> => {\n  const taskLists = (await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<TodoTaskList>;\n\n  return taskLists?.value;\n};\n\n/**\n * Get a specific todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTaskList>}\n */\nexport const getTodoTaskList = async (graph: IGraph, listId: string): Promise<TodoTaskList> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as TodoTaskList;\n\n/**\n * Create a new todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {{ title: string; dueDateTime: { dateTime: string; timeZone: string } }} taskData\n * @returns {Promise<TodoTask>}\n */\nexport const createTodoTask = async (\n  graph: IGraph,\n  listId: string,\n  taskData: { title: string; dueDateTime?: { dateTime: string; timeZone: string } }\n): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(taskData)) as TodoTask;\n\n/**\n * Create a new todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {{ displayName: string }} list\n * @returns {Promise<TodoTaskList>}\n */\nexport const createTodoTaskList = async (graph: IGraph, listData: { displayName: string }): Promise<TodoTaskList> =>\n  (await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(listData)) as TodoTaskList;\n\n/**\n * Delete a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<void>}\n */\nexport const deleteTodoTask = async (graph: IGraph, listId: string, taskId: string): Promise<void> => {\n  await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n};\n\n/**\n * Delete a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<void>}\n */\nexport const deleteTodoTaskList = async (graph: IGraph, listId: string): Promise<void> => {\n  await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n};\n\n/**\n * Update a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @param {TodoTask} taskData\n * @returns {Promise<TodoTask>}\n */\nexport const updateTodoTask = async (\n  graph: IGraph,\n  listId: string,\n  taskId: string,\n  taskData: TodoTask\n): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskData)) as TodoTask;\n\n/**\n * Update a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {TodoTaskList} taskListData\n * @returns {Promise<TodoTaskList>}\n */\nexport const updateTodoTaskList = async (\n  graph: IGraph,\n  listId: string,\n  taskListData: TodoTaskList\n): Promise<TodoTaskList> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskListData)) as TodoTaskList;\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{display:flex;flex-direction:column;color:var(--color,var(--neutral-foreground-rest))}:host input[type=date]::-webkit-calendar-picker-indicator,:host input[type=date]::-webkit-inner-spin-button{display:none;appearance:none}:host .task-icon{font-family:FabricMDL2Icons;user-select:none}:host .task-icon.divider{vertical-align:initial;margin:0 12px;font-size:16px}:host .header{margin:var(--tasks-header-margin,0 0 12px 0);padding:var(--tasks-title-padding,0);display:flex;align-items:center;justify-content:space-between}:host .header .header__loading{max-width:90px;width:100%;height:20px;background:#f2f2f2}:host .header select{font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px);border:none;appearance:none;cursor:pointer}:host .header select::-ms-expand{display:none}:host .header .plan-title{font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px)}:host .header .add-bar{display:flex}:host .header .add-bar .add-bar-item{flex:1 1 auto}:host .header .new-task-due{display:flex}:host .header .new-task-due input{flex:1 1 auto;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .header .title-cont{flex:1 1 auto;display:flex;align-items:center;height:var(--tasks-new-button-height,34px)}:host .header .new-task-button{flex:0 0 auto;display:flex;justify-content:center;align-items:center;width:var(--tasks-new-button-width,auto);height:var(--tasks-new-button-height,32px);border-radius:2px;padding:0 20px;background:var(--tasks-new-button-background,#0078d4);border:var(--tasks-new-button-border,solid 1px transparent);color:var(--tasks-new-button-color,#fff);user-select:none;cursor:pointer}:host .header .new-task-button span{font-size:14px;font-weight:600;letter-spacing:.1px;line-height:14px}:host .header .new-task-button .task-icon{margin-right:8px}:host .header .new-task-button.hidden{visibility:hidden}:host .header .new-task-button:hover{background:var(--tasks-new-button-hover-background,#106ebe)}:host .header .new-task-button:active{background:var(--tasks-new-button-active-background,#005a9e)}:host .task{position:relative;margin:var(--task-margin,0 0 0 0);padding:var(--task-padding,0 0 0 0);background-color:var(--task-background-color,var(--neutral-layer-floating));border:var(--task-border,var(--neutral-stroke-input-active));border-radius:8px}:host .task .task-content{display:flex}:host .task .task-content .divider{position:absolute;height:2px;left:0;right:0;bottom:0;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task .task-content .task-details-container{flex:1;display:grid;grid-template-columns:auto 1fr;-ms-grid-columns:auto 1fr;grid-template-rows:auto auto auto auto;-ms-grid-rows:auto auto auto auto;justify-content:space-between;align-items:flex-start;color:var(--task-detail-color,var(--neutral-foreground-hint));font-size:12px;font-weight:600;white-space:normal;margin-bottom:12px}:host .task .task-content .task-details-container .task-detail{width:100%;height:100%;margin:4px 24px 6px 0;display:flex;justify-content:flex-start;align-items:center}:host .task .task-content .task-details-container .task-title{color:var(--task-color,var(--neutral-foreground-rest));font-size:14px;font-weight:600;grid-row:1;grid-column:1/3;grid-column:1;-ms-grid-column-span:2;margin:22px 0 4px}:host .task .task-content .task-details-container .task-group{min-height:24px;grid-row:2;grid-column:1}:host .task .task-content .task-details-container .task-bucket{min-height:24px;grid-row:2;grid-column:2}:host .task .task-content .task-details-container .task-due{justify-content:flex-end;align-items:flex-start;grid-row:4;grid-column:1/3;grid-column:1;-ms-grid-column-span:2}:host .task .task-content .task-details-container.tablet{grid-template-columns:1fr .5fr 1fr .5fr;-ms-grid-columns:1fr .5fr 1fr .5fr;grid-template-rows:auto auto;-ms-grid-rows:auto auto}:host .task .task-content .task-details-container.tablet.no-plan{grid-template-columns:0 1fr 1fr 1fr;-ms-grid-columns:0 1fr 1fr 1fr}:host .task .task-content .task-details-container.tablet .task-detail{margin:4px 24px 6px 0}:host .task .task-content .task-details-container.tablet .task-title{grid-row:1;grid-column:1/5;grid-column:1;-ms-grid-column-span:4}:host .task .task-content .task-details-container.tablet .task-group{grid-row:2;grid-column:1}:host .task .task-content .task-details-container.tablet .task-bucket{grid-row:2;grid-column:2}:host .task .task-content .task-details-container.tablet .task-assignee{grid-row:2;grid-column:3}:host .task .task-content .task-details-container.tablet .task-due{justify-content:flex-start;align-items:center;grid-row:2;grid-column:4}:host .task .task-content .task-details-container.desktop{grid-template-columns:2fr 1fr .5fr 1fr .5fr;-ms-grid-columns:2fr 1fr .5fr 1fr .5fr;grid-template-rows:auto;-ms-grid-rows:auto;margin:0}:host .task .task-content .task-details-container.desktop.no-plan{grid-template-columns:2fr 0 1fr 1fr 1fr;-ms-grid-columns:2fr 0 1fr 1fr 1fr}:host .task .task-content .task-details-container.desktop .task-detail{margin:0 24px 0 0}:host .task .task-content .task-details-container.desktop .task-title{padding:0;grid-row:1;grid-column:1}:host .task .task-content .task-details-container.desktop .task-group{min-height:61px;grid-row:1;grid-column:2}:host .task .task-content .task-details-container.desktop .task-bucket{grid-row:1;grid-column:3}:host .task .task-content .task-details-container.desktop .task-assignee{grid-row:1;grid-column:4}:host .task .task-content .task-details-container.desktop .task-due{justify-content:flex-start;align-items:center;grid-row:1;grid-column:5}:host .task .task-content .task-details-container svg{vertical-align:middle;margin-right:4px}:host .task .task-content .task-details-container svg path{fill:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-content .task-details-container select,:host .task .task-content .task-details-container span{vertical-align:middle;color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-content .task-details-container .task-icon{color:#797775;margin-right:8px}:host .task .task-content .task-details-container .people{color:var(--task-detail-color,var(--neutral-foreground-hint));font-size:16px}:host .task .task-content .task-details-container .person{display:inline-block}:host .task .task-content .task-details-container .picker{background-color:var(--task-background-color,var(--neutral-layer-floating));background-clip:padding-box;width:var(--mgt-flyout-set-width,350px);color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-content .task-details-container .picker .people-picker{--separator-margin:0px 10px 0px 10px}:host .task .task-content .task-details-container input,:host .task .task-content .task-details-container select{color:var(--task-detail-color,var(--neutral-foreground-hint));font-size:.9em;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task .task-check-container{font-family:FabricMDL2Icons;border-radius:50%;color:#fff;cursor:pointer;display:flex;align-items:var(--task-icon-alignment,flex-start);margin:21px 10px 20px 20px;user-select:none}:host .task .task-check-container.complete .task-check{background-color:var(--task-icon-background-completed,#00ad56);border:var(--task-icon-border-completed,solid 1px #fff);color:var(--task-icon-color-completed,#fff)}:host .task .task-check-container.complete .task-content .task-details-container .task-title{text-decoration:line-through;color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-check-container .task-check{font-family:FabricMDL2Icons;font-size:12px;width:18px;height:18px;border-radius:var(--task-icon-border-radius,50%);border:var(--task-icon-border,solid 1px #797775);color:var(--task-color,var(--neutral-foreground-rest));display:flex;justify-content:center;align-items:center;background-color:var(--task-icon-background,transparent);user-select:none}:host .task .task-check-container .task-check.loading .task-check-content{animation:rotate-icon 2s infinite linear}:host .task .task-options{cursor:pointer;user-select:none;margin:16px 8px 0 0}:host .task.read-only .task-check-container{cursor:default}:host .task.complete{background:var(--task-complete-background,var(--neutral-layer-1));border:var(--task-complete-border,2px dotted inherit)}:host .task.complete .task-content .task-details-container .task-title{text-decoration:line-through;color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task.new-task{margin:var(--task-new-margin,var(--task-margin,0 0 24px 0));display:flex;flex-direction:row}:host .task.new-task .self-assign{display:none}:host .task.new-task .assign-to{border:0;background:0 0}:host .task.new-task .fake-check-box{width:15px;height:15px;cursor:pointer;margin:0 5px}:host .task.new-task .fake-check-box::after{font-family:FabricMDL2Icons;content:\"uE739\"}:host .task.new-task .fake-check-box~:checked{font-family:FabricMDL2Icons;content:\"uE73A\"}:host .task.new-task .task-content{flex:1 1 auto;align-content:center;vertical-align:middle;margin:0 0 0 12px}:host .task.new-task .task-content .task-details-container{display:flex;flex-direction:column;align-items:stretch;margin:0}:host .task.new-task .task-content .task-details-container .task-title{display:flex;height:32px;padding:2px}:host .task.new-task .task-content .task-details-container .task-title input{flex:1;margin:var(--task-new-input-margin,0 24px 0 16px);padding:var(--task-new-input-padding,6px);font-size:var(--task-new-input-font-size,14px);font-weight:600;border:var(--task-new-border,none);border-bottom:1px solid #e1dfdd;outline:0;border-radius:0;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task.new-task .task-content .task-details-container .task-title input:hover{border-bottom:1px solid #106ebe}:host .task.new-task .task-content .task-details-container .task-title input:active{border-bottom:1px solid #005a9e}:host .task.new-task .task-content .task-details-container .task-title input:focus{border-bottom:1px solid #0078d4}:host .task.new-task .task-content .task-details-container .task-details{display:flex;justify-content:stretch;align-items:center;flex-wrap:wrap;margin:14px 0 14px 4px}:host .task.new-task .task-content .task-details-container .task-details .new-task-group{margin:8px 16px}:host .task.new-task .task-content .task-details-container .task-details .new-task-bucket{margin:8px 16px}:host .task.new-task .task-content .task-details-container .task-details .new-task-due{margin:8px 16px}:host .task.new-task .task-content .task-details-container .task-details .new-task-assignee{margin:8px 16px;min-width:80px}:host .task.new-task .task-content .task-details-container .task-details .task-people label{display:flex;align-content:center;align-items:center}:host .task.new-task .task-content .task-details-container .task-details input,:host .task.new-task .task-content .task-details-container .task-details select{font-size:12px;font-weight:600;border:var(--task-new-select-border,none);border-bottom:1px solid #e1dfdd}:host .task.new-task .task-content .task-details-container .task-details input:hover,:host .task.new-task .task-content .task-details-container .task-details select:hover{border-bottom:1px solid #106ebe}:host .task.new-task .task-content .task-details-container .task-details input:active,:host .task.new-task .task-content .task-details-container .task-details select:active{border-bottom:1px solid #005a9e}:host .task.new-task .task-content .task-details-container .task-details input:focus,:host .task.new-task .task-content .task-details-container .task-details select:focus{border-bottom:1px solid #0078d4}:host .task.new-task .task-add-button-container{margin-right:28px}:host .task.new-task .task-add-button-container .task-add,:host .task.new-task .task-add-button-container .task-cancel{justify-content:center;align-items:center;cursor:pointer;flex:0 0 auto;display:flex;width:var(--tasks-new-button-width,100px);height:var(--tasks-new-button-height,32px);border-radius:4px;border:var(--tasks-new-button-border,solid 1px #e5e5e5);font-size:14px;line-height:20px}:host .task.new-task .task-add-button-container .task-add{color:#fff;background:var(--task-new-add-button-background,#0078d4);margin:22px 0 12px auto}:host .task.new-task .task-add-button-container .task-cancel{color:var(--task-new-cancel-button-color,var(--neutral-foreground-rest))}:host .task.new-task .task-add-button-container.disabled .task-add{color:var(--task-new-cancel-button-color,var(--neutral-foreground-rest));background:var(--task-new-add-button-disabled-background,#fff);cursor:default}@keyframes rotate-icon{from{transform:rotate(0)}to{transform:rotate(360deg)}}[dir=rtl] .arrow-options{--arrow-options-left:auto}[dir=rtl] .dot-options{--dot-options-translatex:translateX(60px)}[dir=rtl] .task-details{margin-right:14px!important}[dir=rtl] .task-icon{margin-left:8px}[dir=rtl] .task-detail svg{margin-left:4px}@media (forced-colors:active) and (prefers-color-scheme:dark){:host svg{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host svg{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}:host{border-radius:8px;width:100%}:host .task,:host.loading-task{margin-block:1px;box-shadow:var(--task-box-shadow,var(--elevation-shadow-card-active));width:100%;display:flex;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task.new-task,:host.loading-task.new-task{margin:14px 0 1px;box-shadow:var(--task-box-shadow,var(--elevation-shadow-card-active))}:host .task.complete,:host.loading-task.complete{border:1px solid var(--task-border-completed,var(--neutral-stroke-input-active));background:var(--task-complete-background,var(--neutral-layer-1))}:host .task.complete .task-details .task-due,:host .task.complete .task-details .title,:host.loading-task.complete .task-details .task-due,:host.loading-task.complete .task-details .title{text-decoration:line-through}:host .task.read-only,:host.loading-task.read-only{opacity:1}:host .task:hover,:host.loading-task:hover{background-color:var(--task-background-color-hover,var(--neutral-fill-hover));border-radius:8px}:host .task .task-details,:host.loading-task .task-details{box-sizing:border-box;display:flex;flex-direction:row;align-items:center;padding:2px;line-height:24px;border-radius:4px;width:100%}:host .task .task-details .task>div,:host.loading-task .task-details .task>div{display:flex;align-items:center;width:200px}:host .task .task-details .task-delete,:host.loading-task .task-details .task-delete{display:flex}:host .task .task-details .container,:host.loading-task .task-details .container{display:flex;width:100%}:host .task .task-details .task-due,:host.loading-task .task-details .task-due{min-width:120px;margin-inline-end:12px;height:32px;text-decoration:inherit;display:flex}:host fluent-text-field::part(end),:host fluent-text-field::part(start){margin-inline:unset}:host fluent-text-field::part(control){padding:0;cursor:pointer}:host fluent-text-field::part(root){background:0 0}:host fluent-text-field.new-task{width:100%;height:34px}:host fluent-text-field.new-task div.start .add-icon{display:flex;margin-inline:10px}:host fluent-text-field.new-task div:nth-child(2){display:flex;align-items:center}:host fluent-text-field.new-task div:nth-child(2) .calendar{display:flex;align-items:center}:host fluent-text-field.new-task div:nth-child(2) .calendar svg{fill:var(--task-color,var(--neutral-foreground-rest))}:host fluent-text-field.new-task div:nth-child(2) .calendar .date{margin-inline-start:10px;color:var(--task-color,var(--neutral-foreground-rest));width:auto;cursor:pointer}:host fluent-text-field.new-task div:nth-child(2) .calendar input{flex:1;border:none;border-bottom:1px solid var(--task-color,var(--neutral-foreground-rest));outline:0;border-radius:0}:host fluent-text-field.new-task div:nth-child(2) .calendar input:hover{border-bottom:1px solid var(--task-date-input-hover-color,var(--neutral-layer-1))}:host fluent-text-field.new-task div:nth-child(2) .calendar input:active,:host fluent-text-field.new-task div:nth-child(2) .calendar input:focus{border-bottom:1px solid var(--task-date-input-active-color,var(--accent-fill-rest))}:host fluent-text-field.title{flex-grow:1;display:inline}:host fluent-text-field.date{color:var(--task-detail-color,var(--neutral-foreground-hint))}:host fluent-text-field::after{border-bottom:none}:host fluent-text-field.dark::part(control){color-scheme:dark}:host fluent-button.task-add-icon.neutral,:host fluent-button.task-cancel-icon.neutral,:host fluent-button.task-delete.neutral{fill:var(--task-color,var(--neutral-foreground-rest))}:host fluent-button.task-add-icon.neutral::part(control),:host fluent-button.task-cancel-icon.neutral::part(control),:host fluent-button.task-delete.neutral::part(control){border:none;background:inherit}:host fluent-button.task-add-icon.neutral::part(control) svg,:host fluent-button.task-cancel-icon.neutral::part(control) svg,:host fluent-button.task-delete.neutral::part(control) svg{fill:var(--task-color,var(--neutral-foreground-rest))}:host fluent-checkbox.complete div>svg .filled{display:block}:host fluent-checkbox.complete div>svg .regular{display:none}:host fluent-checkbox.complete div>svg path{fill:var(--task-radio-background-color,var(--accent-fill-rest))}:host fluent-checkbox div>svg .filled{display:none}:host fluent-checkbox div>svg .regular{display:block}:host fluent-checkbox div>svg path{fill:var(--task-background-color,var(--neutral-layer-floating))}:host fluent-checkbox::part(control){margin-inline-start:10px;background:0 0;border-radius:50%}:host fluent-checkbox::part(label){margin-inline-end:unset;width:100%}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  cancelNewTaskSubtitle: 'Cancel',\n  newTaskPlaceholder: 'Add a task',\n  newTaskLabel: 'New Task Input',\n  editTaskLabel: 'Edit Task Input',\n  addTaskButtonSubtitle: 'Add',\n  deleteTaskOption: 'Delete',\n  editTaskOption: 'Edit',\n  dueDate: 'Due date',\n  newTaskDateInputLabel: 'New Task Date Input',\n  changeTaskDateInputLabel: 'Change Task Date Input',\n  newTaskNameInputLabel: 'New Task Name Input',\n  cancelAddingTask: 'Cancel adding a new task'\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, nothing, TemplateResult } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { IGraph, mgtHtml } from '@microsoft/mgt-element';\nimport { Providers, ProviderState } from '@microsoft/mgt-element';\nimport { getSvg, SvgIcon } from '../../utils/SvgHelper';\nimport '../mgt-person/mgt-person';\nimport { MgtTasksBase } from '../mgt-tasks-base/mgt-tasks-base';\nimport '../sub-components/mgt-arrow-options/mgt-arrow-options';\nimport {\n  createTodoTask,\n  deleteTodoTask,\n  getTodoTaskList,\n  getTodoTaskLists,\n  getTodoTasks,\n  updateTodoTask\n} from './graph.todo';\nimport { styles } from './mgt-todo-css';\nimport { strings } from './strings';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentCheckbox, fluentRadioGroup, fluentButton } from '@fluentui/web-components';\nimport { isElementDark } from '../../utils/isDark';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { TodoTaskList, TodoTask, TaskStatus } from '@microsoft/microsoft-graph-types';\nimport { registerComponent } from '@microsoft/mgt-element';\nimport { registerMgtPickerComponent } from '../mgt-picker/mgt-picker';\n\n/**\n * Filter function\n */\nexport type TodoFilter = (task: TodoTask) => boolean;\n\nexport const registerMgtTodoComponent = () => {\n  registerFluentComponents(fluentCheckbox, fluentRadioGroup, fluentButton);\n  registerMgtPickerComponent();\n  registerComponent('todo', MgtTodo);\n};\n\n/**\n * component enables the user to view, add, remove, complete, or edit todo tasks. It works with tasks in Microsoft Planner or Microsoft To-Do.\n *\n * @export\n * @class MgtTodo\n * @extends {MgtTasksBase}\n *\n * @cssprop --task-color - {Color} - Task text color\n * @cssprop --task-background-color - {Color} - Task background color\n * @cssprop --task-complete-background - {Color} - Task background color when completed\n * @cssprop --task-date-input-active-color - {Color} - Task date input active color\n * @cssprop --task-date-input-hover-color - {Color} - Task date input hover color\n * @cssprop --task-background-color-hover - {Color} - Task background when hovered\n * @cssprop --task-box-shadow - {Color} - Task box shadow color\n * @cssprop --task-border-completed - {Color} - Task border color when completed\n * @cssprop --task-radio-background-color - {Color} - Task radio background color\n */\nexport class MgtTodo extends MgtTasksBase {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  public static get styles() {\n    return styles;\n  }\n  /**\n   * Strings for localization\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  /**\n   * Optional filter function when rendering tasks\n   *\n   * @type {TodoFilter}\n   * @memberof MgtTodo\n   */\n  public taskFilter: TodoFilter;\n\n  /**\n   * Get the scopes required for todo\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtTodo\n   */\n  public static get requiredScopes(): string[] {\n    return ['tasks.read', 'tasks.readwrite'];\n  }\n  @state() private _tasks: TodoTask[];\n  @state() private _taskBeingUpdated: TodoTask;\n  @state() private _updatingTaskDate: boolean;\n  @state() private _isChangedDueDate = false;\n\n  @state() private _newTaskDueDate: Date;\n  @state() private _newTaskName: string;\n  @state() private _changedTaskName: string;\n  @state() private _isNewTaskBeingAdded: boolean;\n  @state() private _graph: IGraph;\n  @state() private currentList: TodoTaskList;\n  @state() private _isDarkMode = false;\n\n  constructor() {\n    super();\n    this._graph = null;\n    this._newTaskDueDate = null;\n    this._tasks = [];\n    this.addEventListener('selectionChanged', this.handleSelectionChanged);\n    this.addEventListener('blur', this.handleBlur);\n  }\n\n  /**\n   * updates provider state\n   *\n   * @memberof MgtTodo\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('darkmodechanged', this.onThemeChanged);\n    // invoked to ensure we have the correct initial value for _isDarkMode\n    this.onThemeChanged();\n  }\n\n  /**\n   * removes updates on provider state\n   *\n   * @memberof MgtTodo\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('darkmodechanged', this.onThemeChanged);\n    super.disconnectedCallback();\n  }\n\n  private readonly onThemeChanged = () => {\n    this._isDarkMode = isElementDark(this);\n  };\n\n  /**\n   * Render the list of todo tasks\n   */\n  protected renderTasks(): TemplateResult {\n    let tasks = this._tasks;\n    if (tasks && this.taskFilter) {\n      tasks = tasks.filter(task => this.taskFilter(task));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const completedTasks = tasks.filter(task => task.status === 'completed');\n\n    const taskTemplates = repeat(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      tasks.filter(task => task.status !== 'completed'),\n      task => task.id,\n      task => this.renderTask(task)\n    );\n\n    const completedTaskTemplates = repeat(\n      completedTasks\n        .sort((a, b) => {\n          return a.lastModifiedDateTime < b.lastModifiedDateTime ? -1 : 1;\n        })\n        .filter(task => task.status === 'completed'),\n      task => task.id,\n      task => this.renderTask(task)\n    );\n    return html`\n      ${taskTemplates}\n      ${completedTaskTemplates}\n    `;\n  }\n\n  /**\n   * Render the generic picker or the task list displayName.\n   *\n   */\n  protected renderPicker() {\n    if (this.targetId) {\n      return html`<p>${this.currentList?.displayName}</p>`;\n    } else {\n      return mgtHtml`\n        <mgt-picker\n          resource=\"me/todo/lists\"\n          scopes=\"tasks.read, tasks.readwrite\"\n          key-name=\"displayName\"\n          selected-value=\"${ifDefined(this.currentList?.displayName)}\"\n          placeholder=\"Select a task list\">\n        </mgt-picker>`;\n    }\n  }\n\n  /**\n   * Render the panel for creating a new task\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderNewTask = (): TemplateResult => {\n    const addIcon = this._newTaskName\n      ? html`\n        <fluent-checkbox\n          class=\"task-add-icon\"\n          @click=\"${this.addTask}\">\n        </fluent-checkbox>\n      `\n      : html`\n        <span class=\"add-icon\">${getSvg(SvgIcon.Add)}</span>\n      `;\n\n    const cancelIcon = html`\n      <fluent-button\n        aria-label=${this.strings.cancelAddingTask}\n        class=\"task-cancel-icon\" \n        @click=\"${this.clearNewTaskData}\"\n      >\n        ${getSvg(SvgIcon.Cancel)}\n      </fluent-button>\n    `;\n    const dateClass = { dark: this._isDarkMode, date: true };\n    const calendarTemplate = html`\n      <fluent-text-field\n        autocomplete=\"off\"\n        type=\"date\"\n        id=\"new-taskDate-input\"\n        class=\"${classMap(dateClass)}\"\n        aria-label=\"${this.strings.newTaskDateInputLabel}\"\n        .value=\"${this.dateToInputValue(this._newTaskDueDate)}\"\n        @change=\"${this.handleDateChange}\"\n      >\n      </fluent-text-field>\n    `;\n\n    const newTaskDetails = this.readOnly\n      ? nothing\n      : html`\n      <fluent-text-field\n        autocomplete=\"off\"\n        appearance=\"outline\"\n        class=\"new-task\"\n        id=\"new-task-name-input\"\n        aria-label=\"${this.strings.newTaskLabel}\"\n        .value=${this._newTaskName}\n        placeholder=\"${this.strings.newTaskPlaceholder}\"\n        @keydown=\"${this.handleKeyDown}\"\n        @input=\"${this.handleInput}\"\n      >\n        <div slot=\"start\" class=\"start\">${addIcon}</div>\n        ${\n          this._newTaskName\n            ? html`\n              <div slot=\"end\" class=\"end\">\n                <span class=\"calendar\">${calendarTemplate}</span>\n                ${cancelIcon}\n              </div> `\n            : html``\n        }\n      </fluent-text-field>\n    `;\n    return html`\n      ${\n        this.currentList\n          ? html`\n            <div dir=${this.direction} class=\"task new-task incomplete\">\n              ${newTaskDetails}\n            </div>\n        `\n          : html``\n      }  \n     `;\n  };\n\n  /**\n   * Handle a change in taskList.\n   *\n   * @protected\n   * @param {CustomEvent} e\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n\n  protected handleSelectionChanged = (e: CustomEvent<TodoTaskList>) => {\n    this.currentList = e.detail;\n    void this.loadTasks(this.currentList);\n  };\n\n  /**\n   * Render task details.\n   *\n   * @protected\n   * @param {TodoTask} task\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderTaskDetails = (task: TodoTask) => {\n    const context = { task, list: this.currentList };\n\n    if (this.hasTemplate('task')) {\n      return this.renderTemplate('task', context, task.id);\n    }\n\n    let taskDetailsTemplate = null;\n\n    const taskDeleteTemplate = html`\n      <fluent-button class=\"task-delete\"\n        @click=\"${() => this.removeTask(task.id)}\"\n        aria-label=\"${this.strings.deleteTaskOption}\">\n        ${getSvg(SvgIcon.Delete)}\n      </fluent-button>`;\n\n    if (this.hasTemplate('task-details')) {\n      taskDetailsTemplate = this.renderTemplate('task-details', context, `task-details-${task.id}`);\n    } else {\n      const dateClass = { dark: this._isDarkMode, date: true, 'task-due': true };\n      const calendarTemplate = html`\n        <fluent-text-field\n          autocomplete=\"off\"\n          type=\"date\"\n          id=\"${task.id}-taskDate-input\"\n          class=\"${classMap(dateClass)}\"\n          aria-label=\"${this.strings.changeTaskDateInputLabel}\"\n          .value=\"${\n            task.dueDateTime\n              ? this.dateToInputValue(new Date(task.dueDateTime.dateTime))\n              : this._taskBeingUpdated === task\n              ? this.dateToInputValue(this._newTaskDueDate)\n              : nothing\n          }\"\n          @change=\"${this.handleDateUpdate}\"\n          @focus=\"${(e: KeyboardEvent) => this.updatingTask(e, task)}\"\n          @blur=\"${this.handleBlur}\"\n        >\n        </fluent-text-field>\n      `;\n      const changeTaskDetailsTemplate = html`\n          <fluent-text-field \n            autocomplete=\"off\"\n            appearance=\"outline\"\n            class=\"title\"\n            id=${task.id}\n            .value=\"${task.title ? task.title : this._taskBeingUpdated === task ? this._changedTaskName : ''}\"\n            aria-label=\"${this.strings.editTaskLabel}\"\n            @keydown=\"${(e: KeyboardEvent) => this.handleChange(e, task)}\"\n            @input=\"${(e: KeyboardEvent) => this.handleChange(e, task)}\"\n            @focus=\"${(e: KeyboardEvent) => this.updatingTask(e, task)}\"\n          >\n          </fluent-text-field>\n          ${task.dueDateTime || this._taskBeingUpdated === task ? html`${calendarTemplate}` : nothing}\n          ${taskDeleteTemplate}\n      `;\n\n      taskDetailsTemplate = html`\n      <div class=\"task-details\">\n        ${changeTaskDetailsTemplate}\n      </div>\n      `;\n    }\n\n    return html`${taskDetailsTemplate}`;\n  };\n\n  /**\n   * Render a task in the list.\n   *\n   * @protected\n   * @param {TodoTask} task\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderTask = (task: TodoTask) => {\n    const isCompleted = task.status === 'completed';\n\n    const taskClasses = classMap({\n      complete: isCompleted,\n      'read-only': this.readOnly,\n      task: true\n    });\n\n    const checkboxClasses = classMap({\n      complete: isCompleted\n    });\n\n    const taskCheckContent = isCompleted ? html`${getSvg(SvgIcon.CheckMark)}` : html`${getSvg(SvgIcon.Radio)}`;\n\n    return html`\n      <div class=${taskClasses} @blur=\"${this.handleBlur}\">\n        <fluent-checkbox \n          id=${task.id} \n          class=${checkboxClasses}\n          ?checked=${isCompleted}\n          @click=\"${() => this.handleTaskCheckClick(task)}\"\n          @keydown=\"${(e: KeyboardEvent) => this.handleTaskCheckKeydown(e, task)}\"\n        >\n          <div slot=\"checked-indicator\">\n            ${taskCheckContent}\n          </div>\n        </fluent-checkbox>\n        ${this.renderTaskDetails(task)}\n      </div>\n    `;\n  };\n\n  /**\n   * loads tasks from dataSource\n   *\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected loadState = async (): Promise<void> => {\n    const provider = Providers.globalProvider;\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return;\n    }\n\n    if (!this._graph) {\n      const graph = provider.graph.forComponent(this);\n      this._graph = graph;\n    }\n\n    if (!this.currentList && !this.initialId) {\n      const lists = await getTodoTaskLists(this._graph);\n      const defaultList = lists?.find(l => l.wellknownListName === 'defaultList');\n      if (defaultList) await this.loadTasks(defaultList);\n    }\n\n    if (this.targetId) {\n      // Call to get the displayName of the list\n      this.currentList = await getTodoTaskList(this._graph, this.targetId);\n      this._tasks = await getTodoTasks(this._graph, this.targetId);\n    } else if (this.initialId) {\n      // Call to get the displayName of the list\n      this.currentList = await getTodoTaskList(this._graph, this.initialId);\n      this._tasks = await getTodoTasks(this._graph, this.initialId);\n    }\n  };\n\n  /**\n   * Send a request the Graph to create a new todo task item\n   *\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected async createNewTask(): Promise<void> {\n    const listId = this.currentList.id;\n    const taskData = {\n      title: this._newTaskName\n    };\n\n    if (this._newTaskDueDate) {\n      // eslint-disable-next-line @typescript-eslint/dot-notation\n      taskData['dueDateTime'] = {\n        dateTime: new Date(this._newTaskDueDate).toLocaleDateString(),\n        timeZone: 'UTC'\n      };\n    }\n\n    const task = await createTodoTask(this._graph, listId, taskData);\n    this._tasks.unshift(task);\n  }\n\n  /**\n   * Create a new todo task and add it to the list\n   *\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected addTask = async (): Promise<void> => {\n    if (this._isNewTaskBeingAdded || !this._newTaskName) {\n      return;\n    }\n\n    this._isNewTaskBeingAdded = true;\n\n    try {\n      await this.createNewTask();\n    } finally {\n      this.clearNewTaskData();\n      this._isNewTaskBeingAdded = false;\n    }\n  };\n\n  /**\n   *Update a todo task in the todo list\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected updateTask = async (task: TodoTask): Promise<void> => {\n    try {\n      if (!this._changedTaskName && !this._isChangedDueDate) {\n        return;\n      }\n      await this.updateTaskItem(task);\n    } finally {\n      this.clearNewTaskData();\n    }\n  };\n\n  /**\n   * Send a request the Graph to update a todo task item\n   *\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected async updateTaskItem(task: TodoTask): Promise<void> {\n    const listId = this.currentList.id;\n    let taskData: TodoTask = {};\n\n    if (this._changedTaskName && this._changedTaskName !== task.title) {\n      taskData = {\n        title: this._changedTaskName\n      };\n    }\n\n    if (this._updatingTaskDate) {\n      if (!this._isChangedDueDate) {\n        return;\n      }\n      if (this._newTaskDueDate) {\n        taskData.dueDateTime = {\n          dateTime: new Date(this._newTaskDueDate).toLocaleDateString(),\n          timeZone: 'UTC'\n        };\n      } else if (this._isChangedDueDate && !this._newTaskDueDate) {\n        taskData.dueDateTime = null;\n      } else {\n        taskData.dueDateTime = null;\n      }\n    }\n\n    if (!Object.keys(taskData).length) {\n      return;\n    }\n    const updatedTask = await updateTodoTask(this._graph, listId, task.id, taskData);\n    const taskIndex = this._tasks.findIndex(t => t.id === updatedTask.id);\n    this._tasks[taskIndex] = updatedTask;\n  }\n\n  /**\n   * Clear out the new task metadata input fields\n   *\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected clearNewTaskData = (): void => {\n    this._newTaskDueDate = null;\n    this._newTaskName = '';\n    this._changedTaskName = '';\n    this._isChangedDueDate = false;\n  };\n\n  /**\n   * Clear the state of the component\n   *\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected clearState = (): void => {\n    super.clearState();\n    this.currentList = null;\n    this._tasks = [];\n    this._taskBeingUpdated = null;\n  };\n\n  private readonly loadTasks = async (list: TodoTaskList): Promise<void> => {\n    this.currentList = list;\n\n    this._tasks = await getTodoTasks(this._graph, list.id);\n  };\n\n  private readonly updateTaskStatus = async (task: TodoTask, taskStatus: TaskStatus): Promise<void> => {\n    // Change the task status\n    task.status = taskStatus;\n\n    // Send update request\n    const listId = this.currentList.id;\n    task = await updateTodoTask(this._graph, listId, task.id, task);\n\n    const taskIndex = this._tasks.findIndex(t => t.id === task.id);\n    this._tasks[taskIndex] = task;\n  };\n\n  private readonly removeTask = async (taskId: string): Promise<void> => {\n    this._tasks = this._tasks.filter(t => t.id !== taskId);\n    this.requestUpdate();\n\n    const listId = this.currentList.id;\n    await deleteTodoTask(this._graph, listId, taskId);\n\n    this._tasks = this._tasks.filter(t => t.id !== taskId);\n  };\n\n  private handleTaskCheckClick(task: TodoTask) {\n    this.handleTaskClick(task);\n    if (!this.readOnly) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (task.status === 'completed') {\n        void this.updateTaskStatus(task, 'notStarted');\n      } else {\n        void this.updateTaskStatus(task, 'completed');\n      }\n    }\n  }\n\n  private handleTaskCheckKeydown(e: KeyboardEvent, task: TodoTask) {\n    if (e.key === 'Enter' && !this.readOnly) {\n      this.handleTaskClick(task);\n      if (task.status === 'completed') {\n        void this.updateTaskStatus(task, 'notStarted');\n      } else {\n        void this.updateTaskStatus(task, 'completed');\n      }\n    }\n  }\n\n  private readonly handleInput = (e: MouseEvent) => {\n    if ((e.target as HTMLInputElement).id === 'new-task-name-input') {\n      this._newTaskName = (e.target as HTMLInputElement).value;\n    }\n  };\n\n  private readonly handleChange = async (e: KeyboardEvent, task: TodoTask) => {\n    if ((e.target as HTMLInputElement).id === task.id) {\n      if (e.key === 'Enter') {\n        await this.updateTask(task);\n        (e.target as HTMLInputElement)?.blur();\n      }\n      this._changedTaskName = (e.target as HTMLInputElement).value;\n    }\n  };\n\n  private readonly handleKeyDown = async (e: KeyboardEvent) => {\n    if (e.key === 'Enter' && (e.target as HTMLInputElement).id === 'new-task-name-input') {\n      await this.addTask();\n    }\n  };\n\n  private readonly updatingTask = (e: KeyboardEvent, task: TodoTask) => {\n    if ((e.target as HTMLInputElement).id === task.id) {\n      this._taskBeingUpdated = task;\n    }\n    if ((e.target as HTMLInputElement).id === `${task.id}-taskDate-input`) {\n      this._updatingTaskDate = true;\n      this._taskBeingUpdated = task;\n    }\n  };\n\n  private readonly handleBlur = () => {\n    const task = this._taskBeingUpdated;\n    const targets = this.renderRoot.querySelectorAll('fluent-text-field');\n    for (const target of targets) {\n      if (\n        task &&\n        ((target as HTMLInputElement).id === task.id || (target as HTMLInputElement).id === `${task.id}-taskDate-input`)\n      ) {\n        void this.updateTask(task);\n        (target as HTMLElement)?.blur();\n        this._taskBeingUpdated = null;\n        this._updatingTaskDate = false;\n      }\n    }\n  };\n\n  private readonly handleDateChange = (e: Event) => {\n    const value = (e.target as HTMLInputElement).value;\n    if (value) {\n      this._newTaskDueDate = new Date(value + 'T17:00');\n    } else {\n      this._newTaskDueDate = null;\n    }\n  };\n\n  private readonly handleDateUpdate = (e: Event) => {\n    const task = this._taskBeingUpdated;\n    if (task) {\n      const value = (e.target as HTMLInputElement).value;\n      if (value) {\n        this._newTaskDueDate = new Date(value + 'T17:00');\n      } else {\n        this._newTaskDueDate = null;\n      }\n\n      if (task.dueDateTime && this._newTaskDueDate) {\n        this._isChangedDueDate = new Date(task.dueDateTime.dateTime) !== this._newTaskDueDate;\n      } else if (task.dueDateTime || this._newTaskDueDate) {\n        this._isChangedDueDate = true;\n      } else {\n        this._isChangedDueDate = false;\n      }\n    }\n  };\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { SwatchRGB, baseLayerLuminance, isDark } from '@fluentui/web-components';\n\n/**\n * Utility to help quickly determine if an element is dark based fluentui theme\n *\n * @param element HTMLElement to check if dark\n * @returns true if the element is dark\n */\nexport const isElementDark = (element: HTMLElement) => {\n  const luminance = baseLayerLuminance.getValueFor(element);\n  return isDark(SwatchRGB.create(luminance, luminance, luminance));\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { TodoFilter } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtTodoComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type TodoProps = {\n\ttaskFilter?: TodoFilter;\n\treadOnly?: boolean;\n\thideHeader?: boolean;\n\thideOptions?: boolean;\n\ttargetId?: string;\n\tinitialId?: string;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Todo = wrapMgt<TodoProps>('todo', registerMgtTodoComponent);\n\n","import {\n  DataGrid,\n  DataGridBody,\n  DataGridCell,\n  DataGridHeader,\n  DataGridHeaderCell,\n  DataGridRow,\n  TableCellLayout,\n  TableColumnDefinition,\n  Toolbar,\n  ToolbarButton,\n  ToolbarGroup,\n  createTableColumn,\n  makeStyles\n} from '@fluentui/react-components';\n\nimport { SkeletonItem } from '@fluentui/react-components';\nimport { FeedRegular } from '@fluentui/react-icons';\nimport { Get, MgtTemplateProps, Person, PersonCardInteraction, ViewType } from '@microsoft/mgt-react';\nimport React from 'react';\n\nexport interface IIndicentsProps {}\nconst useStyles = makeStyles({\n  toolbar: {\n    justifyContent: 'space-between'\n  }\n});\n\nconst getColumns = (shimmered: boolean): TableColumnDefinition<any>[] => {\n  const columns: TableColumnDefinition<any>[] = [\n    createTableColumn<any>({\n      columnId: 'name',\n      renderHeaderCell: () => {\n        return 'Name';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? (\n              <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} />\n            ) : (\n              <Person userId={item.id} view={ViewType.oneline} personCardInteraction={PersonCardInteraction.hover} />\n            )}\n          </TableCellLayout>\n        );\n      }\n    }),\n    createTableColumn<any>({\n      columnId: 'jobTitle',\n      renderHeaderCell: () => {\n        return 'Job Title';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} /> : item.jobTitle}\n          </TableCellLayout>\n        );\n      }\n    }),\n    createTableColumn<any>({\n      columnId: 'mobilePhone',\n      renderHeaderCell: () => {\n        return 'Mobile Phone';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} /> : item.mobilePhone}\n          </TableCellLayout>\n        );\n      }\n    }),\n    createTableColumn<any>({\n      columnId: 'officeLocation',\n      renderHeaderCell: () => {\n        return 'Office Location';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} /> : item.officeLocation}\n          </TableCellLayout>\n        );\n      }\n    })\n  ];\n\n  return columns;\n};\n\nexport function DirectReports(props: IIndicentsProps) {\n  return (\n    <Get resource={`me/directReports`}>\n      <DataGridTemplate template=\"default\"></DataGridTemplate>\n      <DataGridTemplate template=\"loading\"></DataGridTemplate>\n      <NoDataTemplate template=\"no-data\"></NoDataTemplate>\n    </Get>\n  );\n}\n\nconst DataGridTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [teams] = React.useState<any[]>(props.dataContext.value);\n  const [isLoading] = React.useState<boolean>(props.dataContext && !props.dataContext.value);\n  const [selectedTeam, setSelectedTeam] = React.useState<any>(null);\n\n  const onSelectionChange = (e: any, data: any) => {\n    const [selectedItem] = data.selectedItems;\n    const team = teams.find(i => i.id === selectedItem);\n    setSelectedTeam(team);\n  };\n\n  return (\n    <div>\n      <Toolbar className={styles.toolbar}>\n        <ToolbarGroup role=\"presentation\">\n          <ToolbarButton\n            icon={<FeedRegular />}\n            disabled={!selectedTeam}\n            as=\"a\"\n            href={`https://www.office.com/feed?auth=2#/user/${selectedTeam?.id}`}\n            target=\"_blank\"\n          >\n            View feed\n          </ToolbarButton>\n        </ToolbarGroup>\n      </Toolbar>\n      <DataGrid\n        columns={getColumns(isLoading)}\n        items={isLoading ? [...Array<number>(5)] : teams}\n        selectionMode=\"single\"\n        onSelectionChange={onSelectionChange}\n        getRowId={item => (isLoading ? Math.random() : item.id)}\n      >\n        <DataGridHeader>\n          <DataGridRow>\n            {({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}\n          </DataGridRow>\n        </DataGridHeader>\n        <DataGridBody<any>>\n          {({ item, rowId }) => (\n            <DataGridRow<any> key={rowId}>\n              {({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}\n            </DataGridRow>\n          )}\n        </DataGridBody>\n      </DataGrid>\n    </div>\n  );\n};\n\nconst NoDataTemplate = (props: MgtTemplateProps) => {\n  return <>You don't have direct reports</>;\n};\n","import * as React from 'react';\nimport { PageHeader } from '../components/PageHeader';\nimport { Providers, Todo } from '@microsoft/mgt-react';\nimport { DirectReports } from '../components/DirectReports';\nimport {\n  SelectTabData,\n  SelectTabEvent,\n  Tab,\n  TabList,\n  TabValue,\n  makeStyles,\n  shorthands\n} from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  panels: {\n    ...shorthands.padding('10px')\n  }\n});\n\nconst DashboardPage: React.FunctionComponent = () => {\n  const styles = useStyles();\n\n  const [taskListId, setTaskListId] = React.useState<string>('');\n  const [selectedTab, setSelectedTab] = React.useState<TabValue>('tasks');\n\n  const onTabSelect = (event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedTab(data.value);\n  };\n\n  React.useEffect(() => {\n    const fetchTaskList = async () => {\n      const taskList = await Providers.globalProvider.graph.client.api('/me/todo/lists?$top=1').get();\n      setTaskListId(taskList.value[0].id);\n    };\n\n    fetchTaskList();\n  }, []);\n\n  return (\n    <>\n      <PageHeader\n        title={'My Dashboard'}\n        description={'This dashboard helps you being productive with your tasks and your incidents.'}\n      ></PageHeader>\n      <div>\n        <TabList selectedValue={selectedTab} onTabSelect={onTabSelect}>\n          <Tab value=\"tasks\">My Tasks</Tab>\n          <Tab value=\"directReports\">My Direct Reports</Tab>\n        </TabList>\n        <div className={styles.panels}>\n          {selectedTab === 'tasks' && taskListId && <Todo initialId={taskListId}></Todo>}\n          {selectedTab === 'directReports' && <DirectReports />}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DashboardPage;\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  comboboxPlaceholder: 'Select an item'\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{--max-height:var(--picker-max-height, 380px);font-family:var(--default-font-family)}:host .picker{background-color:var(--picker-background-color,transparent)}:host fluent-combobox::part(selected-value)::placeholder{color:var(--picker-text-color,var(--input-filled-placeholder-rest))}:host fluent-combobox::part(selected-value):hover::placeholder{color:var(--picker-text-color-hover,var(--secondary-text-hover-color))}[dir=rtl] .picker{direction:rtl}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, PropertyValueMap, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { MgtTemplatedTaskComponent, mgtHtml } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { fluentCombobox, fluentOption } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport '../../styles/style-helper';\nimport { Entity } from '@microsoft/microsoft-graph-types';\nimport { DataChangedDetail, registerMgtGetComponent } from '../mgt-get/mgt-get';\nimport { styles } from './mgt-picker-css';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport const registerMgtPickerComponent = () => {\n  registerFluentComponents(fluentCombobox, fluentOption);\n\n  registerMgtGetComponent();\n  registerComponent('picker', MgtPicker);\n};\n\n/**\n * Web component that allows a single entity pick from a generic endpoint from Graph. Is a thin wrapper over mgt-get.\n * Does not load any state itself, only received state from mgt-get via events.\n *\n * @fires {CustomEvent<any>} selectionChanged - Fired when an option is clicked/selected\n * @export\n * @class MgtPicker\n * @extends {MgtTemplatedTaskComponent}\n *\n * @cssprop --picker-background-color - {Color} Picker component background color\n * @cssprop --picker-list-max-height - {String} max height for options list. Default value is 380px.\n */\nexport class MgtPicker extends MgtTemplatedTaskComponent {\n  protected get strings() {\n    return strings;\n  }\n\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'resource',\n    type: String\n  })\n  public resource: string;\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'v1.0';\n\n  /**\n   * Maximum number of pages to get for the resource\n   * default = 3\n   * if <= 0, all pages will be fetched\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'max-pages',\n    type: Number\n  })\n  public maxPages = 3;\n\n  /**\n   * A placeholder for the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'placeholder',\n    type: String\n  })\n  public placeholder: string;\n\n  /**\n   * Key to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'key-name',\n    type: String\n  })\n  public keyName: string;\n\n  /**\n   * Entity to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'entity-type',\n    type: String\n  })\n  public entityType: string;\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'scopes',\n    converter: value => {\n      return value ? value.toLowerCase().split(',') : null;\n    }\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Enables cache on the response from the specified resource\n   * default = false\n   *\n   * @type {boolean}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-enabled',\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    type: Number\n  })\n  public cacheInvalidationPeriod = 0;\n\n  /**\n   * Sets the currently selected value for the picker\n   * Must be present as an option in the supplied data returned from the the underlying graph query\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'selected-value',\n    type: String\n  })\n  public selectedValue: string;\n\n  @state() private response: Entity[];\n\n  constructor() {\n    super();\n    this.placeholder = this.strings.comboboxPlaceholder;\n    this.entityType = null;\n    this.keyName = null;\n  }\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtPicker\n   */\n  public refresh(hardRefresh = false) {\n    if (hardRefresh) {\n      this.clearState();\n    }\n    void this._task.run();\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtPicker\n   */\n  protected clearState(): void {\n    this.response = null;\n    this.error = null;\n  }\n\n  public renderLoading = (): TemplateResult => {\n    if (!this.response) {\n      return this.renderTemplate('loading', null);\n    }\n    return this.renderContent();\n  };\n\n  /**\n   * Invoked on each update to perform rendering the picker. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  public renderContent = () => {\n    const error = this.error ? (this.error as Error) : null;\n    if (error && this.hasTemplate('error')) {\n      return this.renderTemplate('error', { error }, 'error');\n    } else if (this.hasTemplate('no-data')) {\n      return this.renderTemplate('no-data', null);\n    }\n\n    return this.response?.length > 0 ? this.renderPicker() : this.renderGet();\n  };\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderPicker(): TemplateResult {\n    return mgtHtml`\n      <fluent-combobox\n        @keydown=${this.handleComboboxKeydown}\n        current-value=${ifDefined(this.selectedValue)}\n        part=\"picker\"\n        class=\"picker\"\n        id=\"combobox\"\n        autocomplete=\"list\"\n        placeholder=${this.placeholder}>\n          ${this.response.map(\n            item => html`\n            <fluent-option value=${item.id} @click=${(e: MouseEvent) => this.handleClick(e, item)}> ${\n              item[this.keyName]\n            } </fluent-option>`\n          )}\n      </fluent-combobox>\n     `;\n  }\n\n  /**\n   * Renders mgt-get which does a GET request to the resource.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderGet(): TemplateResult {\n    return mgtHtml`\n      <mgt-get\n        class=\"mgt-get\"\n        resource=${this.resource}\n        version=${this.version}\n        .scopes=${this.scopes}\n        max-pages=${this.maxPages}\n        ?cache-enabled=${this.cacheEnabled}\n        ?cache-invalidation-period=${this.cacheInvalidationPeriod}>\n      </mgt-get>`;\n  }\n\n  /**\n   * When the component is first updated wire up the event listeners.\n   * @param changedProperties a map of changed properties with old values\n   */\n  protected firstUpdated(changedProperties: PropertyValueMap<unknown> | Map<PropertyKey, unknown>): void {\n    super.firstUpdated(changedProperties);\n    const parent = this.renderRoot;\n    if (parent) {\n      parent.addEventListener('dataChange', (e: CustomEvent<DataChangedDetail>): void => this.handleDataChange(e));\n    } else {\n      console.error('🦒: mgt-picker component requires a renderRoot. Something has gone horribly wrong.');\n    }\n  }\n\n  private handleDataChange(e: CustomEvent<DataChangedDetail>): void {\n    const response = e.detail.response.value;\n    const error = e.detail.error ? e.detail.error : null;\n    this.response = response;\n    this.error = error;\n  }\n\n  private handleClick(_e: MouseEvent, item: Entity) {\n    this.fireCustomEvent('selectionChanged', item, true, false, true);\n  }\n\n  /**\n   * Handles getting the fluent option item in the dropdown and fires a custom\n   * event with it when you press Enter or Backspace keys.\n   *\n   * @param {KeyboardEvent} e\n   */\n  private readonly handleComboboxKeydown = (e: KeyboardEvent) => {\n    let value: string;\n    let item: Entity;\n    const keyName: string = e.key;\n    const comboBox: HTMLElement = e.target as HTMLElement;\n    const fluentOptionEl = comboBox.querySelector('.selected');\n    if (fluentOptionEl) {\n      value = fluentOptionEl.getAttribute('value');\n    }\n\n    if ('Enter' === keyName) {\n      if (value) {\n        item = this.response.filter(res => res.id === value).pop();\n        this.fireCustomEvent('selectionChanged', item, true, false, true);\n      }\n    }\n  };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n"],"names":["strings","cancelNewTaskSubtitle","newTaskPlaceholder","addTaskButtonSubtitle","removeTaskSubtitle","MgtTasksBase","_MgtTemplatedTaskComp","_inherits","_super","_createSuper","_this","_classCallCheck","call","renderLoading","renderLoadingTask","renderContent","provider","Providers","globalProvider","state","ProviderState","SignedIn","html","_templateObject","_taggedTemplateLiteral","picker","renderPicker","newTaskTemplate","renderNewTask","tasksTemplate","renderTasks","_templateObject2","direction","handleTaskClick","task","fireCustomEvent","onResize","mediaQuery","_previousMediaQuery","requestUpdate","registerFluentComponents","fluentTextField","fluentButton","fluentCalendar","clearState","_createClass","key","get","value","this","providerState","targetId","initialId","_get","_getPrototypeOf","prototype","window","addEventListener","removeEventListener","_templateObject3","date","Date","getTime","getTimezoneOffset","toISOString","split","MgtTemplatedTaskComponent","__decorate","property","attribute","type","Boolean","String","getTodoTasks","graph","listId","__awaiter","_regeneratorRuntime","mark","_callee","tasks","wrap","_context","prev","next","api","concat","header","middlewareOptions","prepScopes","sent","abrupt","stop","getTodoTaskLists","_callee3","taskLists","_context3","getTodoTaskList","_callee4","_context4","createTodoTask","taskData","_callee5","_context5","post","deleteTodoTask","taskId","_callee7","_context7","delete","updateTodoTask","_callee9","_context9","patch","styles","css","newTaskLabel","editTaskLabel","deleteTaskOption","editTaskOption","dueDate","newTaskDateInputLabel","changeTaskDateInputLabel","newTaskNameInputLabel","cancelAddingTask","MgtTodo","_MgtTasksBase","_thisSuper","_isChangedDueDate","_isDarkMode","onThemeChanged","element","luminance","baseLayerLuminance","getValueFor","isDark","SwatchRGB","create","isElementDark","_assertThisInitialized","addIcon","_newTaskName","addTask","getSvg","SvgIcon","Add","cancelIcon","clearNewTaskData","Cancel","dateClass","dark","calendarTemplate","_templateObject4","classMap","dateToInputValue","_newTaskDueDate","handleDateChange","newTaskDetails","readOnly","nothing","_templateObject5","handleKeyDown","handleInput","_templateObject6","_templateObject7","_templateObject8","currentList","_templateObject9","_templateObject10","handleSelectionChanged","e","detail","loadTasks","renderTaskDetails","context","list","hasTemplate","renderTemplate","id","taskDetailsTemplate","taskDeleteTemplate","_templateObject11","removeTask","Delete","_templateObject12","dueDateTime","dateTime","_taskBeingUpdated","handleDateUpdate","updatingTask","handleBlur","changeTaskDetailsTemplate","_templateObject13","title","_changedTaskName","handleChange","_templateObject14","_templateObject15","_templateObject16","renderTask","isCompleted","status","taskClasses","complete","checkboxClasses","taskCheckContent","_templateObject17","CheckMark","_templateObject18","Radio","_templateObject19","handleTaskCheckClick","handleTaskCheckKeydown","loadState","lists","defaultList","_graph","forComponent","find","l","wellknownListName","_tasks","_callee2","_context2","_isNewTaskBeingAdded","createNewTask","finish","updateTask","updateTaskItem","updateTaskStatus","taskStatus","taskIndex","findIndex","t","_callee6","_context6","filter","target","_a","blur","_callee8","_context8","_updatingTaskDate","_step","targets","renderRoot","querySelectorAll","_iterator","_createForOfIteratorHelper","s","n","done","err","f","_this2","taskFilter","completedTasks","taskTemplates","repeat","completedTaskTemplates","sort","a","b","lastModifiedDateTime","_templateObject20","_templateObject21","displayName","mgtHtml","_templateObject22","ifDefined","_b","toLocaleDateString","timeZone","unshift","_context10","Object","keys","length","updatedTask","_callee10","Todo","wrapMgt","fluentCheckbox","fluentRadioGroup","registerMgtPickerComponent","registerComponent","useStyles","makeStyles","toolbar","justifyContent","DirectReports","props","_jsxs","Get","resource","children","_jsx","DataGridTemplate","template","NoDataTemplate","shimmered","_React$useState","React","dataContext","teams","_slicedToArray","_React$useState3","isLoading","_React$useState5","_React$useState6","selectedTeam","setSelectedTeam","Toolbar","className","ToolbarGroup","role","ToolbarButton","icon","FeedRegular","disabled","as","href","DataGrid","columns","createTableColumn","columnId","renderHeaderCell","renderCell","item","TableCellLayout","SkeletonItem","shape","style","width","Person","userId","view","ViewType","oneline","personCardInteraction","PersonCardInteraction","hover","jobTitle","mobilePhone","officeLocation","items","_toConsumableArray","Array","selectionMode","onSelectionChange","data","selectedItem","selectedItems","team","i","getRowId","Math","random","DataGridHeader","DataGridRow","_ref","DataGridHeaderCell","DataGridBody","_ref2","rowId","_ref3","DataGridCell","_Fragment","panels","_objectSpread","shorthands","padding","_React$useState2","taskListId","setTaskListId","_React$useState4","selectedTab","setSelectedTab","fetchTaskList","_asyncToGenerator","taskList","client","apply","arguments","PageHeader","description","TabList","selectedValue","onTabSelect","event","Tab","comboboxPlaceholder","fluentCombobox","fluentOption","registerMgtGetComponent","MgtPicker","version","maxPages","scopes","cacheEnabled","cacheInvalidationPeriod","response","error","renderGet","handleComboboxKeydown","keyName","fluentOptionEl","querySelector","getAttribute","res","pop","placeholder","entityType","undefined","_task","run","map","handleClick","changedProperties","_this3","parent","handleDataChange","console","_e","Number","converter","toLowerCase"],"sourceRoot":""}