{"version":3,"file":"static/js/151.27391253.chunk.js","mappings":"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","sources":["../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker.ts","../../../packages/mgt-element/dist/es6/components/src/components/templatedComponent.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  comboboxPlaceholder: 'Select an item'\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{--max-height:var(--picker-max-height, 380px);font-family:var(--default-font-family)}:host .picker{background-color:var(--picker-background-color,transparent)}:host fluent-combobox::part(selected-value)::placeholder{color:var(--picker-text-color,var(--input-filled-placeholder-rest))}:host fluent-combobox::part(selected-value):hover::placeholder{color:var(--picker-text-color-hover,var(--secondary-text-hover-color))}[dir=rtl] .picker{direction:rtl}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { MgtTemplatedComponent, mgtHtml } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { fluentCombobox, fluentOption } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport '../../styles/style-helper';\nimport { Entity } from '@microsoft/microsoft-graph-types';\nimport { DataChangedDetail, registerMgtGetComponent } from '../mgt-get/mgt-get';\nimport { styles } from './mgt-picker-css';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport const registerMgtPickerComponent = () => {\n  registerFluentComponents(fluentCombobox, fluentOption);\n\n  registerMgtGetComponent();\n  registerComponent('picker', MgtPicker);\n};\n\n/**\n * Web component that allows a single entity pick from a generic endpoint from Graph. Uses mgt-get.\n *\n * @fires {CustomEvent<any>} selectionChanged - Fired when an option is clicked/selected\n * @export\n * @class MgtPicker\n * @extends {MgtTemplatedComponent}\n *\n * @cssprop --picker-background-color - {Color} Picker component background color\n * @cssprop --picker-list-max-height - {String} max height for options list. Default value is 380px.\n */\nexport class MgtPicker extends MgtTemplatedComponent {\n  protected get strings() {\n    return strings;\n  }\n\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'resource',\n    type: String\n  })\n  public resource: string;\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'v1.0';\n\n  /**\n   * Maximum number of pages to get for the resource\n   * default = 3\n   * if <= 0, all pages will be fetched\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'max-pages',\n    type: Number\n  })\n  public maxPages = 3;\n\n  /**\n   * A placeholder for the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'placeholder',\n    type: String\n  })\n  public placeholder: string;\n\n  /**\n   * Key to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'key-name',\n    type: String\n  })\n  public keyName: string;\n\n  /**\n   * Entity to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'entity-type',\n    type: String\n  })\n  public entityType: string;\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'scopes',\n    converter: value => {\n      return value ? value.toLowerCase().split(',') : null;\n    }\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Enables cache on the response from the specified resource\n   * default = false\n   *\n   * @type {boolean}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-enabled',\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    type: Number\n  })\n  public cacheInvalidationPeriod = 0;\n\n  /**\n   * Sets the currently selected value for the picker\n   * Must be present as an option in the supplied data returned from the the underlying graph query\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'selected-value',\n    type: String\n  })\n  public selectedValue: string;\n\n  private isRefreshing: boolean;\n\n  @state() private response: Entity[];\n\n  constructor() {\n    super();\n    this.placeholder = this.strings.comboboxPlaceholder;\n    this.entityType = null;\n    this.keyName = null;\n    this.isRefreshing = false;\n  }\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtPicker\n   */\n  public refresh(hardRefresh = false) {\n    this.isRefreshing = true;\n    if (hardRefresh) {\n      this.clearState();\n    }\n    void this.requestStateUpdate(hardRefresh);\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtPicker\n   */\n  protected clearState(): void {\n    this.response = null;\n    this.error = null;\n  }\n\n  /**\n   * Invoked on each update to perform rendering the picker. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  public render() {\n    if (this.isLoadingState && !this.response) {\n      return this.renderTemplate('loading', null);\n    } else if (this.hasTemplate('error')) {\n      const error = this.error ? (this.error as Error) : null;\n      return this.renderTemplate('error', { error }, 'error');\n    } else if (this.hasTemplate('no-data')) {\n      return this.renderTemplate('no-data', null);\n    }\n\n    return this.response?.length > 0 ? this.renderPicker() : this.renderGet();\n  }\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderPicker(): TemplateResult {\n    return mgtHtml`\n      <fluent-combobox\n        @keydown=${this.handleComboboxKeydown}\n        current-value=${ifDefined(this.selectedValue)}\n        part=\"picker\"\n        class=\"picker\"\n        id=\"combobox\"\n        autocomplete=\"list\"\n        placeholder=${this.placeholder}>\n          ${this.response.map(\n            item => html`\n            <fluent-option value=${item.id} @click=${(e: MouseEvent) => this.handleClick(e, item)}> ${\n              item[this.keyName]\n            } </fluent-option>`\n          )}\n      </fluent-combobox>\n     `;\n  }\n\n  /**\n   * Renders mgt-get which does a GET request to the resource.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderGet(): TemplateResult {\n    return mgtHtml`\n      <mgt-get\n        class=\"mgt-get\"\n        resource=${this.resource}\n        version=${this.version}\n        .scopes=${this.scopes}\n        max-pages=${this.maxPages}\n        ?cache-enabled=${this.cacheEnabled}\n        ?cache-invalidation-period=${this.cacheInvalidationPeriod}>\n      </mgt-get>`;\n  }\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPicker\n   */\n  protected async loadState() {\n    if (!this.response) {\n      const parent = this.renderRoot.querySelector('.mgt-get');\n      if (parent) {\n        parent.addEventListener('dataChange', (e: CustomEvent<DataChangedDetail>): void => this.handleDataChange(e));\n      } else {\n        console.error(\n          '🦒: mgt-picker component requires a child mgt-get component. Something has gone horribly wrong.'\n        );\n      }\n    }\n    this.isRefreshing = false;\n    // hack to maintain method signature contract\n    await Promise.resolve();\n  }\n\n  private handleDataChange(e: CustomEvent<DataChangedDetail>): void {\n    const response = e.detail.response.value;\n    const error = e.detail.error ? e.detail.error : null;\n    this.response = response;\n    this.error = error;\n  }\n\n  private handleClick(e: MouseEvent, item: Entity) {\n    this.fireCustomEvent('selectionChanged', item, true, false, true);\n  }\n\n  /**\n   * Handles getting the fluent option item in the dropdown and fires a custom\n   * event with it when you press Enter or Backspace keys.\n   *\n   * @param {KeyboardEvent} e\n   */\n  private readonly handleComboboxKeydown = (e: KeyboardEvent) => {\n    let value: string;\n    let item: Entity;\n    const keyName: string = e.key;\n    const comboBox: HTMLElement = e.target as HTMLElement;\n    const fluentOptionEl = comboBox.querySelector('.selected');\n    if (fluentOptionEl) {\n      value = fluentOptionEl.getAttribute('value');\n    }\n\n    if ('Enter' === keyName) {\n      if (value) {\n        item = this.response.filter(res => res.id === value).pop();\n        this.fireCustomEvent('selectionChanged', item, true, false, true);\n      }\n    }\n  };\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { property, state } from 'lit/decorators.js';\nimport { html, PropertyValueMap, PropertyValues, TemplateResult } from 'lit';\n\nimport { equals } from '../utils/equals';\nimport { MgtBaseComponent } from './baseComponent';\nimport { TemplateContext } from '../utils/TemplateContext';\nimport { TemplateHelper } from '../utils/TemplateHelper';\n\n/**\n * Lookup for rendered component templates and contexts by slot name.\n */\nexport type RenderedTemplates = Record<\n  string,\n  {\n    /**\n     * Reference to the data context used to render the slot.\n     */\n    context: Record<string, unknown>;\n    /**\n     * Reference to the rendered DOM element corresponding to the slot.\n     */\n    slot: HTMLElement;\n  }\n>;\n\nexport interface TemplateRenderedData {\n  templateType: string;\n  context: Record<string, unknown>;\n  element: HTMLElement;\n}\n\nexport type OrderedHtmlTemplate = HTMLTemplateElement & { templateOrder: number };\n\n/**\n * An abstract class that defines a templatable web component\n *\n * @export\n * @abstract\n * @class MgtTemplatedComponent\n * @extends {MgtBaseComponent}\n *\n * @fires {CustomEvent<MgtElement.TemplateRenderedData>} templateRendered - fires when a template is rendered\n */\nexport abstract class MgtTemplatedComponent extends MgtBaseComponent {\n  /**\n   * Additional data context to be used in template binding\n   * Use this to add event listeners or value converters\n   *\n   * @type {MgtElement.TemplateContext}\n   * @memberof MgtTemplatedComponent\n   */\n  @property({ attribute: false }) public templateContext: TemplateContext;\n\n  /**\n   *\n   * Gets or sets the error (if any) of the request\n   *\n   * @type object\n   * @memberof MgtSearchResults\n   */\n  @state() protected error: object;\n\n  /**\n   * Holds all templates defined by developer\n   *\n   * @protected\n   * @memberof MgtTemplatedComponent\n   */\n  protected templates: Record<string, OrderedHtmlTemplate> = {};\n\n  private _renderedSlots = false;\n  private _renderedTemplates: RenderedTemplates = {};\n  private _slotNamesAddedDuringRender = [];\n\n  constructor() {\n    super();\n\n    this.templateContext = this.templateContext || {};\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValueMap<unknown> | Map<PropertyKey, unknown>) {\n    this.templates = this.getTemplates();\n    this._slotNamesAddedDuringRender = [];\n    super.update(changedProperties);\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * * @param changedProperties Map of changed properties with old values\n   */\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    this.removeUnusedSlottedElements();\n  }\n\n  /**\n   * Render a <template> by type and return content to render\n   *\n   * @param templateType type of template (indicated by the data-type attribute)\n   * @param context the data context that should be expanded in template\n   * @param slotName the slot name that will be used to host the new rendered template. set to a unique value if multiple templates of this type will be rendered. default is templateType\n   */\n  protected renderTemplate(templateType: string, context: object, slotName?: string): TemplateResult {\n    if (!this.hasTemplate(templateType)) {\n      return null;\n    }\n\n    slotName = slotName || templateType;\n    this._slotNamesAddedDuringRender.push(slotName);\n    this._renderedSlots = true;\n\n    const template = html`\n      <slot name=${slotName}></slot>\n    `;\n\n    const dataContext = { ...context, ...this.templateContext };\n\n    if (Object.prototype.hasOwnProperty.call(this._renderedTemplates, slotName)) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const { context: existingContext, slot } = this._renderedTemplates[slotName];\n      if (equals(existingContext, dataContext)) {\n        return template;\n      }\n      this.removeChild(slot);\n    }\n\n    const div = document.createElement('div');\n    div.slot = slotName;\n    div.dataset.generated = 'template';\n\n    TemplateHelper.renderTemplate(div, this.templates[templateType], dataContext);\n\n    this.appendChild(div);\n\n    this._renderedTemplates[slotName] = { context: dataContext, slot: div };\n\n    const templateRenderedData: TemplateRenderedData = { templateType, context: dataContext, element: div };\n    this.fireCustomEvent('templateRendered', templateRenderedData);\n\n    return template;\n  }\n\n  /**\n   * Check if a specific template has been provided.\n   *\n   * @protected\n   * @param {string} templateName\n   * @returns {boolean}\n   * @memberof MgtTemplatedComponent\n   */\n  protected hasTemplate(templateName: string): boolean {\n    return Boolean(this.templates?.[templateName]);\n  }\n\n  private getTemplates() {\n    const templates: Record<string, OrderedHtmlTemplate> = {};\n\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (child.nodeName === 'TEMPLATE') {\n        const template = child as OrderedHtmlTemplate;\n        if (template.dataset.type) {\n          templates[template.dataset.type] = template;\n        } else {\n          templates.default = template;\n        }\n\n        template.templateOrder = i;\n      }\n    }\n\n    return templates;\n  }\n\n  /**\n   * Renders an error\n   *\n   * @returns\n   */\n  protected renderError(): TemplateResult {\n    if (this.hasTemplate('error')) {\n      return this.renderTemplate('error', this.error);\n    }\n\n    return html`\n      <div class=\"error\">\n        ${this.error}\n      </div>\n    `;\n  }\n\n  private removeUnusedSlottedElements() {\n    if (this._renderedSlots) {\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i] as HTMLElement;\n        if (child.dataset?.generated && !this._slotNamesAddedDuringRender.includes(child.slot)) {\n          this.removeChild(child);\n          delete this._renderedTemplates[child.slot];\n          i--;\n        }\n      }\n      this._renderedSlots = false;\n    }\n  }\n}\n"],"names":["strings","comboboxPlaceholder","styles","css","_templateObject","_taggedTemplateLiteral","registerMgtPickerComponent","registerFluentComponents","fluentCombobox","fluentOption","registerMgtGetComponent","registerComponent","MgtPicker","_MgtTemplatedComponen","_inherits","_super","_createSuper","_this","_classCallCheck","call","version","maxPages","scopes","cacheEnabled","cacheInvalidationPeriod","handleComboboxKeydown","e","value","item","keyName","key","fluentOptionEl","target","querySelector","getAttribute","response","filter","res","id","pop","fireCustomEvent","placeholder","entityType","isRefreshing","_createClass","get","hardRefresh","arguments","length","undefined","this","clearState","requestStateUpdate","error","isLoadingState","renderTemplate","hasTemplate","_a","renderPicker","renderGet","_this2","mgtHtml","ifDefined","selectedValue","map","html","_templateObject2","handleClick","_templateObject3","resource","parent","renderRoot","addEventListener","_this3","handleDataChange","console","_context","next","Promise","resolve","stop","_callee","detail","MgtTemplatedComponent","__decorate","property","attribute","type","String","Number","converter","toLowerCase","split","Boolean","state","_MgtBaseComponent","templates","_renderedSlots","_renderedTemplates","_slotNamesAddedDuringRender","templateContext","changedProperties","getTemplates","_get","_getPrototypeOf","prototype","removeUnusedSlottedElements","templateType","context","slotName","push","template","dataContext","Object","assign","hasOwnProperty","_this$_renderedTempla","existingContext","slot","equals","removeChild","div","document","createElement","dataset","generated","TemplateHelper","appendChild","templateRenderedData","element","templateName","i","children","child","nodeName","default","templateOrder","includes","MgtBaseComponent"],"sourceRoot":""}