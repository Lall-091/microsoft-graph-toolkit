{"version":3,"file":"static/js/751.0ac2a0b9.chunk.js","mappings":"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","sources":["../../../packages/mgt-components/dist/es6/components/mgt-taxonomy-picker/src/components/mgt-taxonomy-picker/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-taxonomy-picker/src/components/mgt-taxonomy-picker/mgt-taxonomy-picker-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-taxonomy-picker/src/components/mgt-taxonomy-picker/mgt-taxonomy-picker.ts","../../../packages/mgt-react/src/generated/taxonomy-picker.ts","pages/Taxonomy/TaxonomyExplorer.tsx","pages/TaxonomyPage.tsx","../../../packages/mgt-components/dist/es6/components/sub-components/mgt-spinner/src/components/sub-components/mgt-spinner/mgt-spinner-css.ts","../../../packages/mgt-components/dist/es6/components/sub-components/mgt-spinner/src/components/sub-components/mgt-spinner/mgt-spinner.ts","../../../packages/mgt-react/src/generated/get.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  termsetIdRequired: 'The termsetId property or termset-id attribute is required',\n  noTermsFound: 'No terms found',\n  comboboxPlaceholder: 'Select a term',\n  loadingMessage: 'Loading...'\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{--max-height:var(--taxonomy-picker-list-max-height, 380px)}:host .picker{background-color:var(--taxonomy-picker-background-color,transparent)}:host fluent-combobox::part(selected-value)::placeholder{color:var(--taxonomy-picker-placeholder-color,var(--input-filled-placeholder-rest))}:host fluent-combobox::part(selected-value):hover::placeholder{color:var(--taxonomy-picker-placeholder-color-hover,var(--secondary-text-hover-color))}[dir=rtl] .picker{direction:rtl}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport type * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { Position } from '../../graph/types';\nimport { html, PropertyValueMap, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { MgtTemplatedTaskComponent, mgtHtml } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { fluentCombobox, fluentOption } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport '../../styles/style-helper';\nimport { styles } from './mgt-taxonomy-picker-css';\nimport { DataChangedDetail, registerMgtGetComponent } from '../mgt-get/mgt-get';\nimport { registerComponent } from '@microsoft/mgt-element';\nimport { registerMgtSpinnerComponent } from '../sub-components/mgt-spinner/mgt-spinner';\n\nexport const registerMgtTaxonomyPickerComponent = () => {\n  registerFluentComponents(fluentCombobox, fluentOption);\n\n  registerMgtSpinnerComponent();\n  registerMgtGetComponent();\n  registerComponent('taxonomy-picker', MgtTaxonomyPicker);\n};\n\n/**\n * Web component that can query the Microsoft Graph API for Taxonomy\n * and render a dropdown control with terms,\n * allowing selection of a single term based on\n * the specified term set id or a combination of the specified term set id and the specified term id.\n * Uses mgt-get.\n *\n * @fires {CustomEvent<MicrosoftGraph.TermStore.Term>} selectionChanged - Fired when an option is clicked/selected\n * @export\n * @class MgtTaxonomyPicker\n * @extends {MgtTemplatedTaskComponent}\n *\n * @cssprop --taxonomy-picker-background-color - {Color} Picker component background color\n * @cssprop --taxonomy-picker-list-max-height - {String} max height for options list. Default value is 380px.\n * @cssprop --taxonomy-picker-placeholder-color - {Color} Text color for the placeholder in the picker\n * @cssprop --taxonomy-picker-placeholder-hover-color - {Color} Text color for the placeholder in the picker on hover\n */\nexport class MgtTaxonomyPicker extends MgtTemplatedTaskComponent {\n  /**\n   * The strings to be used for localizing the component.\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtTaxonomyPicker\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * The termsetId of the term set whose children to get.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'term-set-id',\n    type: String\n  })\n  public termsetId: string;\n\n  /**\n   * The termId of the term whose children to get. This term must be a child of the term set specified by termsetId.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'term-id',\n    type: String\n  })\n  public termId: string;\n\n  /**\n   * The id of the site where the termset is located. If not specified, the termset is assumed to be at the tenant level.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'site-id',\n    type: String\n  })\n  public siteId: string;\n\n  /**\n   * The locale based on which the term names should be returned.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'locale',\n    type: String\n  })\n  public locale: string;\n\n  /**\n   * Api version to use for request.\n   * Default is beta.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'beta';\n\n  /**\n   * A placeholder for the picker.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'placeholder',\n    type: String\n  })\n  public placeholder: string;\n\n  /**\n   * The position of the dropdown. Can be 'above' or 'below'.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'position',\n    type: String,\n    converter: (value: Position): Position => {\n      if (value === 'above') {\n        return 'above';\n      }\n      return 'below';\n    }\n  })\n  public position: Position = 'below';\n\n  /**\n   * The default selected term id.\n   *\n   * @type {string}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'default-selected-term-id',\n    type: String\n  })\n  public defaultSelectedTermId: string;\n\n  /**\n   * The selected term.\n   *\n   * @type {MicrosoftGraph.TermStore.Term}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'selected-term',\n    type: Object\n  })\n  public selectedTerm: MicrosoftGraph.TermStore.Term | null = null;\n\n  /**\n   * Determines whether component should be disabled or not\n   *\n   * @type {boolean}\n   * @memberof MgtPeoplePicker\n   */\n  @property({\n    attribute: 'disabled',\n    type: Boolean\n  })\n  public disabled: boolean;\n\n  /**\n   * Enables cache on the response from the specified resource.\n   * Default is false.\n   *\n   * @type {boolean}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'cache-enabled',\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds.\n   *\n   * @type {number}\n   * @memberof MgtTaxonomyPicker\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    type: Number\n  })\n  public cacheInvalidationPeriod = 0;\n\n  @state() private terms: MicrosoftGraph.TermStore.Term[];\n  @state() private noTerms: boolean;\n  // @state() private error: object;\n\n  constructor() {\n    super();\n    this.placeholder = this.strings.comboboxPlaceholder;\n    this.noTerms = false;\n  }\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtTaxonomyPicker\n   */\n  public refresh(hardRefresh = false) {\n    if (hardRefresh) {\n      this.clearState();\n    }\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtTaxonomyPicker\n   */\n  protected clearState(): void {\n    this.terms = null;\n    this.error = null;\n    this.noTerms = false;\n  }\n  /**\n   * Renders loading spinner while terms are fetched from the Graph\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderLoading = () => {\n    if (!this.terms) {\n      return (\n        this.renderTemplate('loading', null, 'loading') ||\n        mgtHtml`\n        <div class=\"message-parent\">\n          <mgt-spinner></mgt-spinner>\n          <div label=\"loading-text\" aria-label=\"loading\">\n            ${this.strings.loadingMessage}\n          </div>\n        </div>\n      `\n      );\n    }\n    return this.renderContent();\n  };\n\n  /**\n   * Invoked on each update to perform rendering the picker. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  public renderContent = () => {\n    // if error state, render error template\n    if (this.error) {\n      return this.renderError();\n    }\n\n    // if no terms are found, render no-data template\n    if (this.noTerms) {\n      return this.renderNoData();\n    }\n\n    // if terms are found, render picker else render get\n    return this.terms?.length > 0 ? this.renderTaxonomyPicker() : this.renderGet();\n  };\n\n  /**\n   * Render the no-data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderError = (): TemplateResult =>\n    this.renderTemplate('error', null, 'error') || html`<span>${this.error}</span>`;\n  /**\n   * Render the no-data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderNoData(): TemplateResult {\n    return this.renderTemplate('no-data', null) || html`<span>${this.strings.noTermsFound}</span>`;\n  }\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderTaxonomyPicker(): TemplateResult {\n    return mgtHtml`\n      <fluent-combobox class=\"taxonomy-picker\" autocomplete=\"both\" placeholder=${this.placeholder} position=${\n        this.position\n      } ?disabled=${this.disabled}>\n        ${this.terms.map(term => this.renderTaxonomyPickerItem(term))}\n      </fluent-combobox>\n     `;\n  }\n\n  /**\n   * Render picker item.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderTaxonomyPickerItem(term: MicrosoftGraph.TermStore.Term): TemplateResult {\n    const selected: boolean = this.defaultSelectedTermId && this.defaultSelectedTermId === term.id;\n\n    return html`\n        <fluent-option value=${term.id} ?selected=${selected} @click=${(e: MouseEvent) => this.handleClick(e, term)}> ${\n          this.renderTemplate('term', { term }, term.id) || term.labels[0].name\n        } </fluent-option>\n        `;\n  }\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTaxonomyPicker\n   */\n  protected renderGet(): TemplateResult {\n    // if termsetId is not specified, return error message\n    if (!this.termsetId) {\n      return html`<span>${this.strings.termsetIdRequired}</span>`;\n    }\n\n    let resource = `/termStore/sets/${this.termsetId}/children`;\n\n    // if both termsetId and termId are specified, then set resource to /termStore/sets/{termsetId}/terms/{termId}/children\n    if (this.termId) {\n      resource = `/termStore/sets/${this.termsetId}/terms/${this.termId}/children`;\n    }\n\n    // if siteId is specified, then prefix /sites/{siteId}/ to the resource\n    if (this.siteId) {\n      resource = `/sites/${this.siteId}${resource}`;\n    }\n\n    // Add properties to select to the resource\n    resource += '?$select=id,labels,descriptions,properties';\n\n    return mgtHtml`\n      <mgt-get\n        class=\"mgt-get\"\n        resource=${resource}\n        version=${this.version}\n        scopes=${['TermStore.Read.All']}\n        ?cache-enabled=${this.cacheEnabled}\n        ?cache-invalidation-period=${this.cacheInvalidationPeriod}>\n      </mgt-get>`;\n  }\n\n  protected firstUpdated(changedProperties: PropertyValueMap<unknown> | Map<PropertyKey, unknown>): void {\n    super.firstUpdated(changedProperties);\n    const parent = this.renderRoot;\n    parent.addEventListener('dataChange', (e: CustomEvent<DataChangedDetail>): void => this.handleDataChange(e));\n  }\n\n  private handleDataChange(e: CustomEvent<DataChangedDetail>): void {\n    const error = e.detail.error ? e.detail.error : null;\n\n    if (error) {\n      this.error = error;\n      return;\n    }\n\n    // if locale is specified, then convert it to lower case\n    if (this.locale) {\n      this.locale = this.locale.toLowerCase();\n    }\n\n    const response = e.detail.response.value;\n\n    // if response is not null and has values, if locale is specified, then\n    // get the label in response that has languageTag equal to locale and make it the first label and append the rest of the labels\n\n    const terms = response.map((item: MicrosoftGraph.TermStore.Term) => {\n      const labels = item.labels;\n      if (labels && labels.length > 0) {\n        if (this.locale) {\n          const label = labels.find(l => l.languageTag.toLowerCase() === this.locale);\n          if (label) {\n            item.labels = [label, ...labels.filter(l => l.languageTag.toLowerCase() !== this.locale)];\n          }\n        }\n      }\n      return item;\n    });\n\n    this.terms = terms;\n\n    //  if there are no terms then set noTerms to true\n    if (terms.length === 0) {\n      this.noTerms = true;\n    }\n  }\n\n  private handleClick(e: MouseEvent, item: MicrosoftGraph.TermStore.Term) {\n    this.selectedTerm = item;\n    this.fireCustomEvent('selectionChanged', item);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { registerMgtTaxonomyPickerComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type TaxonomyPickerProps = {\n\ttermsetId?: string;\n\ttermId?: string;\n\tsiteId?: string;\n\tlocale?: string;\n\tversion?: string;\n\tplaceholder?: string;\n\tposition?: string;\n\tdefaultSelectedTermId?: string;\n\tselectedTerm?: MicrosoftGraph.TermStore.Term;\n\tdisabled?: boolean;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tselectionChanged?: (e: CustomEvent<MicrosoftGraph.TermStore.Term>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const TaxonomyPicker = wrapMgt<TaxonomyPickerProps>('taxonomy-picker', registerMgtTaxonomyPickerComponent);\n\n","import * as React from 'react';\nimport { Get, MgtTemplateProps, TaxonomyPicker } from '@microsoft/mgt-react';\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionPanel,\n  makeStyles,\n  shorthands,\n  Card,\n  CardHeader,\n  Caption1,\n  tokens,\n  Text\n} from '@fluentui/react-components';\nimport { TermStore } from '@microsoft/microsoft-graph-types';\nimport { TagMultipleRegular, TagRegular } from '@fluentui/react-icons';\n\nexport const TaxonomyExplorer: React.FunctionComponent = () => {\n  return (\n    <>\n      <Get resource=\"termStore/groups\" version=\"beta\">\n        <GroupTemplate template=\"default\" />\n      </Get>\n    </>\n  );\n};\n\nconst useStyles = makeStyles({\n  main: {\n    ...shorthands.gap('36px'),\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap'\n  },\n\n  title: {\n    ...shorthands.margin(0, 0, '12px')\n  },\n\n  description: {\n    ...shorthands.margin(0, 0, '12px')\n  },\n\n  card: {\n    width: '480px',\n    maxWidth: '100%',\n    height: 'fit-content',\n    ...shorthands.margin('12px', 0)\n  },\n\n  caption: {\n    color: tokens.colorNeutralForeground3\n  },\n\n  icon: {\n    width: '24px',\n    height: '24px'\n  },\n\n  text: {\n    ...shorthands.margin(0)\n  },\n\n  groupPanel: {\n    ...shorthands.margin('12px', '24px')\n  },\n\n  termPanel: {\n    ...shorthands.margin('12px', '36px')\n  }\n});\n\nconst GroupTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [groups] = React.useState<any[]>(props.dataContext.value);\n\n  return (\n    <Accordion collapsible>\n      {groups.map(group => (\n        <AccordionItem value={group.id} key={group.id}>\n          <AccordionHeader icon={<TagMultipleRegular />}>{group.displayName}</AccordionHeader>\n          <AccordionPanel className={styles.groupPanel}>\n            <Get resource={`termStore/groups/${group.id}/sets`} version=\"beta\">\n              <SetTemplate template=\"default\" />\n            </Get>\n          </AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};\n\nconst SetTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [sets] = React.useState<any[]>(props.dataContext.value);\n  const [selectedTerm, setSelectedTerm] = React.useState<TermStore.Term | null>(null);\n\n  return (\n    <Accordion collapsible onToggle={() => setSelectedTerm(null)}>\n      {sets.map(set => (\n        <AccordionItem value={set.id} key={set.id}>\n          <AccordionHeader>{set.localizedNames[0].name}</AccordionHeader>\n          <AccordionPanel className={styles.termPanel}>\n            <TaxonomyPicker termsetId={set.id} selectionChanged={e => setSelectedTerm(e.detail)} />\n            {selectedTerm && (\n              <Card className={styles.card}>\n                <CardHeader\n                  image={<TagRegular className={styles.icon} />}\n                  header={<Text weight=\"semibold\">{selectedTerm.labels?.[0].name}</Text>}\n                  description={<Caption1 className={styles.caption}>{selectedTerm.id}</Caption1>}\n                />\n\n                {selectedTerm.descriptions?.length! > 0 && (\n                  <p className={styles.text}>{selectedTerm.descriptions?.[0].description}</p>\n                )}\n              </Card>\n            )}\n          </AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};\n","import * as React from 'react';\nimport { PageHeader } from '../components/PageHeader';\nimport { TaxonomyExplorer } from './Taxonomy/TaxonomyExplorer';\n\nconst TaxonomyPage: React.FunctionComponent = () => {\n  return (\n    <>\n      <PageHeader\n        title={'Taxonomy Explorer'}\n        description={'Use this taxonomy explorer to see all term groups, term sets and terms available'}\n      ></PageHeader>\n      <TaxonomyExplorer />\n    </>\n  );\n};\n\nexport default TaxonomyPage;\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html } from 'lit';\nimport { MgtBaseTaskComponent } from '@microsoft/mgt-element';\nimport { styles } from './mgt-spinner-css';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport const registerMgtSpinnerComponent = () => registerComponent('spinner', MgtSpinner);\n\n/**\n * Custom Component used to handle loading state in components.\n *\n * @export MgtSpinner\n * @class MgtSpinner\n * @extends {MgtBaseComponent}\n */\nexport class MgtSpinner extends MgtBaseTaskComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * user the `css` tag function.\n   */\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * Render the loading spinner\n   *\n   * @returns\n   * @memberof MgtSpinner\n   */\n  public render() {\n    return html`<fluent-progress-ring title=\"spinner\"></fluent-progress-ring>`;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n"],"names":["strings","termsetIdRequired","noTermsFound","comboboxPlaceholder","loadingMessage","styles","css","_templateObject","_taggedTemplateLiteral","MgtTaxonomyPicker","_MgtTemplatedTaskComp","_inherits","_super","_createSuper","_this","_classCallCheck","call","version","position","selectedTerm","cacheEnabled","cacheInvalidationPeriod","renderLoading","terms","renderContent","renderTemplate","mgtHtml","error","renderError","noTerms","renderNoData","_a","length","renderTaxonomyPicker","renderGet","html","_templateObject2","placeholder","_createClass","key","get","value","arguments","undefined","this","clearState","_templateObject3","_this2","_templateObject4","disabled","map","term","renderTaxonomyPickerItem","_this3","selected","defaultSelectedTermId","id","_templateObject5","e","handleClick","labels","name","termsetId","_templateObject6","resource","concat","termId","siteId","_templateObject7","changedProperties","_this4","_get","_getPrototypeOf","prototype","renderRoot","addEventListener","handleDataChange","_this5","detail","locale","toLowerCase","response","item","label","find","l","languageTag","_toConsumableArray","filter","fireCustomEvent","MgtTemplatedTaskComponent","__decorate","property","attribute","type","String","converter","Object","Boolean","Number","state","TaxonomyPicker","wrapMgt","registerFluentComponents","fluentCombobox","fluentOption","registerMgtSpinnerComponent","registerMgtGetComponent","registerComponent","TaxonomyExplorer","_jsx","_Fragment","children","Get","GroupTemplate","template","useStyles","makeStyles","main","_objectSpread","shorthands","gap","display","flexDirection","flexWrap","title","margin","description","card","width","maxWidth","height","caption","color","tokens","colorNeutralForeground3","icon","text","groupPanel","termPanel","props","_React$useState","React","dataContext","groups","_slicedToArray","Accordion","collapsible","group","_jsxs","AccordionItem","AccordionHeader","TagMultipleRegular","displayName","AccordionPanel","className","SetTemplate","_React$useState3","sets","_React$useState5","_React$useState6","setSelectedTerm","onToggle","set","_selectedTerm$labels","_selectedTerm$descrip","_selectedTerm$descrip2","localizedNames","selectionChanged","Card","CardHeader","image","TagRegular","header","Text","weight","Caption1","descriptions","PageHeader","MgtSpinner","_MgtBaseTaskComponent","apply","MgtBaseTaskComponent"],"sourceRoot":""}