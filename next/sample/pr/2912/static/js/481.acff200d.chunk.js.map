{"version":3,"file":"static/js/481.acff200d.chunk.js","mappings":"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","sources":["components/Messages.tsx","components/Loading.tsx","pages/OutlookPage.tsx","../../../packages/mgt-components/dist/es6/components/sub-components/mgt-spinner/src/components/sub-components/mgt-spinner/mgt-spinner-css.ts","../../../packages/mgt-components/dist/es6/components/sub-components/mgt-spinner/src/components/sub-components/mgt-spinner/mgt-spinner.ts","../../../packages/mgt-react/src/generated/get.ts","../../../node_modules/lit-html/src/directive-helpers.ts","../../../node_modules/lit-html/src/directives/repeat.ts"],"sourcesContent":["import { MgtTemplateProps, Person, PersonCardInteraction, PersonViewType } from '@microsoft/mgt-react';\nimport { makeStyles, mergeClasses, shorthands } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  email: {\n    boxShadow: 'var(--box-shadow)',\n    ...shorthands.padding('10px'),\n    ...shorthands.margin('8px'),\n    ':hover': {\n      borderLeftWidth: '4px',\n      borderLeftColor: 'var(--input-border-color--hover)',\n      borderLeftStyle: 'solid',\n      paddingLeft: '6px'\n    },\n    'mgt-person': {\n      '--font-size': '12px',\n      '--person-avatar-size': '16px'\n    }\n  },\n\n  link: {\n    color: 'var(--color-sub1)',\n    textDecorationLine: 'none'\n  },\n\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n\n  subject: {\n    color: 'var(--color-sub1)',\n    fontSize: '14px',\n    ...shorthands.gridArea('1 / 1 / auto / 3'),\n    ...shorthands.margin('0')\n  },\n\n  title: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: '4px',\n    color: 'var(--color-sub1)'\n  },\n\n  date: {\n    fontSize: '12px',\n    paddingLeft: '4px',\n    float: 'right'\n  },\n\n  body: {\n    fontSize: '13px',\n    textOverflow: 'ellipsis',\n    wordWrap: 'break-word',\n    ...shorthands.overflow('hidden'),\n    maxHeight: '2.8em',\n    lineHeight: '1.4em',\n    color: 'var(--color-sub2)'\n  },\n\n  emptyBody: {\n    fontStyle: 'italic'\n  }\n});\n\nexport function Messages(props: MgtTemplateProps) {\n  const styles = useStyles();\n  const email = props.dataContext;\n  return (\n    <div className={styles.email}>\n      <a className={styles.link} href={email.webLink} target=\"_blank\" rel=\"noreferrer\">\n        <div className={styles.header}>\n          <div>\n            <Person\n              personQuery={email.sender.emailAddress.address}\n              view={PersonViewType.oneline}\n              personCardInteraction={PersonCardInteraction.hover}\n            />\n          </div>\n        </div>\n        <div className={styles.title}>\n          <h3 className={styles.subject}>{email.subject}</h3>\n          <span className={styles.date}>{new Date(email.receivedDateTime).toLocaleDateString()}</span>\n        </div>\n        {email.bodyPreview ?? <div className={styles.body}>{email.bodyPreview}</div>}\n        {!email.bodyPreview ?? <div className={mergeClasses(styles.body, styles.emptyBody)}>...</div>}\n      </a>\n    </div>\n  );\n}\n","import * as React from 'react';\nimport { MgtTemplateProps, Spinner } from '@microsoft/mgt-react';\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 'calc(100vh - 300px)'\n  },\n  message: {\n    paddingLeft: '10px'\n  }\n});\n\nexport interface ILoadingProps extends MgtTemplateProps {\n  message?: string;\n}\n\nexport const Loading: React.FunctionComponent<ILoadingProps> = (props: ILoadingProps) => {\n  const styles = useStyles();\n  return (\n    <div className={styles.root}>\n      <Spinner />\n      <div className={styles.message}>\n        <span>{props.message || 'Loading...'}</span>\n      </div>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { PageHeader } from '../components/PageHeader';\nimport { Agenda, Get } from '@microsoft/mgt-react';\nimport { Messages } from '../components/Messages';\nimport { Loading } from '../components/Loading';\nimport {\n  SelectTabData,\n  SelectTabEvent,\n  Tab,\n  TabList,\n  TabValue,\n  shorthands,\n  makeStyles,\n  mergeClasses\n} from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  panels: {\n    ...shorthands.padding('10px')\n  },\n  main: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'nowrap',\n    width: '70%'\n  },\n  side: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'nowrap',\n    width: '30%'\n  }\n});\n\nconst OutlookPage: React.FunctionComponent = () => {\n  const styles = useStyles();\n  const [selectedTab, setSelectedTab] = React.useState<TabValue>('focused');\n\n  const onTabSelect = (event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedTab(data.value);\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={'Mail and Calendar'}\n        description={'Stay productive and navigate your emails and your calendar appointments'}\n      ></PageHeader>\n\n      <TabList selectedValue={selectedTab} onTabSelect={onTabSelect} className={styles.container}>\n        <Tab value=\"focused\">Focused</Tab>\n        <Tab value=\"others\">Others</Tab>\n      </TabList>\n      <div className={styles.container}>\n        <div className={mergeClasses(styles.panels, styles.main)}>\n          {selectedTab === 'focused' && (\n            <Get\n              resource=\"/me/mailFolders/Inbox/messages?$orderby=InferenceClassification, createdDateTime DESC&filter=InferenceClassification eq 'Focused'\"\n              maxPages={3}\n              scopes={['Mail.Read']}\n            >\n              <Messages template=\"value\"></Messages>\n              <Loading template=\"loading\" message={'Loading your focused inbox...'}></Loading>\n            </Get>\n          )}\n          {selectedTab === 'others' && (\n            <Get\n              resource=\"/me/mailFolders/Inbox/messages?$orderby=InferenceClassification, createdDateTime DESC&filter=InferenceClassification eq 'Other'\"\n              maxPages={3}\n              scopes={['Mail.Read']}\n            >\n              <Messages template=\"value\"></Messages>\n              <Loading template=\"loading\" message={'Loading your other inbox...'}></Loading>\n            </Get>\n          )}\n        </div>\n        <div className={styles.side}>\n          <Agenda groupByDay={true}></Agenda>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default OutlookPage;\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html } from 'lit';\nimport { MgtBaseTaskComponent } from '@microsoft/mgt-element';\nimport { styles } from './mgt-spinner-css';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport const registerMgtSpinnerComponent = () => registerComponent('spinner', MgtSpinner);\n\n/**\n * Custom Component used to handle loading state in components.\n *\n * @export MgtSpinner\n * @class MgtSpinner\n * @extends {MgtBaseComponent}\n */\nexport class MgtSpinner extends MgtBaseTaskComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * user the `css` tag function.\n   */\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * Render the loading spinner\n   *\n   * @returns\n   * @memberof MgtSpinner\n   */\n  public render() {\n    return html`<fluent-progress-ring title=\"spinner\"></fluent-progress-ring>`;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\nimport {\n  insertPart,\n  getCommittedValue,\n  removePart,\n  setCommittedValue,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map<unknown, number>();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\nclass RepeatDirective extends Directive {\n  private _itemKeys?: unknown[];\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('repeat() can only be used in text expressions');\n    }\n  }\n\n  private _getValuesAndKeys<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    let keyFn: KeyFn<T> | undefined;\n    if (template === undefined) {\n      template = keyFnOrTemplate;\n    } else if (keyFnOrTemplate !== undefined) {\n      keyFn = keyFnOrTemplate as KeyFn<T>;\n    }\n    const keys = [];\n    const values = [];\n    let index = 0;\n    for (const item of items) {\n      keys[index] = keyFn ? keyFn(item, index) : index;\n      values[index] = template!(item, index);\n      index++;\n    }\n    return {\n      values,\n      keys,\n    };\n  }\n\n  render<T>(items: Iterable<T>, template: ItemTemplate<T>): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;\n  }\n\n  override update<T>(\n    containerPart: ChildPart,\n    [items, keyFnOrTemplate, template]: [\n      Iterable<T>,\n      KeyFn<T> | ItemTemplate<T>,\n      ItemTemplate<T>\n    ]\n  ) {\n    // Old part & key lists are retrieved from the last update (which may\n    // be primed by hydration)\n    const oldParts = getCommittedValue(\n      containerPart\n    ) as Array<ChildPart | null>;\n    const {values: newValues, keys: newKeys} = this._getValuesAndKeys(\n      items,\n      keyFnOrTemplate,\n      template\n    );\n\n    // We check that oldParts, the committed value, is an Array as an\n    // indicator that the previous value came from a repeat() call. If\n    // oldParts is not an Array then this is the first render and we return\n    // an array for lit-html's array handling to render, and remember the\n    // keys.\n    if (!Array.isArray(oldParts)) {\n      this._itemKeys = newKeys;\n      return newValues;\n    }\n\n    // In SSR hydration it's possible for oldParts to be an array but for us\n    // to not have item keys because the update() hasn't run yet. We set the\n    // keys to an empty array. This will cause all oldKey/newKey comparisons\n    // to fail and execution to fall to the last nested brach below which\n    // reuses the oldPart.\n    const oldKeys = (this._itemKeys ??= []);\n\n    // New part list will be built up as we go (either reused from\n    // old parts or created for new keys in this update). This is\n    // saved in the above cache at the end of the update.\n    const newParts: ChildPart[] = [];\n\n    // Maps from key to index for current and previous update; these\n    // are generated lazily only when needed as a performance\n    // optimization, since they are only required for multiple\n    // non-contiguous changes in the list, which are less common.\n    let newKeyToIndexMap!: Map<unknown, number>;\n    let oldKeyToIndexMap!: Map<unknown, number>;\n\n    // Head and tail pointers to old parts and new values\n    let oldHead = 0;\n    let oldTail = oldParts.length - 1;\n    let newHead = 0;\n    let newTail = newValues.length - 1;\n\n    // Overview of O(n) reconciliation algorithm (general approach\n    // based on ideas found in ivi, vue, snabbdom, etc.):\n    //\n    // * We start with the list of old parts and new values (and\n    //   arrays of their respective keys), head/tail pointers into\n    //   each, and we build up the new list of parts by updating\n    //   (and when needed, moving) old parts or creating new ones.\n    //   The initial scenario might look like this (for brevity of\n    //   the diagrams, the numbers in the array reflect keys\n    //   associated with the old parts or new values, although keys\n    //   and parts/values are actually stored in parallel arrays\n    //   indexed using the same head/tail pointers):\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n    //                                      item order\n    //      newHead ^                 ^ newTail\n    //\n    // * Iterate old & new lists from both sides, updating,\n    //   swapping, or removing parts at the head/tail locations\n    //   until neither head nor tail can move.\n    //\n    // * Example below: keys at head pointers match, so update old\n    //   part 0 in-place (no need to move it) and record part 0 in\n    //   the `newParts` list. The last thing we do is advance the\n    //   `oldHead` and `newHead` pointers (will be reflected in the\n    //   next diagram).\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //      newHead ^                 ^ newTail\n    //\n    // * Example below: head pointers don't match, but tail\n    //   pointers do, so update part 6 in place (no need to move\n    //   it), and record part 6 in the `newParts` list. Last,\n    //   advance the `oldTail` and `oldHead` pointers.\n    //\n    //         oldHead v              v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n    //                                      & newTail\n    //         newHead ^              ^ newTail\n    //\n    // * If neither head nor tail match; next check if one of the\n    //   old head/tail items was removed. We first need to generate\n    //   the reverse map of new keys to index (`newKeyToIndexMap`),\n    //   which is done once lazily as a performance optimization,\n    //   since we only hit this case if multiple non-contiguous\n    //   changes were made. Note that for contiguous removal\n    //   anywhere in the list, the head and tails would advance\n    //   from either end and pass each other before we get to this\n    //   case and removals would be handled in the final while loop\n    //   without needing to generate the map.\n    //\n    // * Example below: The key at `oldTail` was removed (no longer\n    //   in the `newKeyToIndexMap`), so remove that part from the\n    //   DOM and advance just the `oldTail` pointer.\n    //\n    //         oldHead v           v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n    //         newHead ^           ^ newTail\n    //\n    // * Once head and tail cannot move, any mismatches are due to\n    //   either new or moved items; if a new key is in the previous\n    //   \"old key to old index\" map, move the old part to the new\n    //   location, otherwise create and insert a new part. Note\n    //   that when moving an old part we null its position in the\n    //   oldParts array if it lies between the head and tail so we\n    //   know to skip it when the pointers get there.\n    //\n    // * Example below: neither head nor tail match, and neither\n    //   were removed; so find the `newHead` key in the\n    //   `oldKeyToIndexMap`, and move that old part's DOM into the\n    //   next head position (before `oldParts[oldHead]`). Last,\n    //   null the part in the `oldPart` array since it was\n    //   somewhere in the remaining oldParts still to be scanned\n    //   (between the head and tail pointers) so that we know to\n    //   skip that old part on future iterations.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n    //                                      newHead\n    //         newHead ^           ^ newTail\n    //\n    // * Note that for moves/insertions like the one above, a part\n    //   inserted at the head pointer is inserted before the\n    //   current `oldParts[oldHead]`, and a part inserted at the\n    //   tail pointer is inserted before `newParts[newTail+1]`. The\n    //   seeming asymmetry lies in the fact that new parts are\n    //   moved into place outside in, so to the right of the head\n    //   pointer are old parts, and to the right of the tail\n    //   pointer are new parts.\n    //\n    // * We always restart back from the top of the algorithm,\n    //   allowing matching and simple updates in place to\n    //   continue...\n    //\n    // * Example below: the head pointers once again match, so\n    //   simply update part 1 and record it in the `newParts`\n    //   array.  Last, advance both head pointers.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //            newHead ^        ^ newTail\n    //\n    // * As mentioned above, items that were moved as a result of\n    //   being stuck (the final else clause in the code below) are\n    //   marked with null, so we always advance old pointers over\n    //   these so we're comparing the next actual old value on\n    //   either end.\n    //\n    // * Example below: `oldHead` is null (already placed in\n    //   newParts), so advance `oldHead`.\n    //\n    //            oldHead v     v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n    //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //               newHead ^     ^ newTail\n    //\n    // * Note it's not critical to mark old parts as null when they\n    //   are moved from head to tail or tail to head, since they\n    //   will be outside the pointer range and never visited again.\n    //\n    // * Example below: Here the old tail key matches the new head\n    //   key, so the part at the `oldTail` position and move its\n    //   DOM to the new head position (before `oldParts[oldHead]`).\n    //   Last, advance `oldTail` and `newHead` pointers.\n    //\n    //               oldHead v  v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n    //                                     advance oldTail & newHead\n    //               newHead ^     ^ newTail\n    //\n    // * Example below: Old and new head keys match, so update the\n    //   old head part in place, and advance the `oldHead` and\n    //   `newHead` pointers.\n    //\n    //               oldHead v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n    //                                      newHead\n    //                  newHead ^  ^ newTail\n    //\n    // * Once the new or old pointers move past each other then all\n    //   we have left is additions (if old list exhausted) or\n    //   removals (if new list exhausted). Those are handled in the\n    //   final while loops at the end.\n    //\n    // * Example below: `oldHead` exceeded `oldTail`, so we're done\n    //   with the main loop.  Create the remaining part and insert\n    //   it at the new head position, and the update is complete.\n    //\n    //                   (oldHead > oldTail)\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //                     newHead ^ newTail\n    //\n    // * Note that the order of the if/else clauses is not\n    //   important to the algorithm, as long as the null checks\n    //   come first (to ensure we're always working on valid old\n    //   parts) and that the final else clause comes last (since\n    //   that's where the expensive moves occur). The order of\n    //   remaining clauses is is just a simple guess at which cases\n    //   will be most common.\n    //\n    // * Note, we could calculate the longest\n    //   increasing subsequence (LIS) of old items in new position,\n    //   and only move those not in the LIS set. However that costs\n    //   O(nlogn) time and adds a bit more code, and only helps\n    //   make rare types of mutations require fewer moves. The\n    //   above handles removes, adds, reversal, swaps, and single\n    //   moves of contiguous items in linear time, in the minimum\n    //   number of moves. As the number of multiple moves where LIS\n    //   might help approaches a random shuffle, the LIS\n    //   optimization becomes less helpful, so it seems not worth\n    //   the code at this point. Could reconsider if a compelling\n    //   case arises.\n\n    while (oldHead <= oldTail && newHead <= newTail) {\n      if (oldParts[oldHead] === null) {\n        // `null` means old part at head has already been used\n        // below; skip\n        oldHead++;\n      } else if (oldParts[oldTail] === null) {\n        // `null` means old part at tail has already been used\n        // below; skip\n        oldTail--;\n      } else if (oldKeys[oldHead] === newKeys[newHead]) {\n        // Old head matches new head; update in place\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newHead]\n        );\n        oldHead++;\n        newHead++;\n      } else if (oldKeys[oldTail] === newKeys[newTail]) {\n        // Old tail matches new tail; update in place\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newTail]\n        );\n        oldTail--;\n        newTail--;\n      } else if (oldKeys[oldHead] === newKeys[newTail]) {\n        // Old head matches new tail; update and move to new tail\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newTail]\n        );\n        insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]!);\n        oldHead++;\n        newTail--;\n      } else if (oldKeys[oldTail] === newKeys[newHead]) {\n        // Old tail matches new head; update and move to new head\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newHead]\n        );\n        insertPart(containerPart, oldParts[oldHead]!, oldParts[oldTail]!);\n        oldTail--;\n        newHead++;\n      } else {\n        if (newKeyToIndexMap === undefined) {\n          // Lazily generate key-to-index maps, used for removals &\n          // moves below\n          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n        }\n        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n          // Old head is no longer in new list; remove\n          removePart(oldParts[oldHead]!);\n          oldHead++;\n        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n          // Old tail is no longer in new list; remove\n          removePart(oldParts[oldTail]!);\n          oldTail--;\n        } else {\n          // Any mismatches at this point are due to additions or\n          // moves; see if we have an old part we can reuse and move\n          // into place\n          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n          const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n          if (oldPart === null) {\n            // No old part for this value; create a new one and\n            // insert it\n            const newPart = insertPart(containerPart, oldParts[oldHead]!);\n            setChildPartValue(newPart, newValues[newHead]);\n            newParts[newHead] = newPart;\n          } else {\n            // Reuse old part\n            newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);\n            insertPart(containerPart, oldParts[oldHead]!, oldPart);\n            // This marks the old part as having been used, so that\n            // it will be skipped in the first two checks above\n            oldParts[oldIndex as number] = null;\n          }\n          newHead++;\n        }\n      }\n    }\n    // Add parts for any remaining new values\n    while (newHead <= newTail) {\n      // For all remaining additions, we insert before last new\n      // tail, since old pointers are no longer valid\n      const newPart = insertPart(containerPart, newParts[newTail + 1]);\n      setChildPartValue(newPart, newValues[newHead]);\n      newParts[newHead++] = newPart;\n    }\n    // Remove any remaining unused old parts\n    while (oldHead <= oldTail) {\n      const oldPart = oldParts[oldHead++];\n      if (oldPart !== null) {\n        removePart(oldPart);\n      }\n    }\n\n    // Save order of new parts for next round\n    this._itemKeys = newKeys;\n    // Directly set part value, bypassing it's dirty-checking\n    setCommittedValue(containerPart, newParts);\n    return noChange;\n  }\n}\n\nexport interface RepeatDirectiveFn {\n  <T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ): unknown;\n  <T>(items: Iterable<T>, template: ItemTemplate<T>): unknown;\n  <T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): unknown;\n}\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * The `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n *\n * ```js\n * html`\n *   <ol>\n *     ${repeat(this.items, (item) => item.id, (item, index) => {\n *       return html`<li>${index}: ${item.name}</li>`;\n *     })}\n *   </ol>\n * `\n * ```\n *\n * **Important**: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive(RepeatDirective) as RepeatDirectiveFn;\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RepeatDirective};\n"],"names":["useStyles","makeStyles","email","_objectSpread","boxShadow","shorthands","padding","margin","borderLeftWidth","borderLeftColor","borderLeftStyle","paddingLeft","link","color","textDecorationLine","header","display","justifyContent","subject","fontSize","gridArea","title","marginBottom","date","float","body","textOverflow","wordWrap","overflow","maxHeight","lineHeight","emptyBody","fontStyle","Messages","props","_email$bodyPreview","_email$bodyPreview2","styles","dataContext","_jsx","className","children","_jsxs","href","webLink","target","rel","Person","personQuery","sender","emailAddress","address","view","PersonViewType","oneline","personCardInteraction","PersonCardInteraction","hover","Date","receivedDateTime","toLocaleDateString","bodyPreview","mergeClasses","root","alignItems","height","message","Loading","Spinner","container","flexDirection","panels","main","flexWrap","width","side","_React$useState","React","_React$useState2","_slicedToArray","selectedTab","setSelectedTab","_Fragment","PageHeader","description","TabList","selectedValue","onTabSelect","event","data","value","Tab","Get","resource","maxPages","scopes","template","Agenda","groupByDay","css","_templateObject","_taggedTemplateLiteral","registerMgtSpinnerComponent","registerComponent","MgtSpinner","_MgtBaseTaskComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","html","get","MgtBaseTaskComponent","wrapMgt","registerMgtGetComponent","t","o","D","s","document","createComment","r","i","n","e","_$AA","parentNode","l","_$AB","insertBefore","c","options","_n$_$AQ","_n","nextSibling","_$AM","_$AQ","call","_$AP","_$AU","v","length","undefined","_$AI","u","h","_o$_$AP","remove","Map","set","_t","_class","_this","type","CHILD","Error","_possibleConstructorReturn","_step","_iterator","_createForOfIteratorHelper","done","err","f","values","keys","this","ht","_ref","_this$dt","_ref2","d","_$AH","_this$ht","p","a","Array","isArray","dt","m","y","x","j","k","w","has"],"sourceRoot":""}