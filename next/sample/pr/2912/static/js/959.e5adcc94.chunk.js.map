{"version":3,"file":"static/js/959.e5adcc94.chunk.js","mappings":"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","sources":["components/Loading.tsx","components/Messages.tsx","../../../packages/mgt-components/dist/es6/components/mgt-people/src/components/mgt-people/mgt-people-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-people/src/components/mgt-people/mgt-people.ts","../../../packages/mgt-components/dist/es6/components/mgt-agenda/src/components/mgt-agenda/mgt-agenda-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-agenda/src/components/mgt-agenda/mgt-agenda.graph.ts","../../../packages/mgt-components/dist/es6/components/mgt-agenda/src/components/mgt-agenda/mgt-agenda.ts","../../../packages/mgt-react/src/generated/agenda.ts","../../../packages/mgt-react/src/generated/get.ts","../../../packages/mgt-react/src/generated/spinner.ts"],"sourcesContent":["import * as React from 'react';\nimport { MgtTemplateProps, Spinner } from '@microsoft/mgt-react';\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 'calc(100vh - 300px)'\n  },\n  message: {\n    paddingLeft: '10px'\n  }\n});\n\nexport interface ILoadingProps extends MgtTemplateProps {\n  message?: string;\n}\n\nexport const Loading: React.FunctionComponent<ILoadingProps> = (props: ILoadingProps) => {\n  const styles = useStyles();\n  return (\n    <div className={styles.root}>\n      <Spinner />\n      <div className={styles.message}>\n        <span>{props.message || 'Loading...'}</span>\n      </div>\n    </div>\n  );\n};\n","import { MgtTemplateProps, Person, PersonCardInteraction, PersonViewType } from '@microsoft/mgt-react';\nimport { makeStyles, mergeClasses, shorthands } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  email: {\n    boxShadow: 'var(--box-shadow)',\n    ...shorthands.padding('10px'),\n    ...shorthands.margin('8px'),\n    ':hover': {\n      borderLeftWidth: '4px',\n      borderLeftColor: 'var(--input-border-color--hover)',\n      borderLeftStyle: 'solid',\n      paddingLeft: '6px'\n    },\n    '& mgt-person': {\n      '--font-size': '12px',\n      '--person-avatar-size': '16px'\n    }\n  },\n\n  link: {\n    color: 'var(--color-sub1)',\n    textDecorationLine: 'none'\n  },\n\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n\n  subject: {\n    color: 'var(--color-sub1)',\n    fontSize: '14px',\n    ...shorthands.gridArea('1 / 1 / auto / 3'),\n    ...shorthands.margin('0')\n  },\n\n  title: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: '4px',\n    color: 'var(--color-sub1)'\n  },\n\n  date: {\n    fontSize: '12px',\n    paddingLeft: '4px',\n    float: 'right'\n  },\n\n  body: {\n    fontSize: '13px',\n    textOverflow: 'ellipsis',\n    wordWrap: 'break-word',\n    ...shorthands.overflow('hidden'),\n    maxHeight: '2.8em',\n    lineHeight: '1.4em',\n    color: 'var(--color-sub2)'\n  },\n\n  emptyBody: {\n    fontStyle: 'italic'\n  }\n});\n\nexport function Messages(props: MgtTemplateProps) {\n  const styles = useStyles();\n  const email = props.dataContext;\n  return (\n    <div className={styles.email}>\n      <a className={styles.link} href={email.webLink} target=\"_blank\" rel=\"noreferrer\">\n        <div className={styles.header}>\n          <div>\n            <Person\n              personQuery={email.sender?.emailAddress?.address}\n              view={PersonViewType.oneline}\n              personCardInteraction={PersonCardInteraction.hover}\n            />\n          </div>\n        </div>\n        <div className={styles.title}>\n          <h3 className={styles.subject}>{email.subject}</h3>\n          <span className={styles.date}>{new Date(email.receivedDateTime).toLocaleDateString()}</span>\n        </div>\n        {email.bodyPreview ?? <div className={styles.body}>{email.bodyPreview}</div>}\n        {!email.bodyPreview ?? <div className={mergeClasses(styles.body, styles.emptyBody)}>...</div>}\n      </a>\n    </div>\n  );\n}\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host .people-list{list-style:none;margin:var(--people-list-margin,8px 4px 8px 8px);padding:unset;display:flex;align-items:center;gap:var(--people-avatar-gap,4px)}:host .people-list .people-person{--person-avatar-size:var(--people-person-avatar-size, 24px)}:host .overflow span{vertical-align:middle;color:var(--people-overflow-font-color,currentColor);font-size:var(--people-overflow-font-size,12px);font-weight:var(--people-overflow-font-weight,400)}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { html, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { getPeople, getPeopleFromResource, PersonType } from '../../graph/graph.people';\nimport { getUsersPresenceByPeople } from '../../graph/graph.presence';\nimport { findGroupMembers, getUsersForPeopleQueries, getUsersForUserIds } from '../../graph/graph.user';\nimport { IDynamicPerson } from '../../graph/types';\nimport { Providers, ProviderState, MgtTemplatedTaskComponent, mgtHtml } from '@microsoft/mgt-element';\nimport '../../styles/style-helper';\nimport { PersonCardInteraction } from './../PersonCardInteraction';\nimport { styles } from './mgt-people-css';\nimport { MgtPerson, registerMgtPersonComponent } from '../mgt-person/mgt-person';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport { PersonCardInteraction } from './../PersonCardInteraction';\n\n/**\n * web component to display a group of people or contacts by using their photos or initials.\n *\n * @export\n * @class MgtPeople\n * @extends {MgtTemplatedTaskComponent}\n *\n * @cssprop --people-list-margin- {String} the margin around the list of people. Default is 8px 4px 8px 8px.\n * @cssprop --people-avatar-gap - {String} the gap between the people in the list. Default is 4px.\n * @cssprop --people-overflow-font-color - {Color} the color of the overflow text.\n * @cssprop --people-overflow-font-size - {String} the text color of the overflow text. Default is 12px.\n * @cssprop --people-overflow-font-weight - {String} the font weight of the overflow text. Default is 400.\n * @cssprop --people-person-avatar-size - {Length} the size of the avatar. Default is 24px.\n */\n\nexport const registerMgtPeopleComponent = () => {\n  registerMgtPersonComponent();\n  registerComponent('people', MgtPeople);\n};\n\nexport class MgtPeople extends MgtTemplatedTaskComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  /**\n   * determines if agenda events come from specific group\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'group-id',\n    type: String\n  })\n  public groupId: string;\n\n  /**\n   * user id array\n   *\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'user-ids',\n    converter: (value, _type) => {\n      return value.split(',').map(v => v.trim());\n    }\n  })\n  public userIds: string[];\n\n  /**\n   * containing array of people used in the component.\n   *\n   * @type {IDynamicPerson[]}\n   */\n  @property({\n    attribute: 'people',\n    type: Object\n  })\n  public people: IDynamicPerson[];\n\n  /**\n   * allows developer to define queries of people for component\n   *\n   * @type {string[]}\n   */\n\n  @property({\n    attribute: 'people-queries',\n    converter: (value, _type) => {\n      return value.split(',').map(v => v.trim());\n    }\n  })\n  public peopleQueries: string[];\n\n  /**\n   * developer determined max people shown in component\n   *\n   * @type {number}\n   */\n  @property({\n    attribute: 'show-max',\n    type: Number\n  })\n  public showMax: number;\n\n  /**\n   * determines if person component renders presence\n   *\n   * @type {boolean}\n   */\n  @property({\n    attribute: 'show-presence',\n    type: Boolean\n  })\n  public showPresence: boolean;\n\n  /**\n   * Sets how the person-card is invoked\n   * Set to PersonCardInteraction.none to not show the card\n   *\n   * @type {PersonCardInteraction}\n   * @memberof MgtPerson\n   */\n  @property({\n    attribute: 'person-card',\n    converter: (value, _type) => {\n      value = value.toLowerCase();\n      if (typeof PersonCardInteraction[value] === 'undefined') {\n        return PersonCardInteraction.hover;\n      } else {\n        return PersonCardInteraction[value] as PersonCardInteraction;\n      }\n    }\n  })\n  public personCardInteraction: PersonCardInteraction = PersonCardInteraction.hover;\n\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'resource',\n    type: String\n  })\n  public resource: string;\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'v1.0';\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtPeople\n   */\n  @property({\n    attribute: 'scopes',\n    converter: value => {\n      return value ? value.toLowerCase().split(',') : null;\n    },\n    reflect: true\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Fallback when no user is found\n   *\n   * @type {IDynamicPerson[]}\n   */\n  @property({\n    attribute: 'fallback-details',\n    type: Array\n  })\n  public fallbackDetails: IDynamicPerson[];\n\n  /**\n   * Get the scopes required for people\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtPeople\n   */\n  public static get requiredScopes(): string[] {\n    return [\n      ...new Set([\n        'user.read.all',\n        'people.read',\n        'user.readbasic.all',\n        'presence.read.all',\n        'contacts.read',\n        ...MgtPerson.requiredScopes\n      ])\n    ];\n  }\n\n  private _peoplePresence: Record<string, MicrosoftGraph.Presence> = {};\n  @state() private _arrowKeyLocation = -1;\n\n  constructor() {\n    super();\n    this.showMax = 3;\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtPeople\n   */\n  protected clearState(): void {\n    this.people = null;\n  }\n\n  protected args(): unknown[] {\n    return [\n      this.providerState,\n      this.groupId,\n      this.userIds,\n      this.peopleQueries,\n      this.showMax,\n      this.resource,\n      this.version,\n      this.fallbackDetails\n    ];\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected renderContent = () => {\n    if (!this.people || this.people.length === 0) {\n      return this.renderNoData();\n    }\n\n    return this.renderTemplate('default', { people: this.people, max: this.showMax }) || this.renderPeople();\n  };\n\n  /**\n   * Render the loading state.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPeople\n   */\n  protected renderLoading = () => {\n    return this.renderTemplate('loading', null) || html``;\n  };\n\n  /**\n   * Render the list of people.\n   *\n   * @protected\n   * @param {*} people\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderPeople(): TemplateResult {\n    const maxPeople = this.people.slice(0, this.showMax).filter(pple => pple);\n    return html`\n      <ul\n        tabindex=\"0\"\n        class=\"people-list\"\n        aria-label=\"people\"\n        @keydown=${this.handleKeyDown}>\n        ${repeat(\n          maxPeople,\n          p => (p.id ? p.id : p.displayName),\n          p => html`\n            <li tabindex=\"-1\" class=\"people-person\">\n              ${this.renderPerson(p)}\n            </li>\n          `\n        )}\n        ${this.people.length > this.showMax ? this.renderOverflow() : null}\n      </ul>\n    `;\n  }\n\n  /**\n   * Render the overflow content to represent any extra people, beyond the max.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderOverflow(): TemplateResult {\n    const extra = this.people.length - this.showMax;\n    return (\n      this.renderTemplate('overflow', {\n        extra,\n        max: this.showMax,\n        people: this.people\n      }) ||\n      html`\n        <li tabindex=\"-1\" aria-label=\"and ${extra} more attendees\" class=\"overflow\"><span>+${extra}</span></li>\n      `\n    );\n  }\n\n  /**\n   * Handles the keypresses on a keyboard for the listed people.\n   *\n   * @param event is a KeyboardEvent.\n   */\n  protected handleKeyDown = (event: KeyboardEvent) => {\n    const peopleContainer: HTMLElement = this.shadowRoot.querySelector('.people-list');\n    let person: HTMLElement;\n    const peopleElements: HTMLCollection = peopleContainer?.children;\n    // Default all tabindex values in li nodes to -1\n    for (const element of peopleElements) {\n      const el: HTMLElement = element as HTMLElement;\n      el.setAttribute('tabindex', '-1');\n      el.blur();\n    }\n\n    const childElementCount = peopleContainer.childElementCount;\n    const keyName = event.key;\n    if (keyName === 'ArrowRight') {\n      this._arrowKeyLocation = (this._arrowKeyLocation + 1 + childElementCount) % childElementCount;\n    } else if (keyName === 'ArrowLeft') {\n      this._arrowKeyLocation = (this._arrowKeyLocation - 1 + childElementCount) % childElementCount;\n    } else if (keyName === 'Tab' || keyName === 'Escape') {\n      this._arrowKeyLocation = -1;\n      peopleContainer.blur();\n    } else if (['Enter', 'space', ' '].includes(keyName)) {\n      if (this.personCardInteraction !== PersonCardInteraction.none) {\n        const personEl = peopleElements[this._arrowKeyLocation] as HTMLElement;\n        const mgtPerson = personEl.querySelector<MgtPerson>('mgt-person');\n        if (mgtPerson) {\n          mgtPerson.showPersonCard();\n        }\n      }\n    }\n\n    if (this._arrowKeyLocation > -1) {\n      person = peopleElements[this._arrowKeyLocation] as HTMLElement;\n      person.setAttribute('tabindex', '1');\n      person.focus();\n    }\n  };\n\n  /**\n   * Render an individual person.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderPerson(person: MicrosoftGraph.User | MicrosoftGraph.Person | MicrosoftGraph.Contact): TemplateResult {\n    let personPresence: MicrosoftGraph.Presence = {\n      // set up default presence\n      activity: 'Offline',\n      availability: 'Offline',\n      id: null\n    };\n    if (this.showPresence && this._peoplePresence) {\n      personPresence = this._peoplePresence[person.id];\n    }\n    const avatarSize = 'small';\n    return (\n      this.renderTemplate('person', { person }, person.id) ||\n      // set image to @ to flag the mgt-person component to\n      // query the image from the graph\n      mgtHtml`\n        <mgt-person\n          class=\"people-person\"\n          .personDetails=${person}\n          .fetchImage=${true}\n          .avatarSize=${avatarSize}\n          .personCardInteraction=${this.personCardInteraction}\n          .showPresence=${this.showPresence}\n          .personPresence=${personPresence}\n          .usage=${'people'}\n        ></mgt-person>\n      `\n    );\n  }\n\n  /**\n   * render the no data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPeople\n   */\n  protected renderNoData(): TemplateResult {\n    return this.renderTemplate('no-data', null) || html``;\n  }\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPeople\n   */\n  protected async loadState() {\n    if (!this.people) {\n      const provider = Providers.globalProvider;\n\n      if (provider && provider.state === ProviderState.SignedIn) {\n        const graph = provider.graph.forComponent(this);\n\n        // populate people\n        if (this.groupId) {\n          this.people = await findGroupMembers(graph, null, this.groupId, this.showMax, PersonType.person);\n        } else if (this.userIds || this.peopleQueries) {\n          this.people = this.userIds\n            ? await getUsersForUserIds(graph, this.userIds, '', '', this.fallbackDetails)\n            : await getUsersForPeopleQueries(graph, this.peopleQueries, this.fallbackDetails);\n        } else if (this.resource) {\n          this.people = await getPeopleFromResource(graph, this.version, this.resource, this.scopes);\n        } else {\n          this.people = await getPeople(graph);\n        }\n\n        // populate presence for people\n        if (this.showPresence) {\n          this._peoplePresence = await getUsersPresenceByPeople(graph, this.people);\n        } else {\n          this._peoplePresence = null;\n        }\n      }\n    }\n  }\n}\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{--card-height:auto;--card-width:99%;background-color:var(--agenda-background-color,transparent)}:host .header{margin:var(--agenda-header-margin,18px 0 12px 10px);font-size:var(--agenda-header-font-size,24px);font-style:normal;font-weight:400;line-height:32px;color:var(--agenda-header-color,var(--neutral-foreground-rest));opacity:.9}:host .agenda,:host .group{display:flex;flex-direction:column;row-gap:var(--agenda-event-row-gap,14px)}:host .agenda>.group:first-child>.header,:host .group>.group:first-child>.header{margin-top:0}:host .agenda .event,:host .group .event{background:var(--agenda-event-background-color,var(--fill-color));border:var(--agenda-event-border,solid 2px transparent);box-shadow:var(--agenda-event-box-shadow,var(--elevation-shadow-card-rest));padding:var(--agenda-event-padding,12px);position:relative;display:flex;flex:1 1 auto;content-visibility:visible;contain:none}:host .agenda .event-container,:host .group .event-container{border-radius:calc(var(--layer-corner-radius) * 1px);padding:1px}:host .agenda .event.narrow,:host .group .event.narrow{display:flex;flex-direction:column;inset:0}:host .agenda .event-time-container,:host .group .event-time-container{font-style:normal;font-weight:600;font-size:12px;color:var(--agenda-event-time-color,var(--neutral-foreground-rest));width:112px;height:16px}:host .agenda .event-time-container.narrow,:host .group .event-time-container.narrow{margin-bottom:1px;width:100%}:host .agenda .event-time,:host .group .event-time{font-size:var(--agenda-event-time-font-size,12px);color:var(--agenda-event-time-color,var(--neutral-foreground-rest));font-weight:600}:host .agenda .event-details-container,:host .group .event-details-container{display:flex;flex-direction:column;position:relative;bottom:8px;top:0;padding-inline-start:32px}:host .agenda .event-details-container.narrow,:host .group .event-details-container.narrow{position:inherit;left:6px;display:flex;flex-direction:column;padding-inline-start:0}:host .agenda .event-subject,:host .group .event-subject{font-style:normal;font-weight:400;font-size:var(--agenda-event-subject-font-size,20px);line-height:28px;color:var(--agenda-event-subject-color,var(--neutral-foreground-rest));mix-blend-mode:normal;position:inherit;bottom:8px}:host .agenda .event-location-container,:host .group .event-location-container{display:inline-flex;flex-direction:row}:host .agenda .event-location-container .event-location,:host .group .event-location-container .event-location{padding-inline-start:3px;font-style:normal;font-weight:400;font-size:var(--agenda-event-location-font-size,12px);line-height:16px;color:var(--agenda-event-location-color,var(--neutral-foreground-rest))}:host .agenda .event-location-container .event-location-loading,:host .group .event-location-container .event-location-loading{width:90px;height:10px;margin:2px 0 0 4px}:host .agenda .event-location-container .event-location-icon,:host .group .event-location-container .event-location-icon{display:inline-flex}:host .agenda .event-location-container .event-location-icon svg,:host .group .event-location-container .event-location-icon svg{position:relative;top:2px;width:12px;height:12px}:host .agenda .event-location-container .event-location-icon svg path,:host .group .event-location-container .event-location-icon svg path{stroke:var(--agenda-event-location-color,var(--neutral-foreground-rest))}:host .agenda .event-location-container .event-location-icon-loading,:host .group .event-location-container .event-location-icon-loading{width:14px;height:14px}:host .agenda .event-location-container .event-attendee-loading,:host .group .event-location-container .event-attendee-loading{width:20px;height:20px;border-radius:10px;margin:0 2px 0 0}:host .agenda .event-attendees,:host .group .event-attendees{--list-margin:8px 0 0 0;--person-avatar-size:20px}fluent-card.event.event-loading{--card-height:90px}:host .event-attendees{--color:$agenda-event-attendees-color}:host fluent-tooltip{width:auto;contain:inline-size}[dir=rtl] :host{direction:rtl}[dir=rtl] .event-time-container{direction:ltr;display:flex;justify-content:flex-end}@media (forced-colors:active) and (prefers-color-scheme:dark){:host .agenda .event-location-container .event-location-icon svg path{stroke:#fff!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host .agenda .event-location-container .event-location-icon svg path{stroke:#000!important}}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphPageIterator, IGraph, prepScopes } from '@microsoft/mgt-element';\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n\nexport const getEventsQueryPageIterator = async (\n  graph: IGraph,\n  query: string,\n  scopes = 'calendars.read'\n): Promise<GraphPageIterator<MicrosoftGraph.Event>> => {\n  const request = graph.api(query).middlewareOptions(prepScopes(scopes)).orderby('start/dateTime');\n\n  return GraphPageIterator.create<MicrosoftGraph.Event>(graph, request);\n};\n\n/**\n * returns Calender events iterator associated with either the logged in user or a specific groupId\n *\n * @param {Date} startDateTime\n * @param {Date} endDateTime\n * @param {string} [groupId]\n * @param {string} preferredTimezone\n * @returns {(Promise<Event[]>)}\n * @memberof Graph\n */\nexport const getEventsPageIterator = async (\n  graph: IGraph,\n  startDateTime: Date,\n  endDateTime: Date,\n  groupId?: string\n): Promise<GraphPageIterator<MicrosoftGraph.Event>> => {\n  const sdt = `startdatetime=${startDateTime.toISOString()}`;\n  const edt = `enddatetime=${endDateTime.toISOString()}`;\n\n  let uri: string;\n\n  if (groupId) {\n    uri = `groups/${groupId}/calendar`;\n  } else {\n    uri = 'me';\n  }\n\n  uri += `/calendarview?${sdt}&${edt}`;\n\n  return getEventsQueryPageIterator(graph, uri);\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { Providers, ProviderState, mgtHtml, MgtTemplatedTaskComponent } from '@microsoft/mgt-element';\nimport '../../styles/style-helper';\nimport '../mgt-person/mgt-person';\nimport { styles } from './mgt-agenda-css';\nimport { getEventsPageIterator, getEventsQueryPageIterator } from './mgt-agenda.graph';\nimport { SvgIcon, getSvg } from '../../utils/SvgHelper';\nimport { MgtPeople, registerMgtPeopleComponent } from '../mgt-people/mgt-people';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentCard } from '@fluentui/web-components';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { registerComponent } from '@microsoft/mgt-element';\n\n/**\n * Web Component which represents events in a user or group calendar.\n *\n * @export\n * @class MgtAgenda\n * @extends {MgtTemplatedComponent}\n *\n * @fires {CustomEvent<MicrosoftGraph.Event>} eventClick - Fired when user click an event\n *\n * @cssprop --event-box-shadow - {String} Event box shadow color and size\n * @cssprop --event-row-gap - {String} The size of the gap between two event elements\n * @cssprop --event-padding - {String} Event padding\n * @cssprop --event-background-color - {Color} Event background color\n * @cssprop --event-border - {String} Event border style\n * @cssprop --agenda-header-margin - {String} Agenda header margin size\n * @cssprop --agenda-header-font-size - {Length} Agenda header font size\n * @cssprop --agenda-header-color - {Color} Agenda header color\n * @cssprop --event-time-font-size - {Length} Event time font size\n * @cssprop --event-time-color - {Color} Event time color\n * @cssprop --event-subject-font-size - {Length} Event subject font size\n * @cssprop --event-subject-color - {Color} Event subject color\n * @cssprop --event-location-font-size - {Length} Event location font size\n * @cssprop --event-location-color - {Color} Event location color\n * @cssprop --event-attendees-color - {Color} Event attendees color\n */\n\nexport const registerMgtAgendaComponent = () => {\n  registerFluentComponents(fluentCard);\n  // register dependent components\n  registerMgtPeopleComponent();\n  // register self\n  registerComponent('agenda', MgtAgenda);\n};\n\nexport class MgtAgenda extends MgtTemplatedTaskComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  /**\n   * stores current date for initial calender selection in events.\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'date',\n    type: String\n  })\n  public date: string;\n\n  /**\n   * determines if agenda events come from specific group\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'group-id',\n    type: String\n  })\n  public groupId: string;\n\n  /**\n   * sets number of days until end date, 3 is the default\n   *\n   * @type {number}\n   */\n  @property({\n    attribute: 'days',\n    type: Number\n  })\n  public days = 3;\n\n  /**\n   * allows developer to specify a different graph query that retrieves events\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'event-query',\n    type: String\n  })\n  public eventQuery: string;\n\n  /**\n   * array containing events from user agenda.\n   *\n   * @type {MicrosoftGraph.Event[]}\n   */\n  @property({\n    attribute: 'events',\n    type: Array,\n    hasChanged: (newVal: [], oldVal: []) => {\n      return newVal !== oldVal;\n    }\n  })\n  public events: MicrosoftGraph.Event[];\n\n  /**\n   * allows developer to define max number of events shown\n   *\n   * @type {number}\n   */\n  @property({\n    attribute: 'show-max',\n    type: Number\n  })\n  public showMax: number;\n\n  /**\n   * allows developer to define agenda to group events by day.\n   *\n   * @type {boolean}\n   */\n  @property({\n    attribute: 'group-by-day',\n    type: Boolean\n  })\n  public groupByDay: boolean;\n\n  /**\n   * allows developer to specify preferred timezone that should be used for\n   * rendering events retrieved from Graph, eg. `America/Los_Angeles`.\n   * By default events are rendered using the current timezone of the\n   * device being used.\n   *\n   * @type {string}\n   */\n  @property({\n    attribute: 'preferred-timezone',\n    type: String\n  })\n  public preferredTimezone: string;\n\n  /**\n   * Get the scopes required for agenda\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtAgenda\n   */\n  public static get requiredScopes(): string[] {\n    return [...new Set(['calendars.read', ...MgtPeople.requiredScopes])];\n  }\n\n  /**\n   * determines width available for agenda component.\n   *\n   * @type {boolean}\n   */\n  @property({ attribute: false }) private _isNarrow: boolean;\n\n  /**\n   * Determines width available if resize is necessary, adds onResize event listener to window\n   *\n   * @memberof MgtAgenda\n   */\n  public connectedCallback() {\n    this._isNarrow = this.offsetWidth < 600;\n    super.connectedCallback();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  /**\n   * Removes onResize event listener from window\n   *\n   * @memberof MgtAgenda\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('resize', this.onResize);\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return a lit-html TemplateResult.\n   * Setting properties inside this method will not trigger the element to update\n   *\n   * @returns\n   * @memberof MgtAgenda\n   */\n  public renderContent = (): TemplateResult => {\n    // No data\n    if (!this.events || this.events.length === 0) {\n      return this.renderNoData();\n    }\n\n    // Prep data\n    const events = this.showMax && this.showMax > 0 ? this.events.slice(0, this.showMax) : this.events;\n\n    // Default template\n    const renderedTemplate = this.renderTemplate('default', { events });\n    if (renderedTemplate) {\n      return renderedTemplate;\n    }\n\n    const agendaClasses = {\n      agenda: true,\n      grouped: this.groupByDay\n    };\n\n    // Render list\n    return html`\n      <div dir=${this.direction} class=\"${classMap(agendaClasses)}\">\n        ${this.groupByDay ? this.renderGroups(events) : this.renderEvents(events)}\n      </div>\n    `;\n  };\n\n  /**\n   * Reloads the component with its current settings and potential new data\n   *\n   * @memberof MgtAgenda\n   */\n  public async reload() {\n    this.events = await this.loadEvents();\n  }\n\n  /**\n   * Render the loading state\n   *\n   * @protected\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderLoading = (): TemplateResult => {\n    return (\n      this.renderTemplate('loading', null) ||\n      html`\n        <fluent-card class=\"event event-loading\">\n          <div class=\"event-time-container\">\n            <div class=\"event-time-loading loading-element\"></div>\n          </div>\n          <div class=\"event-details-container\">\n            <div class=\"event-subject-loading loading-element\"></div>\n            <div class=\"event-location-container\">\n              <div class=\"event-location-icon-loading loading-element\"></div>\n              <div class=\"event-location-loading loading-element\"></div>\n            </div>\n            <div class=\"event-location-container\">\n              <div class=\"event-attendee-loading loading-element\"></div>\n              <div class=\"event-attendee-loading loading-element\"></div>\n              <div class=\"event-attendee-loading loading-element\"></div>\n            </div>\n          </div>\n        </fluent-card>`\n    );\n  };\n\n  /**\n   * Clears state of the component\n   *\n   * @protected\n   * @memberof MgtAgenda\n   */\n  protected clearState(): void {\n    this.events = null;\n  }\n\n  /**\n   * Render the no-data state.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtAgenda\n   */\n  protected renderNoData(): TemplateResult {\n    return this.renderTemplate('no-data', null) || html``;\n  }\n\n  /**\n   * Render an individual Event.\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderEvent(event: MicrosoftGraph.Event): TemplateResult {\n    // Update narrow state\n    this._isNarrow = this.offsetWidth < 600;\n\n    const eventClasses = {\n      narrow: this._isNarrow\n    };\n\n    return html`\n      <fluent-card class=\"${classMap({ event: true, ...eventClasses })}\">\n        <div class=\"${classMap({ 'event-time-container': true, ...eventClasses })}\">\n          <div class=\"event-time\" aria-label=\"${this.getEventTimeString(event)}\">${this.getEventTimeString(event)}</div>\n        </div>\n        <div class=\"${classMap({ 'event-details-container': true, ...eventClasses })}\">\n          ${this.renderTitle(event)} ${this.renderLocation(event)} ${this.renderAttendees(event)}\n        </div>\n        <div class=\"event-other-container\">${this.renderOther(event)}</div>\n      </fluent-card>\n    `;\n  }\n\n  /**\n   * Render the header for a group.\n   * Only relevant for grouped Events.\n   *\n   * @protected\n   * @param {Date} date\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderHeader(header: string): TemplateResult {\n    return (\n      this.renderTemplate('header', { header }, 'header-' + header) ||\n      html`\n        <div class=\"header\" aria-label=\"${header}\">${header}</div>\n      `\n    );\n  }\n\n  /**\n   * Render the title field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderTitle(event: MicrosoftGraph.Event): TemplateResult {\n    return html`\n      <div\n        aria-label=${event.subject}\n        class=\"${classMap({\n          'event-subject': true,\n          narrow: this._isNarrow\n        })}\"\n      >\n        ${event.subject}\n      </div>`;\n  }\n\n  /**\n   * Render the location field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderLocation(event: MicrosoftGraph.Event): TemplateResult {\n    if (!event.location.displayName) {\n      return null;\n    }\n\n    return html`\n      <div class=\"event-location-container\">\n        <div class=\"event-location-icon\">${getSvg(SvgIcon.OfficeLocation)}</div>\n        <div class=\"event-location\" aria-label=\"${event.location.displayName}\">${event.location.displayName}</div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the attendees field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderAttendees(event: MicrosoftGraph.Event): TemplateResult {\n    if (!event.attendees.length) {\n      return null;\n    }\n    return mgtHtml`\n      <mgt-people\n        show-max=\"5\"\n        show-presence\n        class=\"event-attendees\"\n        .peopleQueries=${event.attendees.map(attendee => {\n          return attendee.emailAddress.address;\n        })}\n      ></mgt-people>\n    `;\n  }\n\n  /**\n   * Render the event other field of an Event\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event} event\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected renderOther(event: MicrosoftGraph.Event): TemplateResult {\n    return this.hasTemplate('event-other')\n      ? html`\n          ${this.renderTemplate('event-other', { event }, event.id + '-other')}\n        `\n      : null;\n  }\n\n  /**\n   * Render the events in groups, each with a header.\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event[]} events\n   * @returns {TemplateResult}\n   * @memberof MgtAgenda\n   */\n  protected renderGroups(events: MicrosoftGraph.Event[]): TemplateResult {\n    // Render list, grouped by day\n    const grouped: Record<string, MicrosoftGraph.Event[]> = {};\n\n    events.forEach(event => {\n      let dateString = event?.start?.dateTime;\n      if (event.end.timeZone === 'UTC') {\n        dateString += 'Z';\n      }\n\n      const header = this.getDateHeaderFromDateTimeString(dateString);\n      grouped[header] = grouped[header] || [];\n      grouped[header].push(event);\n    });\n\n    return html`\n      ${Object.keys(grouped).map(\n        header =>\n          html`\n            <div class=\"group\">${this.renderHeader(header)} ${this.renderEvents(grouped[header])}</div>\n          `\n      )}\n    `;\n  }\n\n  /**\n   * Render a list of events.\n   *\n   * @protected\n   * @param {MicrosoftGraph.Event[]} events\n   * @returns {TemplateResult}\n   * @memberof MgtAgenda\n   */\n  protected renderEvents(events: MicrosoftGraph.Event[]): TemplateResult {\n    return html`\n        ${events.map(\n          event =>\n            html`\n              <div\n                class=\"event-container\"\n                tabindex=\"0\"\n                @focus=${() => this.eventClicked(event)}>\n                ${this.renderTemplate('event', { event }, event.id) || this.renderEvent(event)}\n              </div>`\n        )}`;\n  }\n\n  protected args() {\n    return [this.providerState, this.preferredTimezone, this.eventQuery, this.date, this.groupId, this.days];\n  }\n\n  /**\n   * Load state into the component\n   *\n   * @protected\n   * @returns\n   * @memberof MgtAgenda\n   */\n  protected async loadState() {\n    if (this.events) {\n      return;\n    }\n\n    const events = await this.loadEvents();\n    if (events?.length > 0) {\n      this.events = events;\n    }\n  }\n\n  private readonly onResize = () => {\n    this._isNarrow = this.offsetWidth < 600;\n  };\n\n  private eventClicked(event: MicrosoftGraph.Event) {\n    this.fireCustomEvent('eventClick', event);\n  }\n\n  private getEventTimeString(event: MicrosoftGraph.Event) {\n    if (event.isAllDay) {\n      return 'ALL DAY';\n    }\n\n    // #937 When not specifying a preferred time zone using the\n    // preferred-timezone attribute, MGT treats the dates retrieved from\n    // Microsoft Graph as local time, rather than UTC.\n    let startString = event.start.dateTime;\n    if (event.start.timeZone === 'UTC') {\n      startString += 'Z';\n    }\n    let endString = event.end.dateTime;\n    if (event.end.timeZone === 'UTC') {\n      endString += 'Z';\n    }\n\n    const start = this.prettyPrintTimeFromDateTime(new Date(startString));\n    const end = this.prettyPrintTimeFromDateTime(new Date(endString));\n\n    return `${start} - ${end}`;\n  }\n\n  private async loadEvents(): Promise<MicrosoftGraph.Event[]> {\n    const p = Providers.globalProvider;\n    let events: MicrosoftGraph.Event[] = [];\n\n    if (p?.state === ProviderState.SignedIn) {\n      const graph = p.graph.forComponent(this);\n\n      if (this.eventQuery) {\n        try {\n          const tokens = this.eventQuery.split('|');\n          let scope: string;\n          let query: string;\n          if (tokens.length > 1) {\n            query = tokens[0].trim();\n            scope = tokens[1].trim();\n          } else {\n            query = this.eventQuery;\n          }\n          const iterator = await getEventsQueryPageIterator(graph, query, scope);\n          if (iterator?.value) {\n            events = iterator.value;\n\n            while (iterator.hasNext) {\n              await iterator.next();\n              events = iterator.value;\n            }\n          }\n          // eslint-disable-next-line no-empty\n        } catch (e) {}\n      } else {\n        const start = this.date ? new Date(this.date) : new Date();\n        const end = new Date(start.getTime());\n        end.setDate(start.getDate() + this.days);\n\n        try {\n          const iterator = await getEventsPageIterator(graph, start, end, this.groupId);\n          if (iterator?.value) {\n            events = iterator.value;\n\n            while (iterator.hasNext) {\n              await iterator.next();\n              events = iterator.value;\n            }\n          }\n        } catch (error) {\n          // noop - possible error with graph\n        }\n      }\n    }\n\n    return events;\n  }\n\n  private prettyPrintTimeFromDateTime(date: Date) {\n    return date.toLocaleTimeString(navigator.language, {\n      timeStyle: 'short',\n      timeZone: this.preferredTimezone\n    });\n  }\n\n  private getDateHeaderFromDateTimeString(dateTimeString: string) {\n    const date = new Date(dateTimeString);\n    return date.toLocaleDateString(navigator.language, {\n      dateStyle: 'full',\n      timeZone: this.preferredTimezone\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { registerMgtAgendaComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type AgendaProps = {\n\tdate?: string;\n\tgroupId?: string;\n\tdays?: number;\n\teventQuery?: string;\n\tevents?: MicrosoftGraph.Event[];\n\tshowMax?: number;\n\tgroupByDay?: boolean;\n\tpreferredTimezone?: string;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Agenda = wrapMgt<AgendaProps>('agenda', registerMgtAgendaComponent);\n\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { registerMgtSpinnerComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { ComponentMediaQuery } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type SpinnerProps = {\n\tmediaQuery?: ComponentMediaQuery;\n}\n\nexport const Spinner = wrapMgt<SpinnerProps>('spinner', registerMgtSpinnerComponent);\n\n"],"names":["useStyles","makeStyles","root","display","justifyContent","alignItems","height","message","paddingLeft","Loading","props","styles","_jsxs","className","children","_jsx","Spinner","email","_objectSpread","boxShadow","shorthands","padding","margin","borderLeftWidth","borderLeftColor","borderLeftStyle","link","color","textDecorationLine","header","subject","fontSize","gridArea","title","marginBottom","date","float","body","textOverflow","wordWrap","overflow","maxHeight","lineHeight","emptyBody","fontStyle","Messages","_email$sender","_email$sender$emailAd","_email$bodyPreview","_email$bodyPreview2","dataContext","href","webLink","target","rel","Person","personQuery","sender","emailAddress","address","view","PersonViewType","oneline","personCardInteraction","PersonCardInteraction","hover","Date","receivedDateTime","toLocaleDateString","bodyPreview","mergeClasses","css","_templateObject","_taggedTemplateLiteral","registerMgtPeopleComponent","registerMgtPersonComponent","registerComponent","MgtPeople","_MgtTemplatedTaskComp","_inherits","_super","_createSuper","_this","_classCallCheck","call","version","scopes","_peoplePresence","_arrowKeyLocation","renderContent","people","length","renderTemplate","max","showMax","renderPeople","renderNoData","renderLoading","html","handleKeyDown","event","person","_step","peopleContainer","shadowRoot","querySelector","peopleElements","_iterator","_createForOfIteratorHelper","s","n","done","el","value","setAttribute","blur","err","e","f","childElementCount","keyName","key","includes","none","mgtPerson","showPersonCard","focus","_createClass","this","providerState","groupId","userIds","peopleQueries","resource","fallbackDetails","_this2","maxPeople","slice","filter","pple","_templateObject2","repeat","p","id","displayName","_templateObject3","renderPerson","renderOverflow","extra","_templateObject4","personPresence","activity","availability","showPresence","mgtHtml","_templateObject5","_templateObject6","_context","next","provider","Providers","globalProvider","state","ProviderState","SignedIn","graph","forComponent","findGroupMembers","PersonType","sent","getUsersForUserIds","t0","getUsersForPeopleQueries","getPeopleFromResource","getPeople","getUsersPresenceByPeople","stop","_callee","get","_toConsumableArray","Set","concat","MgtPerson","requiredScopes","MgtTemplatedTaskComponent","__decorate","property","attribute","type","String","converter","_type","split","map","v","trim","Object","Number","Boolean","toLowerCase","reflect","Array","getEventsQueryPageIterator","query","arguments","undefined","__awaiter","_regeneratorRuntime","mark","request","wrap","prev","api","middlewareOptions","prepScopes","orderby","abrupt","GraphPageIterator","create","getEventsPageIterator","startDateTime","endDateTime","_callee2","sdt","edt","uri","_context2","toISOString","MgtAgenda","days","events","renderedTemplate","agendaClasses","agenda","grouped","groupByDay","direction","classMap","renderGroups","renderEvents","onResize","_isNarrow","offsetWidth","_get","_getPrototypeOf","prototype","window","addEventListener","removeEventListener","loadEvents","eventClasses","narrow","assign","getEventTimeString","renderTitle","renderLocation","renderAttendees","renderOther","location","_templateObject7","getSvg","SvgIcon","OfficeLocation","attendees","_templateObject8","attendee","hasTemplate","_templateObject9","forEach","dateString","_a","start","dateTime","end","timeZone","getDateHeaderFromDateTimeString","push","_templateObject10","keys","_templateObject11","renderHeader","_this3","_templateObject12","_templateObject13","eventClicked","renderEvent","preferredTimezone","eventQuery","fireCustomEvent","isAllDay","startString","endString","prettyPrintTimeFromDateTime","_context3","tokens","scope","iterator","hasNext","getTime","setDate","getDate","t1","_callee3","toLocaleTimeString","navigator","language","timeStyle","dateTimeString","dateStyle","hasChanged","newVal","oldVal","Agenda","wrapMgt","registerFluentComponents","fluentCard","Get","registerMgtGetComponent","registerMgtSpinnerComponent"],"sourceRoot":""}