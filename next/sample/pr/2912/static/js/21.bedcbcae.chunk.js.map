{"version":3,"file":"static/js/21.bedcbcae.chunk.js","mappings":"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","sources":["../../../packages/mgt-components/dist/es6/components/mgt-tasks-base/src/components/mgt-tasks-base/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-tasks-base/src/components/mgt-tasks-base/mgt-tasks-base.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/graph.todo.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/mgt-todo-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/mgt-todo.ts","../../../packages/mgt-components/dist/es6/utils/src/utils/isDark.ts","../../../packages/mgt-react/src/generated/todo.ts","components/DirectReports.tsx","pages/DashboardPage.tsx","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker.ts","../../../packages/mgt-react/src/generated/get.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nexport const strings = {\n  cancelNewTaskSubtitle: 'Cancel',\n  newTaskPlaceholder: 'Add a task',\n  addTaskButtonSubtitle: 'Add',\n  removeTaskSubtitle: 'Delete Task'\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ComponentMediaQuery, Providers, ProviderState, MgtTemplatedComponent } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentTextField, fluentButton, fluentCalendar } from '@fluentui/web-components';\nimport { TodoTask } from '@microsoft/microsoft-graph-types';\n/**\n * The foundation for creating task based components.\n *\n * @export\n * @class MgtTasksBase\n * @extends {MgtTemplatedComponent}\n */\nexport abstract class MgtTasksBase extends MgtTemplatedComponent {\n  /**\n   * determines if tasks are un-editable\n   *\n   * @type {boolean}\n   */\n  @property({ attribute: 'read-only', type: Boolean })\n  public readOnly: boolean;\n\n  /**\n   * sets whether the header is rendered\n   *\n   * @type {boolean}\n   * @memberof MgtTasksBase\n   */\n  @property({ attribute: 'hide-header', type: Boolean })\n  public hideHeader: boolean;\n\n  /**\n   * sets whether the options are rendered\n   *\n   * @type {boolean}\n   * @memberof MgtTasksBase\n   */\n  @property({ attribute: 'hide-options', type: Boolean })\n  public hideOptions: boolean;\n\n  /**\n   * if set, the component will only show tasks from the target list\n   *\n   * @type {string}\n   */\n  @property({ attribute: 'target-id', type: String })\n  public targetId: string;\n\n  /**\n   * if set, the component will first show tasks from this list\n   *\n   * @type {string}\n   * @memberof MgtTodo\n   */\n  @property({ attribute: 'initial-id', type: String })\n  public initialId: string;\n\n  private _previousMediaQuery: ComponentMediaQuery;\n\n  protected get strings(): Record<string, string> {\n    return strings;\n  }\n\n  constructor() {\n    super();\n\n    registerFluentComponents(fluentTextField, fluentButton, fluentCalendar);\n\n    this.clearState();\n    this._previousMediaQuery = this.mediaQuery;\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * @param {*} name\n   * @param {*} oldValue\n   * @param {*} newValue\n   * @memberof MgtTasksBase\n   */\n  public attributeChangedCallback(name: string, oldVal: string, newVal: string) {\n    super.attributeChangedCallback(name, oldVal, newVal);\n    switch (name) {\n      case 'target-id':\n      case 'initial-id':\n        this.clearState();\n        void this.requestStateUpdate();\n        break;\n    }\n  }\n\n  /**\n   * updates provider state\n   *\n   * @memberof MgtTasksBase\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  /**\n   * removes updates on provider state\n   *\n   * @memberof MgtTasksBase\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('resize', this.onResize);\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render() {\n    const provider = Providers.globalProvider;\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return html``;\n    }\n\n    if (this.isLoadingState) {\n      return this.renderLoadingTask();\n    }\n\n    const picker = this.renderPicker();\n    const newTaskTemplate = this.renderNewTask();\n    const tasksTemplate = this.isLoadingState ? this.renderLoadingTask() : this.renderTasks();\n\n    return html`\n      ${picker}\n      ${newTaskTemplate}\n      <div class=\"tasks\" dir=${this.direction}>\n        ${tasksTemplate}\n      </div>\n    `;\n  }\n\n  /**\n   * Render a task in a loading state.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTodo\n   */\n  protected renderLoadingTask() {\n    return html`\n      <div class=\"task loading-task\">\n        <div class=\"task-details\">\n          <div class=\"title\"></div>\n          <div class=\"task-due\"></div>\n          <div class=\"task-delete\"></div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the panel for creating a new task.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderNewTask(): TemplateResult;\n\n  /**\n   * Render the generic picker.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderPicker(): TemplateResult;\n\n  /**\n   * Render the list of todo tasks\n   *\n   * @protected\n   * @abstract\n   * @param {ITask[]} tasks\n   * @returns {TemplateResult}\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderTasks(): TemplateResult;\n\n  /**\n   * Make a service call to create the new task object.\n   *\n   * @protected\n   * @abstract\n   * @memberof MgtTasksBase\n   */\n  protected abstract createNewTask(): Promise<void>;\n\n  /**\n   * Clear the form data from the new task panel.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract clearNewTaskData(): void;\n\n  /**\n   * Clear the component state.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected clearState(): void {\n    this.requestUpdate();\n  }\n\n  /**\n   * Handle when a task is clicked\n   *\n   * @protected\n   * @param {Event} e\n   * @param {TodoTask} task\n   * @memberof MgtTasksBase\n   */\n  protected handleTaskClick = (task: TodoTask): void => {\n    this.fireCustomEvent('taskClick', { task });\n  };\n\n  /**\n   * Convert a date to a properly formatted string\n   *\n   * @protected\n   * @param {Date} date\n   * @returns\n   * @memberof MgtTasksBase\n   */\n  protected dateToInputValue(date: Date): string {\n    if (date) {\n      return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n    }\n\n    return null;\n  }\n\n  private readonly onResize = () => {\n    if (this.mediaQuery !== this._previousMediaQuery) {\n      this._previousMediaQuery = this.mediaQuery;\n      this.requestUpdate();\n    }\n  };\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { TodoTaskList, TodoTask } from '@microsoft/microsoft-graph-types';\nimport { IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { CollectionResponse } from '@microsoft/mgt-element';\n\nexport interface LinkedResource {\n  id: string;\n  webUrl: string;\n  applicationName: string;\n  displayName: string;\n  externalId: string;\n}\n\n/**\n * Get all todo tasks for a specific task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTask[]>}\n */\nexport const getTodoTasks = async (graph: IGraph, listId: string): Promise<TodoTask[]> => {\n  const tasks = (await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<TodoTask>;\n\n  return tasks?.value;\n};\n\n/**\n * Get a specific todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<TodoTask>}\n */\nexport const getTodoTask = async (graph: IGraph, listId: string, taskId: string): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as TodoTask;\n\n/**\n * get all todo task lists\n *\n * @export\n * @param {IGraph} graph\n * @returns {Promise<TodoTaskList[]>}\n */\nexport const getTodoTaskLists = async (graph: IGraph): Promise<TodoTaskList[]> => {\n  const taskLists = (await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<TodoTaskList>;\n\n  return taskLists?.value;\n};\n\n/**\n * Get a specific todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTaskList>}\n */\nexport const getTodoTaskList = async (graph: IGraph, listId: string): Promise<TodoTaskList> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as TodoTaskList;\n\n/**\n * Create a new todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {{ title: string; dueDateTime: { dateTime: string; timeZone: string } }} taskData\n * @returns {Promise<TodoTask>}\n */\nexport const createTodoTask = async (\n  graph: IGraph,\n  listId: string,\n  taskData: { title: string; dueDateTime?: { dateTime: string; timeZone: string } }\n): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(taskData)) as TodoTask;\n\n/**\n * Create a new todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {{ displayName: string }} list\n * @returns {Promise<TodoTaskList>}\n */\nexport const createTodoTaskList = async (graph: IGraph, listData: { displayName: string }): Promise<TodoTaskList> =>\n  (await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(listData)) as TodoTaskList;\n\n/**\n * Delete a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<void>}\n */\nexport const deleteTodoTask = async (graph: IGraph, listId: string, taskId: string): Promise<void> => {\n  await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n};\n\n/**\n * Delete a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<void>}\n */\nexport const deleteTodoTaskList = async (graph: IGraph, listId: string): Promise<void> => {\n  await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n};\n\n/**\n * Update a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @param {TodoTask} taskData\n * @returns {Promise<TodoTask>}\n */\nexport const updateTodoTask = async (\n  graph: IGraph,\n  listId: string,\n  taskId: string,\n  taskData: TodoTask\n): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskData)) as TodoTask;\n\n/**\n * Update a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {TodoTaskList} taskListData\n * @returns {Promise<TodoTaskList>}\n */\nexport const updateTodoTaskList = async (\n  graph: IGraph,\n  listId: string,\n  taskListData: TodoTaskList\n): Promise<TodoTaskList> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskListData)) as TodoTaskList;\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{display:flex;flex-direction:column;color:var(--color,var(--neutral-foreground-rest))}:host input[type=date]::-webkit-calendar-picker-indicator,:host input[type=date]::-webkit-inner-spin-button{display:none;appearance:none}:host .task-icon{font-family:FabricMDL2Icons;user-select:none}:host .task-icon.divider{vertical-align:initial;margin:0 12px;font-size:16px}:host .header{margin:var(--tasks-header-margin,0 0 12px 0);padding:var(--tasks-title-padding,0);display:flex;align-items:center;justify-content:space-between}:host .header .header__loading{max-width:90px;width:100%;height:20px;background:#f2f2f2}:host .header select{font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px);border:none;appearance:none;cursor:pointer}:host .header select::-ms-expand{display:none}:host .header .plan-title{font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px)}:host .header .add-bar{display:flex}:host .header .add-bar .add-bar-item{flex:1 1 auto}:host .header .new-task-due{display:flex}:host .header .new-task-due input{flex:1 1 auto;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .header .title-cont{flex:1 1 auto;display:flex;align-items:center;height:var(--tasks-new-button-height,34px)}:host .header .new-task-button{flex:0 0 auto;display:flex;justify-content:center;align-items:center;width:var(--tasks-new-button-width,auto);height:var(--tasks-new-button-height,32px);border-radius:2px;padding:0 20px;background:var(--tasks-new-button-background,#0078d4);border:var(--tasks-new-button-border,solid 1px transparent);color:var(--tasks-new-button-color,#fff);user-select:none;cursor:pointer}:host .header .new-task-button span{font-size:14px;font-weight:600;letter-spacing:.1px;line-height:14px}:host .header .new-task-button .task-icon{margin-right:8px}:host .header .new-task-button.hidden{visibility:hidden}:host .header .new-task-button:hover{background:var(--tasks-new-button-hover-background,#106ebe)}:host .header .new-task-button:active{background:var(--tasks-new-button-active-background,#005a9e)}:host .task{position:relative;margin:var(--task-margin,0 0 0 0);padding:var(--task-padding,0 0 0 0);background-color:var(--task-background-color,var(--neutral-layer-floating));border:var(--task-border,var(--neutral-stroke-input-active));border-radius:8px}:host .task .task-content{display:flex}:host .task .task-content .divider{position:absolute;height:2px;left:0;right:0;bottom:0;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task .task-content .task-details-container{flex:1;display:grid;grid-template-columns:auto 1fr;-ms-grid-columns:auto 1fr;grid-template-rows:auto auto auto auto;-ms-grid-rows:auto auto auto auto;justify-content:space-between;align-items:flex-start;color:var(--task-detail-color,var(--neutral-foreground-hint));font-size:12px;font-weight:600;white-space:normal;margin-bottom:12px}:host .task .task-content .task-details-container .task-detail{width:100%;height:100%;margin:4px 24px 6px 0;display:flex;justify-content:flex-start;align-items:center}:host .task .task-content .task-details-container .task-title{color:var(--task-color,var(--neutral-foreground-rest));font-size:14px;font-weight:600;grid-row:1;grid-column:1/3;grid-column:1;-ms-grid-column-span:2;margin:22px 0 4px}:host .task .task-content .task-details-container .task-group{min-height:24px;grid-row:2;grid-column:1}:host .task .task-content .task-details-container .task-bucket{min-height:24px;grid-row:2;grid-column:2}:host .task .task-content .task-details-container .task-due{justify-content:flex-end;align-items:flex-start;grid-row:4;grid-column:1/3;grid-column:1;-ms-grid-column-span:2}:host .task .task-content .task-details-container.tablet{grid-template-columns:1fr .5fr 1fr .5fr;-ms-grid-columns:1fr .5fr 1fr .5fr;grid-template-rows:auto auto;-ms-grid-rows:auto auto}:host .task .task-content .task-details-container.tablet.no-plan{grid-template-columns:0 1fr 1fr 1fr;-ms-grid-columns:0 1fr 1fr 1fr}:host .task .task-content .task-details-container.tablet .task-detail{margin:4px 24px 6px 0}:host .task .task-content .task-details-container.tablet .task-title{grid-row:1;grid-column:1/5;grid-column:1;-ms-grid-column-span:4}:host .task .task-content .task-details-container.tablet .task-group{grid-row:2;grid-column:1}:host .task .task-content .task-details-container.tablet .task-bucket{grid-row:2;grid-column:2}:host .task .task-content .task-details-container.tablet .task-assignee{grid-row:2;grid-column:3}:host .task .task-content .task-details-container.tablet .task-due{justify-content:flex-start;align-items:center;grid-row:2;grid-column:4}:host .task .task-content .task-details-container.desktop{grid-template-columns:2fr 1fr .5fr 1fr .5fr;-ms-grid-columns:2fr 1fr .5fr 1fr .5fr;grid-template-rows:auto;-ms-grid-rows:auto;margin:0}:host .task .task-content .task-details-container.desktop.no-plan{grid-template-columns:2fr 0 1fr 1fr 1fr;-ms-grid-columns:2fr 0 1fr 1fr 1fr}:host .task .task-content .task-details-container.desktop .task-detail{margin:0 24px 0 0}:host .task .task-content .task-details-container.desktop .task-title{padding:0;grid-row:1;grid-column:1}:host .task .task-content .task-details-container.desktop .task-group{min-height:61px;grid-row:1;grid-column:2}:host .task .task-content .task-details-container.desktop .task-bucket{grid-row:1;grid-column:3}:host .task .task-content .task-details-container.desktop .task-assignee{grid-row:1;grid-column:4}:host .task .task-content .task-details-container.desktop .task-due{justify-content:flex-start;align-items:center;grid-row:1;grid-column:5}:host .task .task-content .task-details-container svg{vertical-align:middle;margin-right:4px}:host .task .task-content .task-details-container svg path{fill:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-content .task-details-container select,:host .task .task-content .task-details-container span{vertical-align:middle;color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-content .task-details-container .task-icon{color:#797775;margin-right:8px}:host .task .task-content .task-details-container .people{color:var(--task-detail-color,var(--neutral-foreground-hint));font-size:16px}:host .task .task-content .task-details-container .person{display:inline-block}:host .task .task-content .task-details-container .picker{background-color:var(--task-background-color,var(--neutral-layer-floating));background-clip:padding-box;width:var(--mgt-flyout-set-width,350px);color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-content .task-details-container .picker .people-picker{--separator-margin:0px 10px 0px 10px}:host .task .task-content .task-details-container input,:host .task .task-content .task-details-container select{color:var(--task-detail-color,var(--neutral-foreground-hint));font-size:.9em;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task .task-check-container{font-family:FabricMDL2Icons;border-radius:50%;color:#fff;cursor:pointer;display:flex;align-items:var(--task-icon-alignment,flex-start);margin:21px 10px 20px 20px;user-select:none}:host .task .task-check-container.complete .task-check{background-color:var(--task-icon-background-completed,#00ad56);border:var(--task-icon-border-completed,solid 1px #fff);color:var(--task-icon-color-completed,#fff)}:host .task .task-check-container.complete .task-content .task-details-container .task-title{text-decoration:line-through;color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-check-container .task-check{font-family:FabricMDL2Icons;font-size:12px;width:18px;height:18px;border-radius:var(--task-icon-border-radius,50%);border:var(--task-icon-border,solid 1px #797775);color:var(--task-color,var(--neutral-foreground-rest));display:flex;justify-content:center;align-items:center;background-color:var(--task-icon-background,transparent);user-select:none}:host .task .task-check-container .task-check.loading .task-check-content{animation:rotate-icon 2s infinite linear}:host .task .task-options{cursor:pointer;user-select:none;margin:16px 8px 0 0}:host .task.read-only .task-check-container{cursor:default}:host .task.complete{background:var(--task-complete-background,var(--neutral-layer-1));border:var(--task-complete-border,2px dotted inherit)}:host .task.complete .task-content .task-details-container .task-title{text-decoration:line-through;color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task.new-task{margin:var(--task-new-margin,var(--task-margin,0 0 24px 0));display:flex;flex-direction:row}:host .task.new-task .self-assign{display:none}:host .task.new-task .assign-to{border:0;background:0 0}:host .task.new-task .fake-check-box{width:15px;height:15px;cursor:pointer;margin:0 5px}:host .task.new-task .fake-check-box::after{font-family:FabricMDL2Icons;content:\"uE739\"}:host .task.new-task .fake-check-box~:checked{font-family:FabricMDL2Icons;content:\"uE73A\"}:host .task.new-task .task-content{flex:1 1 auto;align-content:center;vertical-align:middle;margin:0 0 0 12px}:host .task.new-task .task-content .task-details-container{display:flex;flex-direction:column;align-items:stretch;margin:0}:host .task.new-task .task-content .task-details-container .task-title{display:flex;height:32px;padding:2px}:host .task.new-task .task-content .task-details-container .task-title input{flex:1;margin:var(--task-new-input-margin,0 24px 0 16px);padding:var(--task-new-input-padding,6px);font-size:var(--task-new-input-font-size,14px);font-weight:600;border:var(--task-new-border,none);border-bottom:1px solid #e1dfdd;outline:0;border-radius:0;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task.new-task .task-content .task-details-container .task-title input:hover{border-bottom:1px solid #106ebe}:host .task.new-task .task-content .task-details-container .task-title input:active{border-bottom:1px solid #005a9e}:host .task.new-task .task-content .task-details-container .task-title input:focus{border-bottom:1px solid #0078d4}:host .task.new-task .task-content .task-details-container .task-details{display:flex;justify-content:stretch;align-items:center;flex-wrap:wrap;margin:14px 0 14px 4px}:host .task.new-task .task-content .task-details-container .task-details .new-task-group{margin:8px 16px}:host .task.new-task .task-content .task-details-container .task-details .new-task-bucket{margin:8px 16px}:host .task.new-task .task-content .task-details-container .task-details .new-task-due{margin:8px 16px}:host .task.new-task .task-content .task-details-container .task-details .new-task-assignee{margin:8px 16px;min-width:80px}:host .task.new-task .task-content .task-details-container .task-details .task-people label{display:flex;align-content:center;align-items:center}:host .task.new-task .task-content .task-details-container .task-details input,:host .task.new-task .task-content .task-details-container .task-details select{font-size:12px;font-weight:600;border:var(--task-new-select-border,none);border-bottom:1px solid #e1dfdd}:host .task.new-task .task-content .task-details-container .task-details input:hover,:host .task.new-task .task-content .task-details-container .task-details select:hover{border-bottom:1px solid #106ebe}:host .task.new-task .task-content .task-details-container .task-details input:active,:host .task.new-task .task-content .task-details-container .task-details select:active{border-bottom:1px solid #005a9e}:host .task.new-task .task-content .task-details-container .task-details input:focus,:host .task.new-task .task-content .task-details-container .task-details select:focus{border-bottom:1px solid #0078d4}:host .task.new-task .task-add-button-container{margin-right:28px}:host .task.new-task .task-add-button-container .task-add,:host .task.new-task .task-add-button-container .task-cancel{justify-content:center;align-items:center;cursor:pointer;flex:0 0 auto;display:flex;width:var(--tasks-new-button-width,100px);height:var(--tasks-new-button-height,32px);border-radius:4px;border:var(--tasks-new-button-border,solid 1px #e5e5e5);font-size:14px;line-height:20px}:host .task.new-task .task-add-button-container .task-add{color:#fff;background:var(--task-new-add-button-background,#0078d4);margin:22px 0 12px auto}:host .task.new-task .task-add-button-container .task-cancel{color:var(--task-new-cancel-button-color,var(--neutral-foreground-rest))}:host .task.new-task .task-add-button-container.disabled .task-add{color:var(--task-new-cancel-button-color,var(--neutral-foreground-rest));background:var(--task-new-add-button-disabled-background,#fff);cursor:default}@keyframes rotate-icon{from{transform:rotate(0)}to{transform:rotate(360deg)}}[dir=rtl] .arrow-options{--arrow-options-left:auto}[dir=rtl] .dot-options{--dot-options-translatex:translateX(60px)}[dir=rtl] .task-details{margin-right:14px!important}[dir=rtl] .task-icon{margin-left:8px}[dir=rtl] .task-detail svg{margin-left:4px}@media (forced-colors:active) and (prefers-color-scheme:dark){:host svg{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host svg{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}:host{border-radius:8px;width:100%}:host .task,:host.loading-task{margin-block:1px;box-shadow:var(--task-box-shadow,var(--elevation-shadow-card-active));width:100%;display:flex;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task.new-task,:host.loading-task.new-task{margin:14px 0 1px;box-shadow:var(--task-box-shadow,var(--elevation-shadow-card-active))}:host .task.complete,:host.loading-task.complete{border:1px solid var(--task-border-completed,var(--neutral-stroke-input-active));background:var(--task-complete-background,var(--neutral-layer-1))}:host .task.complete .task-details .task-due,:host .task.complete .task-details .title,:host.loading-task.complete .task-details .task-due,:host.loading-task.complete .task-details .title{text-decoration:line-through}:host .task.read-only,:host.loading-task.read-only{opacity:1}:host .task:hover,:host.loading-task:hover{background-color:var(--task-background-color-hover,var(--neutral-fill-hover));border-radius:8px}:host .task .task-details,:host.loading-task .task-details{box-sizing:border-box;display:flex;flex-direction:row;align-items:center;padding:2px;line-height:24px;border-radius:4px;width:100%}:host .task .task-details .task>div,:host.loading-task .task-details .task>div{display:flex;align-items:center;width:200px}:host .task .task-details .task-delete,:host.loading-task .task-details .task-delete{display:flex}:host .task .task-details .container,:host.loading-task .task-details .container{display:flex;width:100%}:host .task .task-details .task-due,:host.loading-task .task-details .task-due{min-width:120px;margin-inline-end:12px;height:32px;text-decoration:inherit;display:flex}:host fluent-text-field::part(end),:host fluent-text-field::part(start){margin-inline:unset}:host fluent-text-field::part(control){padding:0;cursor:pointer}:host fluent-text-field::part(root){background:0 0}:host fluent-text-field.new-task{width:100%;height:34px}:host fluent-text-field.new-task div.start .add-icon{display:flex;margin-inline:10px}:host fluent-text-field.new-task div:nth-child(2){display:flex;align-items:center}:host fluent-text-field.new-task div:nth-child(2) .calendar{display:flex;align-items:center}:host fluent-text-field.new-task div:nth-child(2) .calendar svg{fill:var(--task-color,var(--neutral-foreground-rest))}:host fluent-text-field.new-task div:nth-child(2) .calendar .date{margin-inline-start:10px;color:var(--task-color,var(--neutral-foreground-rest));width:auto;cursor:pointer}:host fluent-text-field.new-task div:nth-child(2) .calendar input{flex:1;border:none;border-bottom:1px solid var(--task-color,var(--neutral-foreground-rest));outline:0;border-radius:0}:host fluent-text-field.new-task div:nth-child(2) .calendar input:hover{border-bottom:1px solid var(--task-date-input-hover-color,var(--neutral-layer-1))}:host fluent-text-field.new-task div:nth-child(2) .calendar input:active,:host fluent-text-field.new-task div:nth-child(2) .calendar input:focus{border-bottom:1px solid var(--task-date-input-active-color,var(--accent-fill-rest))}:host fluent-text-field.title{flex-grow:1;display:inline}:host fluent-text-field.date{color:var(--task-detail-color,var(--neutral-foreground-hint))}:host fluent-text-field::after{border-bottom:none}:host fluent-text-field.dark::part(control){color-scheme:dark}:host fluent-button.task-add-icon.neutral,:host fluent-button.task-cancel-icon.neutral,:host fluent-button.task-delete.neutral{fill:var(--task-color,var(--neutral-foreground-rest))}:host fluent-button.task-add-icon.neutral::part(control),:host fluent-button.task-cancel-icon.neutral::part(control),:host fluent-button.task-delete.neutral::part(control){border:none;background:inherit}:host fluent-button.task-add-icon.neutral::part(control) svg,:host fluent-button.task-cancel-icon.neutral::part(control) svg,:host fluent-button.task-delete.neutral::part(control) svg{fill:var(--task-color,var(--neutral-foreground-rest))}:host fluent-checkbox.complete div>svg .filled{display:block}:host fluent-checkbox.complete div>svg .regular{display:none}:host fluent-checkbox.complete div>svg path{fill:var(--task-radio-background-color,var(--accent-fill-rest))}:host fluent-checkbox div>svg .filled{display:none}:host fluent-checkbox div>svg .regular{display:block}:host fluent-checkbox div>svg path{fill:var(--task-background-color,var(--neutral-layer-floating))}:host fluent-checkbox::part(control){margin-inline-start:10px;background:0 0;border-radius:50%}:host fluent-checkbox::part(label){margin-inline-end:unset;width:100%}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  cancelNewTaskSubtitle: 'Cancel',\n  newTaskPlaceholder: 'Add a task',\n  newTaskLabel: 'New Task Input',\n  editTaskLabel: 'Edit Task Input',\n  addTaskButtonSubtitle: 'Add',\n  deleteTaskOption: 'Delete',\n  editTaskOption: 'Edit',\n  dueDate: 'Due date',\n  newTaskDateInputLabel: 'New Task Date Input',\n  changeTaskDateInputLabel: 'Change Task Date Input',\n  newTaskNameInputLabel: 'New Task Name Input',\n  cancelAddingTask: 'Cancel adding a new task'\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, nothing, TemplateResult } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { IGraph, mgtHtml } from '@microsoft/mgt-element';\nimport { Providers, ProviderState } from '@microsoft/mgt-element';\nimport { getSvg, SvgIcon } from '../../utils/SvgHelper';\nimport '../mgt-person/mgt-person';\nimport { MgtTasksBase } from '../mgt-tasks-base/mgt-tasks-base';\nimport '../sub-components/mgt-arrow-options/mgt-arrow-options';\nimport {\n  createTodoTask,\n  deleteTodoTask,\n  getTodoTaskList,\n  getTodoTaskLists,\n  getTodoTasks,\n  updateTodoTask\n} from './graph.todo';\nimport { styles } from './mgt-todo-css';\nimport { strings } from './strings';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentCheckbox, fluentRadioGroup, fluentButton } from '@fluentui/web-components';\nimport { isElementDark } from '../../utils/isDark';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { TodoTaskList, TodoTask, TaskStatus } from '@microsoft/microsoft-graph-types';\nimport { registerComponent } from '@microsoft/mgt-element';\nimport { registerMgtPickerComponent } from '../mgt-picker/mgt-picker';\n\n/**\n * Filter function\n */\nexport type TodoFilter = (task: TodoTask) => boolean;\n\nexport const registerMgtTodoComponent = () => {\n  registerFluentComponents(fluentCheckbox, fluentRadioGroup, fluentButton);\n  registerMgtPickerComponent();\n  registerComponent('todo', MgtTodo);\n};\n\n/**\n * component enables the user to view, add, remove, complete, or edit todo tasks. It works with tasks in Microsoft Planner or Microsoft To-Do.\n *\n * @export\n * @class MgtTodo\n * @extends {MgtTasksBase}\n *\n * @cssprop --task-color - {Color} - Task text color\n * @cssprop --task-background-color - {Color} - Task background color\n * @cssprop --task-complete-background - {Color} - Task background color when completed\n * @cssprop --task-date-input-active-color - {Color} - Task date input active color\n * @cssprop --task-date-input-hover-color - {Color} - Task date input hover color\n * @cssprop --task-background-color-hover - {Color} - Task background when hovered\n * @cssprop --task-box-shadow - {Color} - Task box shadow color\n * @cssprop --task-border-completed - {Color} - Task border color when completed\n * @cssprop --task-radio-background-color - {Color} - Task radio background color\n */\nexport class MgtTodo extends MgtTasksBase {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  public static get styles() {\n    return styles;\n  }\n  /**\n   * Strings for localization\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  /**\n   * Optional filter function when rendering tasks\n   *\n   * @type {TodoFilter}\n   * @memberof MgtTodo\n   */\n  public taskFilter: TodoFilter;\n\n  /**\n   * Get the scopes required for todo\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtTodo\n   */\n  public static get requiredScopes(): string[] {\n    return ['tasks.read', 'tasks.readwrite'];\n  }\n  @state() private _tasks: TodoTask[];\n  @state() private _taskBeingUpdated: TodoTask;\n  @state() private _updatingTaskDate: boolean;\n  @state() private _isChangedDueDate = false;\n\n  @state() private _isLoadingTasks: boolean;\n  @state() private _loadingTasks: string[];\n  @state() private _newTaskDueDate: Date;\n  @state() private _newTaskName: string;\n  @state() private _changedTaskName: string;\n  @state() private _isNewTaskBeingAdded: boolean;\n  @state() private _graph: IGraph;\n  @state() private currentList: TodoTaskList;\n  @state() private _isDarkMode = false;\n\n  constructor() {\n    super();\n    this._graph = null;\n    this._newTaskDueDate = null;\n    this._tasks = [];\n    this._loadingTasks = [];\n    this._isLoadingTasks = false;\n    this.addEventListener('selectionChanged', this.handleSelectionChanged);\n    this.addEventListener('blur', this.handleBlur);\n  }\n\n  /**\n   * updates provider state\n   *\n   * @memberof MgtTodo\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('darkmodechanged', this.onThemeChanged);\n    // invoked to ensure we have the correct initial value for _isDarkMode\n    this.onThemeChanged();\n  }\n\n  /**\n   * removes updates on provider state\n   *\n   * @memberof MgtTodo\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('darkmodechanged', this.onThemeChanged);\n    super.disconnectedCallback();\n  }\n\n  private readonly onThemeChanged = () => {\n    this._isDarkMode = isElementDark(this);\n  };\n\n  /**\n   * Render the list of todo tasks\n   */\n  protected renderTasks(): TemplateResult {\n    if (this._isLoadingTasks) {\n      return this.renderLoadingTask();\n    }\n\n    let tasks = this._tasks;\n    if (tasks && this.taskFilter) {\n      tasks = tasks.filter(task => this.taskFilter(task));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const completedTasks = tasks.filter(task => task.status === 'completed');\n\n    const taskTemplates = repeat(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      tasks.filter(task => task.status !== 'completed'),\n      task => task.id,\n      task => this.renderTask(task)\n    );\n\n    const completedTaskTemplates = repeat(\n      completedTasks\n        .sort((a, b) => {\n          return a.lastModifiedDateTime < b.lastModifiedDateTime ? -1 : 1;\n        })\n        .filter(task => task.status === 'completed'),\n      task => task.id,\n      task => this.renderTask(task)\n    );\n    return html`\n      ${taskTemplates}\n      ${completedTaskTemplates}\n    `;\n  }\n\n  /**\n   * Render the generic picker or the task list displayName.\n   *\n   */\n  protected renderPicker() {\n    if (this.targetId) {\n      return html`<p>${this.currentList?.displayName}</p>`;\n    } else {\n      return mgtHtml`\n        <mgt-picker\n          resource=\"me/todo/lists\"\n          scopes=\"tasks.read, tasks.readwrite\"\n          key-name=\"displayName\"\n          selected-value=\"${ifDefined(this.currentList?.displayName)}\"\n          placeholder=\"Select a task list\">\n        </mgt-picker>`;\n    }\n  }\n\n  /**\n   * Render the panel for creating a new task\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderNewTask = (): TemplateResult => {\n    const addIcon = this._newTaskName\n      ? html`\n        <fluent-checkbox\n          class=\"task-add-icon\"\n          @click=\"${this.addTask}\">\n        </fluent-checkbox>\n      `\n      : html`\n        <span class=\"add-icon\">${getSvg(SvgIcon.Add)}</span>\n      `;\n\n    const cancelIcon = html`\n      <fluent-button\n        aria-label=${this.strings.cancelAddingTask}\n        class=\"task-cancel-icon\" \n        @click=\"${this.clearNewTaskData}\"\n      >\n        ${getSvg(SvgIcon.Cancel)}\n      </fluent-button>\n    `;\n    const dateClass = { dark: this._isDarkMode, date: true };\n    const calendarTemplate = html`\n      <fluent-text-field\n        autocomplete=\"off\"\n        type=\"date\"\n        id=\"new-taskDate-input\"\n        class=\"${classMap(dateClass)}\"\n        aria-label=\"${this.strings.newTaskDateInputLabel}\"\n        .value=\"${this.dateToInputValue(this._newTaskDueDate)}\"\n        @change=\"${this.handleDateChange}\"\n      >\n      </fluent-text-field>\n    `;\n\n    const newTaskDetails = this.readOnly\n      ? nothing\n      : html`\n      <fluent-text-field\n        autocomplete=\"off\"\n        appearance=\"outline\"\n        class=\"new-task\"\n        id=\"new-task-name-input\"\n        aria-label=\"${this.strings.newTaskLabel}\"\n        .value=${this._newTaskName}\n        placeholder=\"${this.strings.newTaskPlaceholder}\"\n        @keydown=\"${this.handleKeyDown}\"\n        @input=\"${this.handleInput}\"\n      >\n        <div slot=\"start\" class=\"start\">${addIcon}</div>\n        ${\n          this._newTaskName\n            ? html`\n              <div slot=\"end\" class=\"end\">\n                <span class=\"calendar\">${calendarTemplate}</span>\n                ${cancelIcon}\n              </div> `\n            : html``\n        }\n      </fluent-text-field>\n    `;\n    return html`\n      ${\n        this.currentList\n          ? html`\n            <div dir=${this.direction} class=\"task new-task incomplete\">\n              ${newTaskDetails}\n            </div>\n        `\n          : html``\n      }  \n     `;\n  };\n\n  /**\n   * Handle a change in taskList.\n   *\n   * @protected\n   * @param {CustomEvent} e\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n\n  protected handleSelectionChanged = (e: CustomEvent<TodoTaskList>) => {\n    this.currentList = e.detail;\n    void this.loadTasks(this.currentList);\n  };\n\n  /**\n   * Render task details.\n   *\n   * @protected\n   * @param {TodoTask} task\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderTaskDetails = (task: TodoTask) => {\n    const context = { task, list: this.currentList };\n\n    if (this.hasTemplate('task')) {\n      return this.renderTemplate('task', context, task.id);\n    }\n\n    let taskDetailsTemplate = null;\n\n    const taskDeleteTemplate = html`\n      <fluent-button class=\"task-delete\"\n        @click=\"${() => this.removeTask(task.id)}\"\n        aria-label=\"${this.strings.deleteTaskOption}\">\n        ${getSvg(SvgIcon.Delete)}\n      </fluent-button>`;\n\n    if (this.hasTemplate('task-details')) {\n      taskDetailsTemplate = this.renderTemplate('task-details', context, `task-details-${task.id}`);\n    } else {\n      const dateClass = { dark: this._isDarkMode, date: true, 'task-due': true };\n      const calendarTemplate = html`\n        <fluent-text-field\n          autocomplete=\"off\"\n          type=\"date\"\n          id=\"${task.id}-taskDate-input\"\n          class=\"${classMap(dateClass)}\"\n          aria-label=\"${this.strings.changeTaskDateInputLabel}\"\n          .value=\"${\n            task.dueDateTime\n              ? this.dateToInputValue(new Date(task.dueDateTime.dateTime))\n              : this._taskBeingUpdated === task\n              ? this.dateToInputValue(this._newTaskDueDate)\n              : nothing\n          }\"\n          @change=\"${this.handleDateUpdate}\"\n          @focus=\"${(e: KeyboardEvent) => this.updatingTask(e, task)}\"\n          @blur=\"${this.handleBlur}\"\n        >\n        </fluent-text-field>\n      `;\n      const changeTaskDetailsTemplate = html`\n          <fluent-text-field \n            autocomplete=\"off\"\n            appearance=\"outline\"\n            class=\"title\"\n            id=${task.id}\n            .value=\"${task.title ? task.title : this._taskBeingUpdated === task ? this._changedTaskName : ''}\"\n            aria-label=\"${this.strings.editTaskLabel}\"\n            @keydown=\"${(e: KeyboardEvent) => this.handleChange(e, task)}\"\n            @input=\"${(e: KeyboardEvent) => this.handleChange(e, task)}\"\n            @focus=\"${(e: KeyboardEvent) => this.updatingTask(e, task)}\"\n          >\n          </fluent-text-field>\n          ${task.dueDateTime || this._taskBeingUpdated === task ? html`${calendarTemplate}` : nothing}\n          ${taskDeleteTemplate}\n      `;\n\n      taskDetailsTemplate = html`\n      <div class=\"task-details\">\n        ${changeTaskDetailsTemplate}\n      </div>\n      `;\n    }\n\n    return html`${taskDetailsTemplate}`;\n  };\n\n  /**\n   * Render a task in the list.\n   *\n   * @protected\n   * @param {TodoTask} task\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderTask = (task: TodoTask) => {\n    const isCompleted = task.status === 'completed';\n\n    const taskClasses = classMap({\n      complete: isCompleted,\n      'read-only': this.readOnly,\n      task: true\n    });\n\n    const checkboxClasses = classMap({\n      complete: isCompleted\n    });\n\n    const taskCheckContent = isCompleted ? html`${getSvg(SvgIcon.CheckMark)}` : html`${getSvg(SvgIcon.Radio)}`;\n\n    return html`\n      <div class=${taskClasses} @blur=\"${this.handleBlur}\">\n        <fluent-checkbox \n          id=${task.id} \n          class=${checkboxClasses}\n          ?checked=${isCompleted}\n          @click=\"${() => this.handleTaskCheckClick(task)}\"\n          @keydown=\"${(e: KeyboardEvent) => this.handleTaskCheckKeydown(e, task)}\"\n        >\n          <div slot=\"checked-indicator\">\n            ${taskCheckContent}\n          </div>\n        </fluent-checkbox>\n        ${this.renderTaskDetails(task)}\n      </div>\n    `;\n  };\n\n  /**\n   * loads tasks from dataSource\n   *\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected loadState = async (): Promise<void> => {\n    const provider = Providers.globalProvider;\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return;\n    }\n\n    this._isLoadingTasks = true;\n    if (!this._graph) {\n      const graph = provider.graph.forComponent(this);\n      this._graph = graph;\n    }\n\n    if (!this.currentList && !this.initialId) {\n      const lists = await getTodoTaskLists(this._graph);\n      const defaultList = lists?.find(l => l.wellknownListName === 'defaultList');\n      if (defaultList) await this.loadTasks(defaultList);\n    }\n\n    if (this.targetId) {\n      // Call to get the displayName of the list\n      this.currentList = await getTodoTaskList(this._graph, this.targetId);\n      this._tasks = await getTodoTasks(this._graph, this.targetId);\n    } else if (this.initialId) {\n      // Call to get the displayName of the list\n      this.currentList = await getTodoTaskList(this._graph, this.initialId);\n      this._tasks = await getTodoTasks(this._graph, this.initialId);\n    }\n    this._isLoadingTasks = false;\n  };\n\n  /**\n   * Send a request the Graph to create a new todo task item\n   *\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected async createNewTask(): Promise<void> {\n    const listId = this.currentList.id;\n    const taskData = {\n      title: this._newTaskName\n    };\n\n    if (this._newTaskDueDate) {\n      // eslint-disable-next-line @typescript-eslint/dot-notation\n      taskData['dueDateTime'] = {\n        dateTime: new Date(this._newTaskDueDate).toLocaleDateString(),\n        timeZone: 'UTC'\n      };\n    }\n\n    const task = await createTodoTask(this._graph, listId, taskData);\n    this._tasks.unshift(task);\n  }\n\n  /**\n   * Create a new todo task and add it to the list\n   *\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected addTask = async (): Promise<void> => {\n    if (this._isNewTaskBeingAdded || !this._newTaskName) {\n      return;\n    }\n\n    this._isNewTaskBeingAdded = true;\n\n    try {\n      await this.createNewTask();\n    } finally {\n      this.clearNewTaskData();\n      this._isNewTaskBeingAdded = false;\n    }\n  };\n\n  /**\n   *Update a todo task in the todo list\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected updateTask = async (task: TodoTask): Promise<void> => {\n    try {\n      if (!this._changedTaskName && !this._isChangedDueDate) {\n        return;\n      }\n      await this.updateTaskItem(task);\n    } finally {\n      this.clearNewTaskData();\n    }\n  };\n\n  /**\n   * Send a request the Graph to update a todo task item\n   *\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected async updateTaskItem(task: TodoTask): Promise<void> {\n    const listId = this.currentList.id;\n    let taskData: TodoTask = {};\n\n    if (this._changedTaskName && this._changedTaskName !== task.title) {\n      taskData = {\n        title: this._changedTaskName\n      };\n    }\n\n    if (this._updatingTaskDate) {\n      if (!this._isChangedDueDate) {\n        return;\n      }\n      if (this._newTaskDueDate) {\n        taskData.dueDateTime = {\n          dateTime: new Date(this._newTaskDueDate).toLocaleDateString(),\n          timeZone: 'UTC'\n        };\n      } else if (this._isChangedDueDate && !this._newTaskDueDate) {\n        taskData.dueDateTime = null;\n      } else {\n        taskData.dueDateTime = null;\n      }\n    }\n\n    if (!Object.keys(taskData).length) {\n      return;\n    }\n    const updatedTask = await updateTodoTask(this._graph, listId, task.id, taskData);\n    const taskIndex = this._tasks.findIndex(t => t.id === updatedTask.id);\n    this._tasks[taskIndex] = updatedTask;\n\n    this._loadingTasks = this._loadingTasks.filter(id => id !== updatedTask.id);\n  }\n\n  /**\n   * Clear out the new task metadata input fields\n   *\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected clearNewTaskData = (): void => {\n    this._newTaskDueDate = null;\n    this._newTaskName = '';\n    this._changedTaskName = '';\n    this._isChangedDueDate = false;\n  };\n\n  /**\n   * Clear the state of the component\n   *\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected clearState = (): void => {\n    super.clearState();\n    this.currentList = null;\n    this._tasks = [];\n    this._loadingTasks = [];\n    this._isLoadingTasks = false;\n    this._taskBeingUpdated = null;\n  };\n\n  private readonly loadTasks = async (list: TodoTaskList): Promise<void> => {\n    this._isLoadingTasks = true;\n    this.currentList = list;\n\n    this._tasks = await getTodoTasks(this._graph, list.id);\n\n    this._isLoadingTasks = false;\n  };\n\n  private readonly updateTaskStatus = async (task: TodoTask, taskStatus: TaskStatus): Promise<void> => {\n    this._loadingTasks = [...this._loadingTasks, task.id];\n\n    // Change the task status\n    task.status = taskStatus;\n\n    // Send update request\n    const listId = this.currentList.id;\n    task = await updateTodoTask(this._graph, listId, task.id, task);\n\n    const taskIndex = this._tasks.findIndex(t => t.id === task.id);\n    this._tasks[taskIndex] = task;\n\n    this._loadingTasks = this._loadingTasks.filter(id => id !== task.id);\n  };\n\n  private readonly removeTask = async (taskId: string): Promise<void> => {\n    this._tasks = this._tasks.filter(t => t.id !== taskId);\n    this.requestUpdate();\n\n    const listId = this.currentList.id;\n    await deleteTodoTask(this._graph, listId, taskId);\n\n    this._tasks = this._tasks.filter(t => t.id !== taskId);\n  };\n\n  private handleTaskCheckClick(task: TodoTask) {\n    this.handleTaskClick(task);\n    if (!this.readOnly) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (task.status === 'completed') {\n        void this.updateTaskStatus(task, 'notStarted');\n      } else {\n        void this.updateTaskStatus(task, 'completed');\n      }\n    }\n  }\n\n  private handleTaskCheckKeydown(e: KeyboardEvent, task: TodoTask) {\n    if (e.key === 'Enter' && !this.readOnly) {\n      this.handleTaskClick(task);\n      if (task.status === 'completed') {\n        void this.updateTaskStatus(task, 'notStarted');\n      } else {\n        void this.updateTaskStatus(task, 'completed');\n      }\n    }\n  }\n\n  private readonly handleInput = (e: MouseEvent) => {\n    if ((e.target as HTMLInputElement).id === 'new-task-name-input') {\n      this._newTaskName = (e.target as HTMLInputElement).value;\n    }\n  };\n\n  private readonly handleChange = async (e: KeyboardEvent, task: TodoTask) => {\n    if ((e.target as HTMLInputElement).id === task.id) {\n      if (e.key === 'Enter') {\n        await this.updateTask(task);\n        (e.target as HTMLInputElement)?.blur();\n      }\n      this._changedTaskName = (e.target as HTMLInputElement).value;\n    }\n  };\n\n  private readonly handleKeyDown = async (e: KeyboardEvent) => {\n    if (e.key === 'Enter' && (e.target as HTMLInputElement).id === 'new-task-name-input') {\n      await this.addTask();\n    }\n  };\n\n  private readonly updatingTask = (e: KeyboardEvent, task: TodoTask) => {\n    if ((e.target as HTMLInputElement).id === task.id) {\n      this._taskBeingUpdated = task;\n    }\n    if ((e.target as HTMLInputElement).id === `${task.id}-taskDate-input`) {\n      this._updatingTaskDate = true;\n      this._taskBeingUpdated = task;\n    }\n  };\n\n  private readonly handleBlur = () => {\n    const task = this._taskBeingUpdated;\n    const targets = this.renderRoot.querySelectorAll('fluent-text-field');\n    for (const target of targets) {\n      if (\n        task &&\n        ((target as HTMLInputElement).id === task.id || (target as HTMLInputElement).id === `${task.id}-taskDate-input`)\n      ) {\n        void this.updateTask(task);\n        (target as HTMLElement)?.blur();\n        this._taskBeingUpdated = null;\n        this._updatingTaskDate = false;\n      }\n    }\n  };\n\n  private readonly handleDateChange = (e: Event) => {\n    const value = (e.target as HTMLInputElement).value;\n    if (value) {\n      this._newTaskDueDate = new Date(value + 'T17:00');\n    } else {\n      this._newTaskDueDate = null;\n    }\n  };\n\n  private readonly handleDateUpdate = (e: Event) => {\n    const task = this._taskBeingUpdated;\n    if (task) {\n      const value = (e.target as HTMLInputElement).value;\n      if (value) {\n        this._newTaskDueDate = new Date(value + 'T17:00');\n      } else {\n        this._newTaskDueDate = null;\n      }\n\n      if (task.dueDateTime && this._newTaskDueDate) {\n        this._isChangedDueDate = new Date(task.dueDateTime.dateTime) !== this._newTaskDueDate;\n      } else if (task.dueDateTime || this._newTaskDueDate) {\n        this._isChangedDueDate = true;\n      } else {\n        this._isChangedDueDate = false;\n      }\n    }\n  };\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { SwatchRGB, baseLayerLuminance, isDark } from '@fluentui/web-components';\n\n/**\n * Utility to help quickly determine if an element is dark based fluentui theme\n *\n * @param element HTMLElement to check if dark\n * @returns true if the element is dark\n */\nexport const isElementDark = (element: HTMLElement) => {\n  const luminance = baseLayerLuminance.getValueFor(element);\n  return isDark(SwatchRGB.create(luminance, luminance, luminance));\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { TodoFilter } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtTodoComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type TodoProps = {\n\ttaskFilter?: TodoFilter;\n\treadOnly?: boolean;\n\thideHeader?: boolean;\n\thideOptions?: boolean;\n\ttargetId?: string;\n\tinitialId?: string;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Todo = wrapMgt<TodoProps>('todo', registerMgtTodoComponent);\n\n","import {\n  DataGrid,\n  DataGridBody,\n  DataGridCell,\n  DataGridHeader,\n  DataGridHeaderCell,\n  DataGridRow,\n  TableCellLayout,\n  TableColumnDefinition,\n  Toolbar,\n  ToolbarButton,\n  ToolbarGroup,\n  createTableColumn,\n  makeStyles\n} from '@fluentui/react-components';\n\nimport { SkeletonItem } from '@fluentui/react-components';\nimport { FeedRegular } from '@fluentui/react-icons';\nimport { Get, MgtTemplateProps, Person, PersonCardInteraction, ViewType } from '@microsoft/mgt-react';\nimport React from 'react';\n\nexport interface IIndicentsProps {}\nconst useStyles = makeStyles({\n  toolbar: {\n    justifyContent: 'space-between'\n  }\n});\n\nconst getColumns = (shimmered: boolean): TableColumnDefinition<any>[] => {\n  const columns: TableColumnDefinition<any>[] = [\n    createTableColumn<any>({\n      columnId: 'name',\n      renderHeaderCell: () => {\n        return 'Name';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? (\n              <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} />\n            ) : (\n              <Person userId={item.id} view={ViewType.oneline} personCardInteraction={PersonCardInteraction.hover} />\n            )}\n          </TableCellLayout>\n        );\n      }\n    }),\n    createTableColumn<any>({\n      columnId: 'jobTitle',\n      renderHeaderCell: () => {\n        return 'Job Title';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} /> : item.jobTitle}\n          </TableCellLayout>\n        );\n      }\n    }),\n    createTableColumn<any>({\n      columnId: 'mobilePhone',\n      renderHeaderCell: () => {\n        return 'Mobile Phone';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} /> : item.mobilePhone}\n          </TableCellLayout>\n        );\n      }\n    }),\n    createTableColumn<any>({\n      columnId: 'officeLocation',\n      renderHeaderCell: () => {\n        return 'Office Location';\n      },\n      renderCell: item => {\n        return (\n          <TableCellLayout>\n            {shimmered ? <SkeletonItem shape=\"rectangle\" style={{ width: '120px' }} /> : item.officeLocation}\n          </TableCellLayout>\n        );\n      }\n    })\n  ];\n\n  return columns;\n};\n\nexport function DirectReports(props: IIndicentsProps) {\n  return (\n    <Get resource={`me/directReports`}>\n      <DataGridTemplate template=\"default\"></DataGridTemplate>\n      <DataGridTemplate template=\"loading\"></DataGridTemplate>\n      <NoDataTemplate template=\"no-data\"></NoDataTemplate>\n    </Get>\n  );\n}\n\nconst DataGridTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [teams] = React.useState<any[]>(props.dataContext.value);\n  const [isLoading] = React.useState<boolean>(props.dataContext && !props.dataContext.value);\n  const [selectedTeam, setSelectedTeam] = React.useState<any>(null);\n\n  const onSelectionChange = (e: any, data: any) => {\n    const [selectedItem] = data.selectedItems;\n    const team = teams.find(i => i.id === selectedItem);\n    setSelectedTeam(team);\n  };\n\n  return (\n    <div>\n      <Toolbar className={styles.toolbar}>\n        <ToolbarGroup role=\"presentation\">\n          <ToolbarButton\n            icon={<FeedRegular />}\n            disabled={!selectedTeam}\n            as=\"a\"\n            href={`https://www.office.com/feed?auth=2#/user/${selectedTeam?.id}`}\n            target=\"_blank\"\n          >\n            View feed\n          </ToolbarButton>\n        </ToolbarGroup>\n      </Toolbar>\n      <DataGrid\n        columns={getColumns(isLoading)}\n        items={isLoading ? [...Array<number>(5)] : teams}\n        selectionMode=\"single\"\n        onSelectionChange={onSelectionChange}\n        getRowId={item => (isLoading ? Math.random() : item.id)}\n      >\n        <DataGridHeader>\n          <DataGridRow>\n            {({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}\n          </DataGridRow>\n        </DataGridHeader>\n        <DataGridBody<any>>\n          {({ item, rowId }) => (\n            <DataGridRow<any> key={rowId}>\n              {({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}\n            </DataGridRow>\n          )}\n        </DataGridBody>\n      </DataGrid>\n    </div>\n  );\n};\n\nconst NoDataTemplate = (props: MgtTemplateProps) => {\n  return <>You don't have direct reports</>;\n};\n","import * as React from 'react';\nimport { PageHeader } from '../components/PageHeader';\nimport { Providers, Todo } from '@microsoft/mgt-react';\nimport { DirectReports } from '../components/DirectReports';\nimport {\n  SelectTabData,\n  SelectTabEvent,\n  Tab,\n  TabList,\n  TabValue,\n  makeStyles,\n  shorthands\n} from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  panels: {\n    ...shorthands.padding('10px')\n  }\n});\n\nconst DashboardPage: React.FunctionComponent = () => {\n  const styles = useStyles();\n\n  const [taskListId, setTaskListId] = React.useState<string>('');\n  const [selectedTab, setSelectedTab] = React.useState<TabValue>('tasks');\n\n  const onTabSelect = (event: SelectTabEvent, data: SelectTabData) => {\n    setSelectedTab(data.value);\n  };\n\n  React.useEffect(() => {\n    const fetchTaskList = async () => {\n      const taskList = await Providers.globalProvider.graph.client.api('/me/todo/lists?$top=1').get();\n      setTaskListId(taskList.value[0].id);\n    };\n\n    fetchTaskList();\n  }, []);\n\n  return (\n    <>\n      <PageHeader\n        title={'My Dashboard'}\n        description={'This dashboard helps you being productive with your tasks and your incidents.'}\n      ></PageHeader>\n      <div>\n        <TabList selectedValue={selectedTab} onTabSelect={onTabSelect}>\n          <Tab value=\"tasks\">My Tasks</Tab>\n          <Tab value=\"directReports\">My Direct Reports</Tab>\n        </TabList>\n        <div className={styles.panels}>\n          {selectedTab === 'tasks' && taskListId && <Todo initialId={taskListId}></Todo>}\n          {selectedTab === 'directReports' && <DirectReports />}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DashboardPage;\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  comboboxPlaceholder: 'Select an item'\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{--max-height:var(--picker-max-height, 380px);font-family:var(--default-font-family)}:host .picker{background-color:var(--picker-background-color,transparent)}:host fluent-combobox::part(selected-value)::placeholder{color:var(--picker-text-color,var(--input-filled-placeholder-rest))}:host fluent-combobox::part(selected-value):hover::placeholder{color:var(--picker-text-color-hover,var(--secondary-text-hover-color))}[dir=rtl] .picker{direction:rtl}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { MgtTemplatedComponent, mgtHtml } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { fluentCombobox, fluentOption } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport '../../styles/style-helper';\nimport { Entity } from '@microsoft/microsoft-graph-types';\nimport { DataChangedDetail, registerMgtGetComponent } from '../mgt-get/mgt-get';\nimport { styles } from './mgt-picker-css';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport const registerMgtPickerComponent = () => {\n  registerFluentComponents(fluentCombobox, fluentOption);\n\n  registerMgtGetComponent();\n  registerComponent('picker', MgtPicker);\n};\n\n/**\n * Web component that allows a single entity pick from a generic endpoint from Graph. Uses mgt-get.\n *\n * @fires {CustomEvent<any>} selectionChanged - Fired when an option is clicked/selected\n * @export\n * @class MgtPicker\n * @extends {MgtTemplatedComponent}\n *\n * @cssprop --picker-background-color - {Color} Picker component background color\n * @cssprop --picker-list-max-height - {String} max height for options list. Default value is 380px.\n */\nexport class MgtPicker extends MgtTemplatedComponent {\n  protected get strings() {\n    return strings;\n  }\n\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'resource',\n    type: String\n  })\n  public resource: string;\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'v1.0';\n\n  /**\n   * Maximum number of pages to get for the resource\n   * default = 3\n   * if <= 0, all pages will be fetched\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'max-pages',\n    type: Number\n  })\n  public maxPages = 3;\n\n  /**\n   * A placeholder for the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'placeholder',\n    type: String\n  })\n  public placeholder: string;\n\n  /**\n   * Key to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'key-name',\n    type: String\n  })\n  public keyName: string;\n\n  /**\n   * Entity to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'entity-type',\n    type: String\n  })\n  public entityType: string;\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'scopes',\n    converter: value => {\n      return value ? value.toLowerCase().split(',') : null;\n    }\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Enables cache on the response from the specified resource\n   * default = false\n   *\n   * @type {boolean}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-enabled',\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    type: Number\n  })\n  public cacheInvalidationPeriod = 0;\n\n  /**\n   * Sets the currently selected value for the picker\n   * Must be present as an option in the supplied data returned from the the underlying graph query\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'selected-value',\n    type: String\n  })\n  public selectedValue: string;\n\n  private isRefreshing: boolean;\n\n  @state() private response: Entity[];\n\n  constructor() {\n    super();\n    this.placeholder = this.strings.comboboxPlaceholder;\n    this.entityType = null;\n    this.keyName = null;\n    this.isRefreshing = false;\n  }\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtPicker\n   */\n  public refresh(hardRefresh = false) {\n    this.isRefreshing = true;\n    if (hardRefresh) {\n      this.clearState();\n    }\n    void this.requestStateUpdate(hardRefresh);\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtPicker\n   */\n  protected clearState(): void {\n    this.response = null;\n    this.error = null;\n  }\n\n  /**\n   * Invoked on each update to perform rendering the picker. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  public render() {\n    if (this.isLoadingState && !this.response) {\n      return this.renderTemplate('loading', null);\n    } else if (this.hasTemplate('error')) {\n      const error = this.error ? (this.error as Error) : null;\n      return this.renderTemplate('error', { error }, 'error');\n    } else if (this.hasTemplate('no-data')) {\n      return this.renderTemplate('no-data', null);\n    }\n\n    return this.response?.length > 0 ? this.renderPicker() : this.renderGet();\n  }\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderPicker(): TemplateResult {\n    return mgtHtml`\n      <fluent-combobox\n        @keydown=${this.handleComboboxKeydown}\n        current-value=${ifDefined(this.selectedValue)}\n        part=\"picker\"\n        class=\"picker\"\n        id=\"combobox\"\n        autocomplete=\"list\"\n        placeholder=${this.placeholder}>\n          ${this.response.map(\n            item => html`\n            <fluent-option value=${item.id} @click=${(e: MouseEvent) => this.handleClick(e, item)}> ${\n              item[this.keyName]\n            } </fluent-option>`\n          )}\n      </fluent-combobox>\n     `;\n  }\n\n  /**\n   * Renders mgt-get which does a GET request to the resource.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderGet(): TemplateResult {\n    return mgtHtml`\n      <mgt-get\n        class=\"mgt-get\"\n        resource=${this.resource}\n        version=${this.version}\n        .scopes=${this.scopes}\n        max-pages=${this.maxPages}\n        ?cache-enabled=${this.cacheEnabled}\n        ?cache-invalidation-period=${this.cacheInvalidationPeriod}>\n      </mgt-get>`;\n  }\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPicker\n   */\n  protected async loadState() {\n    if (!this.response) {\n      const parent = this.renderRoot.querySelector('.mgt-get');\n      if (parent) {\n        parent.addEventListener('dataChange', (e: CustomEvent<DataChangedDetail>): void => this.handleDataChange(e));\n      } else {\n        console.error(\n          '🦒: mgt-picker component requires a child mgt-get component. Something has gone horribly wrong.'\n        );\n      }\n    }\n    this.isRefreshing = false;\n    // hack to maintain method signature contract\n    await Promise.resolve();\n  }\n\n  private handleDataChange(e: CustomEvent<DataChangedDetail>): void {\n    const response = e.detail.response.value;\n    const error = e.detail.error ? e.detail.error : null;\n    this.response = response;\n    this.error = error;\n  }\n\n  private handleClick(e: MouseEvent, item: Entity) {\n    this.fireCustomEvent('selectionChanged', item, true, false, true);\n  }\n\n  /**\n   * Handles getting the fluent option item in the dropdown and fires a custom\n   * event with it when you press Enter or Backspace keys.\n   *\n   * @param {KeyboardEvent} e\n   */\n  private readonly handleComboboxKeydown = (e: KeyboardEvent) => {\n    let value: string;\n    let item: Entity;\n    const keyName: string = e.key;\n    const comboBox: HTMLElement = e.target as HTMLElement;\n    const fluentOptionEl = comboBox.querySelector('.selected');\n    if (fluentOptionEl) {\n      value = fluentOptionEl.getAttribute('value');\n    }\n\n    if ('Enter' === keyName) {\n      if (value) {\n        item = this.response.filter(res => res.id === value).pop();\n        this.fireCustomEvent('selectionChanged', item, true, false, true);\n      }\n    }\n  };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n"],"names":["strings","cancelNewTaskSubtitle","newTaskPlaceholder","addTaskButtonSubtitle","removeTaskSubtitle","MgtTasksBase","_MgtTemplatedComponen","_inherits","_super","_createSuper","_this","_classCallCheck","call","handleTaskClick","task","fireCustomEvent","onResize","mediaQuery","_previousMediaQuery","requestUpdate","registerFluentComponents","fluentTextField","fluentButton","fluentCalendar","clearState","_createClass","key","get","value","name","oldVal","newVal","_get","_getPrototypeOf","prototype","this","requestStateUpdate","window","addEventListener","removeEventListener","provider","Providers","globalProvider","state","ProviderState","SignedIn","html","_templateObject","_taggedTemplateLiteral","isLoadingState","renderLoadingTask","picker","renderPicker","newTaskTemplate","renderNewTask","tasksTemplate","renderTasks","_templateObject2","direction","_templateObject3","date","Date","getTime","getTimezoneOffset","toISOString","split","MgtTemplatedComponent","__decorate","property","attribute","type","Boolean","String","getTodoTasks","graph","listId","__awaiter","_regeneratorRuntime","mark","_callee","tasks","wrap","_context","prev","next","api","concat","header","middlewareOptions","prepScopes","sent","abrupt","stop","getTodoTaskLists","_callee3","taskLists","_context3","getTodoTaskList","_callee4","_context4","createTodoTask","taskData","_callee5","_context5","post","deleteTodoTask","taskId","_callee7","_context7","delete","updateTodoTask","_callee9","_context9","patch","styles","css","newTaskLabel","editTaskLabel","deleteTaskOption","editTaskOption","dueDate","newTaskDateInputLabel","changeTaskDateInputLabel","newTaskNameInputLabel","cancelAddingTask","MgtTodo","_MgtTasksBase","_thisSuper","_isChangedDueDate","_isDarkMode","onThemeChanged","element","luminance","baseLayerLuminance","getValueFor","isDark","SwatchRGB","create","isElementDark","_assertThisInitialized","addIcon","_newTaskName","addTask","getSvg","SvgIcon","Add","cancelIcon","clearNewTaskData","Cancel","dateClass","dark","calendarTemplate","_templateObject4","classMap","dateToInputValue","_newTaskDueDate","handleDateChange","newTaskDetails","readOnly","nothing","_templateObject5","handleKeyDown","handleInput","_templateObject6","_templateObject7","_templateObject8","currentList","_templateObject9","_templateObject10","handleSelectionChanged","e","detail","loadTasks","renderTaskDetails","context","list","hasTemplate","renderTemplate","id","taskDetailsTemplate","taskDeleteTemplate","_templateObject11","removeTask","Delete","_templateObject12","dueDateTime","dateTime","_taskBeingUpdated","handleDateUpdate","updatingTask","handleBlur","changeTaskDetailsTemplate","_templateObject13","title","_changedTaskName","handleChange","_templateObject14","_templateObject15","_templateObject16","renderTask","isCompleted","status","taskClasses","complete","checkboxClasses","taskCheckContent","_templateObject17","CheckMark","_templateObject18","Radio","_templateObject19","handleTaskCheckClick","handleTaskCheckKeydown","loadState","lists","defaultList","_isLoadingTasks","_graph","forComponent","initialId","find","l","wellknownListName","targetId","_tasks","_callee2","_context2","_isNewTaskBeingAdded","createNewTask","finish","updateTask","updateTaskItem","_loadingTasks","updateTaskStatus","taskStatus","taskIndex","_toConsumableArray","findIndex","t","filter","_callee6","_context6","target","_a","blur","_callee8","_context8","_updatingTaskDate","_step","targets","renderRoot","querySelectorAll","_iterator","_createForOfIteratorHelper","s","n","done","err","f","_this2","taskFilter","completedTasks","taskTemplates","repeat","completedTaskTemplates","sort","a","b","lastModifiedDateTime","_templateObject20","_templateObject21","displayName","mgtHtml","_templateObject22","ifDefined","_b","toLocaleDateString","timeZone","unshift","_context10","Object","keys","length","updatedTask","_callee10","Todo","wrapMgt","fluentCheckbox","fluentRadioGroup","registerMgtPickerComponent","registerComponent","useStyles","makeStyles","toolbar","justifyContent","DirectReports","props","_jsxs","Get","resource","children","_jsx","DataGridTemplate","template","NoDataTemplate","shimmered","_React$useState","React","dataContext","teams","_slicedToArray","_React$useState3","isLoading","_React$useState5","_React$useState6","selectedTeam","setSelectedTeam","Toolbar","className","ToolbarGroup","role","ToolbarButton","icon","FeedRegular","disabled","as","href","DataGrid","columns","createTableColumn","columnId","renderHeaderCell","renderCell","item","TableCellLayout","SkeletonItem","shape","style","width","Person","userId","view","ViewType","oneline","personCardInteraction","PersonCardInteraction","hover","jobTitle","mobilePhone","officeLocation","items","Array","selectionMode","onSelectionChange","data","selectedItem","selectedItems","team","i","getRowId","Math","random","DataGridHeader","DataGridRow","_ref","DataGridHeaderCell","DataGridBody","_ref2","rowId","_ref3","DataGridCell","_Fragment","panels","_objectSpread","shorthands","padding","_React$useState2","taskListId","setTaskListId","_React$useState4","selectedTab","setSelectedTab","fetchTaskList","_asyncToGenerator","taskList","client","apply","arguments","PageHeader","description","TabList","selectedValue","onTabSelect","event","Tab","comboboxPlaceholder","fluentCombobox","fluentOption","registerMgtGetComponent","MgtPicker","version","maxPages","scopes","cacheEnabled","cacheInvalidationPeriod","handleComboboxKeydown","keyName","fluentOptionEl","querySelector","getAttribute","response","res","pop","placeholder","entityType","isRefreshing","hardRefresh","undefined","error","renderGet","map","handleClick","parent","_this3","handleDataChange","console","Promise","resolve","Number","converter","toLowerCase"],"sourceRoot":""}