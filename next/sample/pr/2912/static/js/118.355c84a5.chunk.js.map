{"version":3,"file":"static/js/118.355c84a5.chunk.js","mappings":"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","sources":["../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker.ts","../../../packages/mgt-element/dist/es6/src/BetaGraph.ts","../../../packages/mgt-react/src/generated/file-list.ts","../../../packages/mgt-react/src/generated/picker.ts","../../../packages/mgt-components/dist/es6/components/mgt-teams-channel-picker/src/components/mgt-teams-channel-picker/mgt-teams-channel-picker-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-teams-channel-picker/src/components/mgt-teams-channel-picker/mgt-teams-channel-picker.graph.ts","../../../packages/mgt-components/dist/es6/components/mgt-teams-channel-picker/src/components/mgt-teams-channel-picker/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-teams-channel-picker/src/components/mgt-teams-channel-picker/mgt-teams-channel-picker.ts","../../../packages/mgt-react/src/generated/teams-channel-picker.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  comboboxPlaceholder: 'Select an item'\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{--max-height:var(--picker-max-height, 380px);font-family:var(--default-font-family)}:host .picker{background-color:var(--picker-background-color,transparent)}:host fluent-combobox::part(selected-value)::placeholder{color:var(--picker-text-color,var(--input-filled-placeholder-rest))}:host fluent-combobox::part(selected-value):hover::placeholder{color:var(--picker-text-color-hover,var(--secondary-text-hover-color))}[dir=rtl] .picker{direction:rtl}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, PropertyValueMap, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { MgtTemplatedTaskComponent, mgtHtml } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { fluentCombobox, fluentOption } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport '../../styles/style-helper';\nimport { Entity } from '@microsoft/microsoft-graph-types';\nimport { DataChangedDetail, registerMgtGetComponent } from '../mgt-get/mgt-get';\nimport { styles } from './mgt-picker-css';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport const registerMgtPickerComponent = () => {\n  registerFluentComponents(fluentCombobox, fluentOption);\n\n  registerMgtGetComponent();\n  registerComponent('picker', MgtPicker);\n};\n\n/**\n * Web component that allows a single entity pick from a generic endpoint from Graph. Is a thin wrapper over mgt-get.\n * Does not load any state itself, only received state from mgt-get via events.\n *\n * @fires {CustomEvent<any>} selectionChanged - Fired when an option is clicked/selected\n * @export\n * @class MgtPicker\n * @extends {MgtTemplatedTaskComponent}\n *\n * @cssprop --picker-background-color - {Color} Picker component background color\n * @cssprop --picker-list-max-height - {String} max height for options list. Default value is 380px.\n */\nexport class MgtPicker extends MgtTemplatedTaskComponent {\n  protected get strings() {\n    return strings;\n  }\n\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'resource',\n    type: String\n  })\n  public resource: string;\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'v1.0';\n\n  /**\n   * Maximum number of pages to get for the resource\n   * default = 3\n   * if <= 0, all pages will be fetched\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'max-pages',\n    type: Number\n  })\n  public maxPages = 3;\n\n  /**\n   * A placeholder for the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'placeholder',\n    type: String\n  })\n  public placeholder: string;\n\n  /**\n   * Key to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'key-name',\n    type: String\n  })\n  public keyName: string;\n\n  /**\n   * Entity to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'entity-type',\n    type: String\n  })\n  public entityType: string;\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'scopes',\n    converter: value => {\n      return value ? value.toLowerCase().split(',') : null;\n    }\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Enables cache on the response from the specified resource\n   * default = false\n   *\n   * @type {boolean}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-enabled',\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    type: Number\n  })\n  public cacheInvalidationPeriod = 0;\n\n  /**\n   * Sets the currently selected value for the picker\n   * Must be present as an option in the supplied data returned from the the underlying graph query\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'selected-value',\n    type: String\n  })\n  public selectedValue: string;\n\n  @state() private response: Entity[];\n\n  constructor() {\n    super();\n    this.placeholder = this.strings.comboboxPlaceholder;\n    this.entityType = null;\n    this.keyName = null;\n  }\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtPicker\n   */\n  public refresh(hardRefresh = false) {\n    if (hardRefresh) {\n      this.clearState();\n    }\n    void this._task.run();\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtPicker\n   */\n  protected clearState(): void {\n    this.response = null;\n    this.error = null;\n  }\n\n  public renderLoading = (): TemplateResult => {\n    if (!this.response) {\n      return this.renderTemplate('loading', null);\n    }\n    return this.renderContent();\n  };\n\n  /**\n   * Invoked on each update to perform rendering the picker. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  public renderContent = () => {\n    const error = this.error ? (this.error as Error) : null;\n    if (error && this.hasTemplate('error')) {\n      return this.renderTemplate('error', { error }, 'error');\n    } else if (this.hasTemplate('no-data')) {\n      return this.renderTemplate('no-data', null);\n    }\n\n    return this.response?.length > 0 ? this.renderPicker() : this.renderGet();\n  };\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderPicker(): TemplateResult {\n    return mgtHtml`\n      <fluent-combobox\n        @keydown=${this.handleComboboxKeydown}\n        current-value=${ifDefined(this.selectedValue)}\n        part=\"picker\"\n        class=\"picker\"\n        id=\"combobox\"\n        autocomplete=\"list\"\n        placeholder=${this.placeholder}>\n          ${this.response.map(\n            item => html`\n            <fluent-option value=${item.id} @click=${(e: MouseEvent) => this.handleClick(e, item)}> ${\n              item[this.keyName]\n            } </fluent-option>`\n          )}\n      </fluent-combobox>\n     `;\n  }\n\n  /**\n   * Renders mgt-get which does a GET request to the resource.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderGet(): TemplateResult {\n    return mgtHtml`\n      <mgt-get\n        class=\"mgt-get\"\n        resource=${this.resource}\n        version=${this.version}\n        .scopes=${this.scopes}\n        max-pages=${this.maxPages}\n        ?cache-enabled=${this.cacheEnabled}\n        ?cache-invalidation-period=${this.cacheInvalidationPeriod}>\n      </mgt-get>`;\n  }\n\n  /**\n   * When the component is first updated wire up the event listeners.\n   * @param changedProperties a map of changed properties with old values\n   */\n  protected firstUpdated(changedProperties: PropertyValueMap<unknown> | Map<PropertyKey, unknown>): void {\n    super.firstUpdated(changedProperties);\n    const parent = this.renderRoot;\n    if (parent) {\n      parent.addEventListener('dataChange', (e: CustomEvent<DataChangedDetail>): void => this.handleDataChange(e));\n    } else {\n      console.error('🦒: mgt-picker component requires a renderRoot. Something has gone horribly wrong.');\n    }\n  }\n\n  private handleDataChange(e: CustomEvent<DataChangedDetail>): void {\n    const response = e.detail.response.value;\n    const error = e.detail.error ? e.detail.error : null;\n    this.response = response;\n    this.error = error;\n  }\n\n  private handleClick(_e: MouseEvent, item: Entity) {\n    this.fireCustomEvent('selectionChanged', item, true, false, true);\n  }\n\n  /**\n   * Handles getting the fluent option item in the dropdown and fires a custom\n   * event with it when you press Enter or Backspace keys.\n   *\n   * @param {KeyboardEvent} e\n   */\n  private readonly handleComboboxKeydown = (e: KeyboardEvent) => {\n    let value: string;\n    let item: Entity;\n    const keyName: string = e.key;\n    const comboBox: HTMLElement = e.target as HTMLElement;\n    const fluentOptionEl = comboBox.querySelector('.selected');\n    if (fluentOptionEl) {\n      value = fluentOptionEl.getAttribute('value');\n    }\n\n    if ('Enter' === keyName) {\n      if (value) {\n        item = this.response.filter(res => res.id === value).pop();\n        this.fireCustomEvent('selectionChanged', item, true, false, true);\n      }\n    }\n  };\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph } from './IGraph';\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { Graph } from './Graph';\n\n/**\n * The version of the Graph to use for making requests.\n */\nconst GRAPH_VERSION = 'beta';\n\n/**\n * BetaGraph\n *\n * @export\n * @class BetaGraph\n * @extends {BetaGraph}\n */\nexport class BetaGraph extends Graph {\n  /**\n   * get a BetaGraph instance based on an existing IGraph implementation.\n   *\n   * @static\n   * @param {Graph} graph\n   * @returns {BetaGraph}\n   * @memberof BetaGraph\n   */\n  public static fromGraph(graph: IGraph): BetaGraph {\n    const betaGraph = new BetaGraph(graph.client);\n    betaGraph.setComponent(graph.componentName);\n    return betaGraph;\n  }\n\n  constructor(client: Client, version: string = GRAPH_VERSION) {\n    super(client, version);\n  }\n\n  /**\n   * Returns a new instance of the Graph using the same\n   * client within the context of the provider.\n   *\n   * @param {Element} component\n   * @returns {BetaGraph}\n   * @memberof BetaGraph\n   */\n  public forComponent(component: Element | string): BetaGraph {\n    const graph = new BetaGraph(this.client);\n    this.setComponent(component);\n    return graph;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { OfficeGraphInsightString,ViewType } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtFileListComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type FileListProps = {\n\tfileListQuery?: string;\n\tdisplayName?: string;\n\tcardTitle?: string;\n\tfileQueries?: string[];\n\tfiles?: MicrosoftGraph.DriveItem[];\n\tsiteId?: string;\n\tdriveId?: string;\n\tgroupId?: string;\n\titemId?: string;\n\titemPath?: string;\n\tuserId?: string;\n\tinsightType?: OfficeGraphInsightString;\n\titemView?: ViewType;\n\tfileExtensions?: string[];\n\tpageSize?: number;\n\tdisableOpenOnClick?: boolean;\n\thideMoreFilesButton?: boolean;\n\tmaxFileSize?: number;\n\tenableFileUpload?: boolean;\n\tmaxUploadFile?: number;\n\texcludedFileExtensions?: string[];\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\titemClick?: (e: CustomEvent<MicrosoftGraph.DriveItem>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const FileList = wrapMgt<FileListProps>('file-list', registerMgtFileListComponent);\n\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { registerMgtPickerComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type PickerProps = {\n\tresource?: string;\n\tversion?: string;\n\tmaxPages?: number;\n\tplaceholder?: string;\n\tkeyName?: string;\n\tentityType?: string;\n\tscopes?: string[];\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tselectedValue?: string;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tselectionChanged?: (e: CustomEvent<any>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Picker = wrapMgt<PickerProps>('picker', registerMgtPickerComponent);\n\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host .container{display:flex;flex-direction:column;position:relative}:host .dropdown{display:none;position:absolute;z-index:1000;top:34px}:host .dropdown.visible{display:flex}:host .dropdown .team-photo{width:24px;position:inherit;border-radius:50%;margin:0 6px}:host .dropdown .team-start-slot{width:max-content}:host .dropdown .team-parent-name{width:auto}:host .loading-text,:host .search-error-text{font-style:normal;font-weight:400;font-size:14px;line-height:20px}:host .message-parent{display:flex;flex-direction:row;gap:5px;padding:5px}:host .message-parent .loading-text{margin:auto}:host fluent-card{background:var(--channel-picker-dropdown-background-color,var(--fill-color));padding:2px;--card-height:auto;--width:var(--card-width)}:host fluent-text-field{width:100%}:host fluent-text-field::part(root){background:padding-box linear-gradient(var(--channel-picker-input-background-color,var(--neutral-fill-input-rest)),var(--channel-picker-input-background-color,var(--neutral-fill-input-rest))),border-box var(--channel-picker-input-border-color,var(--neutral-stroke-input-rest))}:host fluent-text-field::part(root):hover{background:padding-box linear-gradient(var(--channel-picker-input-background-color-hover,var(--neutral-fill-input-hover)),var(--channel-picker-input-background-color-hover,var(--neutral-fill-input-hover))),border-box var(--channel-picker-input-hover-border-color,var(--neutral-stroke-input-hover))}:host fluent-text-field::part(root):focus,:host fluent-text-field::part(root):focus-within{background:padding-box linear-gradient(var(--channel-picker-input-background-color-focus,var(--neutral-fill-input-focus)),var(--channel-picker-input-background-color-focus,var(--neutral-fill-input-focus))),border-box var(--channel-picker-input-focus-border-color,var(--neutral-stroke-input-focus))}:host fluent-text-field::part(control){word-spacing:inherit;text-indent:inherit;letter-spacing:inherit}:host fluent-text-field::part(control)::placeholder{color:var(--channel-picker-input-placeholder-text-color,var(--input-placeholder-rest))}:host fluent-text-field::part(control):hover::placeholder{color:var(--channel-picker-input-placeholder-text-color-hover,var(--input-placeholder-hover))}:host fluent-text-field::part(control):focus-within::placeholder,:host fluent-text-field::part(control):focus::placeholder{color:var(--channel-picker-input-placeholder-text-color-focus,var(--input-placeholder-filled))}:host fluent-text-field .search-icon svg path{fill:var(--channel-picker-search-icon-color,currentColor)}:host fluent-text-field .down-chevron{height:auto;min-width:auto}:host fluent-text-field .down-chevron svg path{fill:var(--channel-picker-down-chevron-color,currentColor)}:host fluent-text-field .up-chevron{height:auto;min-width:auto}:host fluent-text-field .up-chevron svg path{fill:var(--channel-picker-up-chevron-color,currentColor)}:host fluent-text-field .close-icon{height:auto;min-width:auto}:host fluent-text-field .close-icon svg path{fill:var(--channel-picker-close-icon-color,currentColor)}:host fluent-tree-view{min-width:100%;--tree-item-nested-width:2em}:host fluent-tree-item{width:100%;--tree-item-nested-width:2em}:host fluent-tree-item:focus-visible{outline:0}:host fluent-tree-item::part(expand-collapse-button){background:0 0}:host fluent-tree-item::part(content-region),:host fluent-tree-item::part(positioning-region){color:var(--channel-picker-dropdown-item-text-color,currentColor);background:var(--channel-picker-dropdown-background-color,transparent);border:calc(var(--stroke-width) * 2px) solid transparent;height:auto}:host fluent-tree-item::part(content-region):hover,:host fluent-tree-item::part(positioning-region):hover{background:var(--channel-picker-dropdown-item-background-color-hover,var(--neutral-fill-stealth-hover))}:host fluent-tree-item::part(content-region):hover::part(expand-collapse-button),:host fluent-tree-item::part(positioning-region):hover::part(expand-collapse-button){background:var(--channel-picker-dropdown-item-background-color-hover,var(--neutral-fill-stealth-hover))}:host fluent-tree-item fluent-tree-item::part(content-region){height:auto}:host fluent-breadcrumb-item{color:var(--channel-picker-dropdown-item-text-color-selected,var(--neutral-foreground-rest))}:host fluent-breadcrumb-item .team-parent-name{font-weight:700}:host fluent-breadcrumb-item .team-photo{width:19px;position:inherit;border-radius:50%}:host fluent-breadcrumb-item .arrow{margin-left:8px;margin-right:8px}:host fluent-breadcrumb-item .arrow svg{stroke:var(--channel-picker-arrow-fill,var(--neutral-foreground-rest))}[dir=rtl] :host{--direction:rtl}[dir=rtl] .dropdown{text-align:right}[dir=rtl] .arrow{transform:scaleX(-1);filter:fliph;filter:FlipH;margin-right:0;margin-left:5px}[dir=rtl] .selected-team{padding-left:10px}[dir=rtl] .message-parent .loading-text{right:auto;left:10px;padding-right:8px;text-align:right}@media (forced-colors:active) and (prefers-color-scheme:dark){:host fluent-text-field svg{stroke:#fff!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host fluent-text-field svg{stroke:#000!important}}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { IGraph, BetaGraph, CacheService, CacheStore, prepScopes } from '@microsoft/mgt-element';\nimport { Team } from '@microsoft/microsoft-graph-types';\nimport {\n  getPhotoForResource,\n  CachePhoto,\n  getPhotoInvalidationTime,\n  getIsPhotosCacheEnabled\n} from '../../graph/graph.photos';\nimport { schemas } from '../../graph/cacheStores';\nimport { CollectionResponse } from '@microsoft/mgt-element';\n\n/**\n * async promise, returns all Teams associated with the user logged in\n *\n * @returns {Promise<Team[]>}\n * @memberof Graph\n */\nexport const getAllMyTeams = async (graph: IGraph, scopes: string[]): Promise<Team[]> => {\n  const teams = (await graph\n    .api('/me/joinedTeams')\n    .select(['displayName', 'id', 'isArchived'])\n    .middlewareOptions(prepScopes(...scopes))\n    .get()) as CollectionResponse<Team>;\n\n  return teams?.value;\n};\n\n/** An object collection of cached photos. */\ntype CachePhotos = Record<string, CachePhoto>;\n\n/**\n * Load the photos for a give set of teamIds\n *\n * @param graph {BetaGraph}\n * @param teamIds {string[]}\n * @returns {Promise<CachePhotos>}\n */\nexport const getTeamsPhotosforPhotoIds = async (graph: BetaGraph, teamIds: string[]): Promise<CachePhotos> => {\n  let cache: CacheStore<CachePhoto>;\n  let photos: CachePhotos = {};\n\n  if (getIsPhotosCacheEnabled()) {\n    cache = CacheService.getCache<CachePhoto>(schemas.photos, schemas.photos.stores.teams);\n    for (const id of teamIds) {\n      try {\n        const photoDetail = await cache.getValue(id);\n        if (photoDetail && getPhotoInvalidationTime() > Date.now() - photoDetail.timeCached) {\n          photos[id] = photoDetail;\n        }\n      } catch (_) {\n        // no-op\n      }\n    }\n    if (Object.keys(photos).length) {\n      return photos;\n    }\n  }\n\n  const scopes = ['team.readbasic.all'];\n  photos = {};\n\n  for (const id of teamIds) {\n    try {\n      const photoDetail = await getPhotoForResource(graph, `/teams/${id}`, scopes);\n      if (getIsPhotosCacheEnabled() && photoDetail) {\n        await cache.putValue(id, photoDetail);\n      }\n      photos[id] = photoDetail;\n    } catch (_) {\n      // no-op\n    }\n  }\n\n  return photos;\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  inputPlaceholderText: 'Select a channel',\n  noResultsFound: \"We didn't find any matches.\",\n  loadingMessage: 'Loading...',\n  photoFor: 'Teams photo for',\n  teamsChannels: 'Teams and channels results',\n  closeButtonAriaLabel: 'remove the selected channel'\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\nimport { html, TemplateResult } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { TaskStatus } from '@lit/task';\nimport {\n  Providers,\n  ProviderState,\n  MgtTemplatedTaskComponent,\n  BetaGraph,\n  mgtHtml,\n  CollectionResponse\n} from '@microsoft/mgt-element';\nimport '../../styles/style-helper';\nimport '../sub-components/mgt-spinner/mgt-spinner';\nimport { getSvg, SvgIcon } from '../../utils/SvgHelper';\nimport { debounce } from '../../utils/Utils';\nimport { styles } from './mgt-teams-channel-picker-css';\nimport { getAllMyTeams, getTeamsPhotosforPhotoIds } from './mgt-teams-channel-picker.graph';\nimport { strings } from './strings';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport {\n  fluentBreadcrumb,\n  fluentBreadcrumbItem,\n  fluentTreeView,\n  fluentTreeItem,\n  fluentCard,\n  fluentTextField\n} from '@fluentui/web-components';\nimport { registerComponent } from '@microsoft/mgt-element';\nimport { registerMgtSpinnerComponent } from '../sub-components/mgt-spinner/mgt-spinner';\n\n/**\n * Team with displayName\n *\n * @export\n * @interface SelectedChannel\n */\nexport type Team = MicrosoftGraph.Team & {\n  /**\n   * Display name Of Team\n   *\n   * @type {string}\n   */\n  displayName?: string;\n};\n\n/**\n * Selected Channel item\n *\n * @export\n * @interface SelectedChannel\n */\nexport interface SelectedChannel {\n  /**\n   * Channel\n   *\n   * @type {MicrosoftGraph.Channel}\n   * @memberof SelectedChannel\n   */\n  channel: MicrosoftGraph.Channel;\n\n  /**\n   * Team\n   *\n   * @type {MicrosoftGraph.Team}\n   * @memberof SelectedChannel\n   */\n  team: Team;\n}\n\n/**\n * Drop down menu item\n *\n * @export\n * @interface DropdownItem\n */\ninterface DropdownItem {\n  /**\n   * Teams channel\n   *\n   * @type {DropdownItem[]}\n   * @memberof DropdownItem\n   */\n  channels?: DropdownItem[];\n  /**\n   * Microsoft Graph Channel or Team\n   *\n   * @type {(MicrosoftGraph.Channel | MicrosoftGraph.Team)}\n   * @memberof DropdownItem\n   */\n  item: MicrosoftGraph.Channel | Team;\n}\n\n/**\n * Drop down menu item state\n *\n * @interface DropdownItemState\n */\ninterface ChannelPickerItemState {\n  /**\n   * Microsoft Graph Channel or Team\n   *\n   * @type {(MicrosoftGraph.Channel | MicrosoftGraph.Team)}\n   * @memberof ChannelPickerItemState\n   */\n  item: MicrosoftGraph.Channel | Team;\n  /**\n   * if dropdown item shows expanded state\n   *\n   * @type {boolean}\n   * @memberof DropdownItemState\n   */\n  isExpanded?: boolean;\n  /**\n   * If item contains channels\n   *\n   * @type {ChannelPickerItemState[]}\n   * @memberof DropdownItemState\n   */\n  channels?: ChannelPickerItemState[];\n  /**\n   * if Item has parent item (team)\n   *\n   * @type {ChannelPickerItemState}\n   * @memberof DropdownItemState\n   */\n  parent: ChannelPickerItemState;\n}\n\nexport const registerMgtTeamsChannelPickerComponent = () => {\n  registerFluentComponents(\n    fluentBreadcrumb,\n    fluentBreadcrumbItem,\n    fluentCard,\n    fluentTreeView,\n    fluentTreeItem,\n    fluentTextField\n  );\n  registerMgtSpinnerComponent();\n  registerComponent('teams-channel-picker', MgtTeamsChannelPicker);\n};\n\n/**\n * Web component used to select channels from a User's Microsoft Teams profile\n *\n *\n * @class MgtTeamsChannelPicker\n * @extends {MgtTemplatedTaskComponent}\n *\n * @fires {CustomEvent<SelectedChannel | null>} selectionChanged - Fired when the selection changes\n *\n * @cssprop --channel-picker-input-border-color - {Color} Input border color\n * @cssprop --channel-picker-input-background-color - {Color} Input section background color\n * @cssprop --channel-picker-input-background-color-hover - {Color} Input background hover color\n * @cssprop --channel-picker-input-background-color-focus - {Color} Input background focus color\n *\n * @cssprop --channel-picker-dropdown-background-color - {Color} Background color of dropdown area\n * @cssprop --channel-picker-dropdown-item-text-color - {Color} Text color of the dropdown text.\n * @cssprop --channel-picker-dropdown-item-background-color-hover - {Color} Background color of channel or team during hover\n * @cssprop --channel-picker-dropdown-item-text-color-selected - {Color} Text color of channel or team during after selection\n *\n * @cssprop --channel-picker-arrow-fill - {Color} Color of arrow svg\n * @cssprop --channel-picker-input-placeholder-text-color - {Color} Color of placeholder text\n * @cssprop --channel-picker-input-placeholder-text-color-focus - {Color} Color of placeholder text during focus state\n * @cssprop --channel-picker-input-placeholder-text-color-hover - {Color} Color of placeholder text during hover state\n *\n * @cssprop --channel-picker-search-icon-color - {Color} the search icon color.\n * @cssprop --channel-picker-down-chevron-color - {Color} the down chevron icon color.\n * @cssprop --channel-picker-up-chevron-color - {Color} the up chevron icon color.\n * @cssprop --channel-picker-close-icon-color - {Color} the close icon color.\n *\n */\nexport class MgtTeamsChannelPicker extends MgtTemplatedTaskComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * user the `css` tag function.\n   */\n  static get styles() {\n    return styles;\n  }\n\n  /**\n   * Strings for localization\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  private teamsPhotos = {};\n\n  /**\n   * Gets Selected item to be used\n   *\n   * @readonly\n   * @type {SelectedChannel}\n   * @memberof MgtTeamsChannelPicker\n   */\n  public get selectedItem(): SelectedChannel | null {\n    if (this._selectedItemState) {\n      return { channel: this._selectedItemState.item, team: this._selectedItemState.parent.item };\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the scopes required for teams channel picker\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtTeamsChannelPicker\n   */\n  public static get requiredScopes(): string[] {\n    return ['team.readbasic.all', 'channel.readbasic.all'];\n  }\n\n  private set items(value) {\n    if (this._items === value) {\n      return;\n    }\n    this._items = value;\n    this._treeViewState = value ? this.generateTreeViewState(value) : [];\n    this.resetFocusState();\n  }\n  private get items(): DropdownItem[] | undefined {\n    return this._items;\n  }\n\n  private get _inputWrapper(): HTMLInputElement | null {\n    return this.renderRoot.querySelector<HTMLInputElement>('fluent-text-field');\n  }\n  // User input in search\n  private get _input(): HTMLInputElement | null {\n    const wrapper = this._inputWrapper;\n    const input = wrapper?.shadowRoot.querySelector<HTMLInputElement>('input');\n    return input;\n  }\n  private _inputValue = '';\n\n  @state() private _selectedItemState: ChannelPickerItemState;\n  private _items: DropdownItem[] | undefined;\n  private _treeViewState: ChannelPickerItemState[] = [];\n  private _focusList: ChannelPickerItemState[] = [];\n\n  // focus state\n  private debouncedSearch: () => void;\n\n  // determines loading state\n  @state() private _isDropdownVisible: boolean;\n\n  constructor() {\n    super();\n    this._inputValue = '';\n    this._treeViewState = [];\n    this._focusList = [];\n    this._isDropdownVisible = false;\n  }\n\n  /**\n   * Invoked each time the custom element is appended into a document-connected element\n   *\n   * @memberof MgtTeamsChannelPicker\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('click', this.handleWindowClick);\n    this.addEventListener('focus', this.loadTeamsIfNotLoaded);\n    this.addEventListener('mouseover', this.loadTeamsIfNotLoaded);\n    this.addEventListener('blur', this.lostFocus);\n\n    const ownerDocument = this.renderRoot.ownerDocument;\n    if (ownerDocument) {\n      ownerDocument.documentElement.setAttribute('dir', this.direction);\n    }\n  }\n\n  /**\n   * Invoked each time the custom element is disconnected from the document's DOM\n   *\n   * @memberof MgtTeamsChannelPicker\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('click', this.handleWindowClick);\n    this.removeEventListener('focus', this.loadTeamsIfNotLoaded);\n    this.removeEventListener('mouseover', this.loadTeamsIfNotLoaded);\n    this.removeEventListener('blur', this.lostFocus);\n    super.disconnectedCallback();\n  }\n\n  protected args(): unknown[] {\n    return [];\n  }\n\n  /**\n   * selects a channel by looking up the id in the Graph\n   *\n   * @param {string} channelId MicrosoftGraph.Channel.id\n   * @returns {Promise<return>} A promise that will resolve to true if channel was selected\n   * @memberof MgtTeamsChannelPicker\n   */\n  public async selectChannelById(channelId: string): Promise<boolean> {\n    const provider = Providers.globalProvider;\n    if (provider && provider.state === ProviderState.SignedIn) {\n      // since the component normally handles loading on hover, forces the load for items\n      if (!this.items) {\n        await this._task.run();\n      }\n\n      for (const item of this._treeViewState) {\n        for (const channel of item.channels) {\n          if (channel.item.id === channelId) {\n            item.isExpanded = true;\n            this.selectChannel(channel);\n            this.markSelectedChannelInDropdown(channelId);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Marks a channel selected by ID as selected in the dropdown menu.\n   * It ensures the parent team is set to as expanded to show the channel.\n   *\n   * @param channelId ID string of the selected channel\n   */\n  private markSelectedChannelInDropdown(channelId: string) {\n    const treeItem = this.renderRoot.querySelector(`[id='${channelId}']`);\n    if (treeItem) {\n      treeItem.setAttribute('selected', 'true');\n      if (treeItem.parentElement) {\n        treeItem.parentElement.setAttribute('expanded', 'true');\n      }\n    }\n  }\n\n  /**\n   * Called from the base class while the _task is in a pending state\n   * This calls to the renderContent method as the loading indicator is nested inside the dropdown\n   * This ensures that the component shows a control immediately and only shows a loading indicator\n   * if the user interacts with the component while the _task is pending.\n   */\n  protected renderLoading = () => this.renderContent();\n\n  /**\n   * Invoked by the render method when the _task has been completed\n   *\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  public renderContent = () => {\n    const dropdownClasses = {\n      dropdown: true,\n      visible: this._isDropdownVisible\n    };\n\n    return (\n      this.renderTemplate('default', { teams: this.items ?? [] }) ||\n      html`\n        <div class=\"container\" @blur=${this.lostFocus}>\n          <fluent-text-field\n            autocomplete=\"off\"\n            appearance=\"outline\"\n            id=\"teams-channel-picker-input\"\n            role=\"combobox\"\n            placeholder=\"${this._selectedItemState ? '' : this.strings.inputPlaceholderText} \"\n            aria-label=${this.strings.inputPlaceholderText}\n            aria-expanded=\"${this._isDropdownVisible}\"\n            label=\"teams-channel-picker-input\"\n            @focus=${this.handleFocus}\n            @keyup=${this.handleInputChanged}\n            @click=${this.handleInputClick}\n            @keydown=${this.handleInputKeydown}\n          >\n            <div tabindex=\"0\" slot=\"start\" style=\"width: max-content;\">${this.renderSelected()}</div>\n            <div tabindex=\"0\" slot=\"end\">${this.renderChevrons()}${this.renderCloseButton()}</div>\n          </fluent-text-field>\n          <fluent-card\n            class=${classMap(dropdownClasses)}\n          >\n            ${this.renderDropdown()}\n          </fluent-card>\n        </div>`\n    );\n  };\n\n  /**\n   * Handles clicks on the input section.\n   *\n   * @param e {UIEvent}\n   */\n  handleInputClick = (e: UIEvent) => {\n    e.stopPropagation();\n    this.gainedFocus();\n  };\n\n  handleInputKeydown = (e: KeyboardEvent) => {\n    const keyName = e.key;\n    if (['ArrowDown', 'Enter'].includes(keyName)) {\n      if (!this._isDropdownVisible) {\n        this.gainedFocus();\n      } else {\n        // focus on the first item on the list. Ideally, focus on the selected.\n        const firstTreeItem = this.renderRoot.querySelector<HTMLElement>('fluent-tree-item');\n        firstTreeItem.focus();\n      }\n    } else if (keyName === 'Escape') {\n      this.lostFocus();\n    }\n  };\n\n  /**\n   * Renders selected channel\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderSelected() {\n    if (!this._selectedItemState) {\n      return this.renderSearchIcon();\n    }\n    let icon: TemplateResult;\n    if (this._selectedItemState.parent.channels) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n      const src = this.teamsPhotos[this._selectedItemState.parent.item.id]?.photo;\n      icon = html`<img\n        class=\"team-photo\"\n        alt=\"${this._selectedItemState.parent.item.displayName}\"\n        role=\"img\"\n        src=${src} />`;\n    }\n\n    const parentName = this._selectedItemState?.parent?.item?.displayName.trim();\n    const channelName = this._selectedItemState?.item?.displayName.trim();\n\n    return html`\n      <fluent-breadcrumb title=${this._selectedItemState.item.displayName}>\n        <fluent-breadcrumb-item>\n          <span slot=\"start\">${icon}</span>\n          <span class=\"team-parent-name\">${parentName}</span>\n          <span slot=\"separator\" class=\"arrow\">${getSvg(SvgIcon.TeamSeparator, '#000000')}</span>\n        </fluent-breadcrumb-item>\n        <fluent-breadcrumb-item>${channelName}</fluent-breadcrumb-item>\n      </fluent-breadcrumb>`;\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected clearState(): void {\n    this._inputValue = '';\n    this._treeViewState = [];\n    this._focusList = [];\n    this._isDropdownVisible = false;\n  }\n\n  /**\n   * Renders search icon\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderSearchIcon() {\n    return html`\n      <div class=\"search-icon\">\n        ${getSvg(SvgIcon.Search, '#252424')}\n      </div>\n    `;\n  }\n\n  /**\n   * Renders close button\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderCloseButton() {\n    return html`\n      <fluent-button\n        appearance=\"stealth\"\n        class=\"close-icon\"\n        style=\"display:none\"\n        aria-label=${this.strings.closeButtonAriaLabel}\n        @click=${this.onClickCloseButton}\n        @keydown=${this.onKeydownCloseButton}>\n        <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M0.0885911 0.215694L0.146447 0.146447C0.320013 -0.0271197 0.589437 -0.046405 0.784306 0.0885911L0.853553 0.146447L4 3.293L7.14645 0.146447C7.34171 -0.0488154 7.65829 -0.0488154 7.85355 0.146447C8.04882 0.341709 8.04882 0.658291 7.85355 0.853553L4.707 4L7.85355 7.14645C8.02712 7.32001 8.0464 7.58944 7.91141 7.78431L7.85355 7.85355C7.67999 8.02712 7.41056 8.0464 7.21569 7.91141L7.14645 7.85355L4 4.707L0.853553 7.85355C0.658291 8.04882 0.341709 8.04882 0.146447 7.85355C-0.0488154 7.65829 -0.0488154 7.34171 0.146447 7.14645L3.293 4L0.146447 0.853553C-0.0271197 0.679987 -0.046405 0.410563 0.0885911 0.215694L0.146447 0.146447L0.0885911 0.215694Z\" fill=\"#212121\"/>\n        </svg>\n      </fluent-button>\n    `;\n  }\n\n  /**\n   * Handles clicks on the close button after selecting a channel.\n   *\n   * @param e {UIEvent}\n   */\n  onClickCloseButton = () => {\n    this.removeSelectedChannel(null);\n  };\n\n  /**\n   * Handles keypresses on the close button.\n   *\n   * @param e {KeyboardEvent}\n   */\n  onKeydownCloseButton = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') this.removeSelectedChannel(null);\n  };\n\n  /**\n   * Displays the close button after selecting a channel.\n   */\n  protected showCloseIcon() {\n    const downChevron = this.renderRoot.querySelector<HTMLElement>('.down-chevron');\n    const upChevron = this.renderRoot.querySelector<HTMLElement>('.up-chevron');\n    const closeIcon = this.renderRoot.querySelector<HTMLElement>('.close-icon');\n    if (downChevron) {\n      downChevron.style.display = 'none';\n    }\n    if (upChevron) {\n      upChevron.style.display = 'none';\n    }\n\n    if (closeIcon) {\n      closeIcon.style.display = null;\n    }\n  }\n\n  /**\n   * Renders down chevron icon\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderDownChevron() {\n    return html`\n      <fluent-button appearance=\"stealth\" class=\"down-chevron\" @click=${this.gainedFocus}>\n        <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M2.21967 4.46967C2.51256 4.17678 2.98744 4.17678 3.28033 4.46967L6 7.18934L8.71967 4.46967C9.01256 4.17678 9.48744 4.17678 9.78033 4.46967C10.0732 4.76256 10.0732 5.23744 9.78033 5.53033L6.53033 8.78033C6.23744 9.07322 5.76256 9.07322 5.46967 8.78033L2.21967 5.53033C1.92678 5.23744 1.92678 4.76256 2.21967 4.46967Z\" fill=\"#212121\" />\n        </svg>\n      </fluent-button>`;\n  }\n\n  /**\n   * Renders up chevron icon\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderUpChevron() {\n    return html`\n      <fluent-button appearance=\"stealth\" style=\"display:none\" class=\"up-chevron\" @click=${this.handleUpChevronClick}>\n        <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M2.21967 7.53033C2.51256 7.82322 2.98744 7.82322 3.28033 7.53033L6 4.81066L8.71967 7.53033C9.01256 7.82322 9.48744 7.82322 9.78033 7.53033C10.0732 7.23744 10.0732 6.76256 9.78033 6.46967L6.53033 3.21967C6.23744 2.92678 5.76256 2.92678 5.46967 3.21967L2.21967 6.46967C1.92678 6.76256 1.92678 7.23744 2.21967 7.53033Z\" fill=\"#212121\" />\n        </svg>\n      </fluent-button>`;\n  }\n\n  /**\n   * Renders both chevrons\n   */\n  private renderChevrons() {\n    return html`${this.renderUpChevron()}${this.renderDownChevron()}`;\n  }\n\n  /**\n   * Renders dropdown content\n   *\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderDropdown() {\n    if (this._task.status === TaskStatus.PENDING || !this._treeViewState) {\n      return this.renderLoadingIndicator();\n    }\n\n    if (this._treeViewState) {\n      if (this._treeViewState.length === 0 && this._inputValue.length > 0) {\n        return this.renderError();\n      }\n\n      return this.renderDropdownList(this._treeViewState);\n    }\n\n    return html``;\n  }\n\n  /**\n   * Renders the dropdown list recursively\n   *\n   * @protected\n   * @param {ChannelPickerItemState[]} items\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderDropdownList(items: ChannelPickerItemState[]) {\n    if (items && items.length > 0) {\n      let icon: TemplateResult = null;\n\n      return html`\n        <fluent-tree-view\n          class=\"tree-view\"\n          dir=${this.direction}\n          aria-live=\"polite\"\n          aria-relevant=\"all\"\n          aria-atomic=\"true\"\n          aria-label=${this.strings.teamsChannels}\n          aria-orientation=\"horizontal\"\n          @keydown=${this.onKeydownTreeView}>\n          ${repeat(\n            items,\n            (itemObj: ChannelPickerItemState) => itemObj?.item,\n            (obj: ChannelPickerItemState) => {\n              if (obj.channels) {\n                icon = html`<img\n                  class=\"team-photo\"\n                  alt=\"${this.strings.photoFor} ${obj.item.displayName}\"\n                  src=${// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                  this.teamsPhotos[obj.item.id]?.photo} />`;\n              }\n              return html`\n                <fluent-tree-item\n                  ?expanded=${obj?.isExpanded}\n                  @click=${this.handleTeamTreeItemClick}>\n                    <span slot=\"start\">${icon}</span>${obj.item.displayName}\n                    ${repeat(\n                      obj?.channels,\n                      (channels: ChannelPickerItemState) => channels.item,\n                      (channel: ChannelPickerItemState) => {\n                        return this.renderItem(channel);\n                      }\n                    )}\n                </fluent-tree-item>`;\n            }\n          )}\n        </fluent-tree-view>`;\n    }\n    return null;\n  }\n\n  /**\n   * Renders each Channel or Team\n   *\n   * @param {ChannelPickerItemState} itemState\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderItem(itemState: ChannelPickerItemState) {\n    return html`\n      <fluent-tree-item\n        id=${itemState?.item?.id}\n        @keydown=${(e: KeyboardEvent) => this.onUserKeyDown(e, itemState)}\n        @click=${() => this.handleItemClick(itemState)}>\n          ${itemState?.item.displayName}\n      </fluent-tree-item>`;\n  }\n\n  /**\n   * Renders an error message when no channel or teams match the query\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderError = (): TemplateResult => {\n    const template = this.renderTemplate('error', null, 'error');\n\n    return (\n      template ||\n      html`\n        <div class=\"message-parent\">\n          <div\n            label=\"search-error-text\"\n            aria-live=\"polite\"\n            aria-relevant=\"all\"\n            aria-atomic=\"true\"\n            class=\"search-error-text\"\n          >\n            ${this.strings.noResultsFound}\n          </div>\n        </div>\n      `\n    );\n  };\n\n  /**\n   * Renders loading spinner while channels are fetched from the Graph\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected renderLoadingIndicator = (): TemplateResult => {\n    const template = this.renderTemplate('loading', null, 'loading');\n\n    return (\n      template ||\n      mgtHtml`\n        <div class=\"message-parent\">\n          <mgt-spinner></mgt-spinner>\n          <div label=\"loading-text\" aria-label=\"loading\" class=\"loading-text\">\n            ${this.strings.loadingMessage}\n          </div>\n        </div>\n      `\n    );\n  };\n\n  /**\n   * Queries Microsoft Graph for Teams & respective channels then sets to items list\n   *\n   * @protected\n   * @memberof MgtTeamsChannelPicker\n   */\n  protected async loadState() {\n    const provider = Providers.globalProvider;\n    let teams: MicrosoftGraph.Team[];\n    if (provider && provider.state === ProviderState.SignedIn) {\n      const graph = provider.graph.forComponent(this);\n\n      teams = await getAllMyTeams(graph, MgtTeamsChannelPicker.requiredScopes);\n      teams = teams.filter(t => !t.isArchived);\n\n      const beta = BetaGraph.fromGraph(graph);\n\n      const teamsIds = teams.map(t => t.id);\n      this.teamsPhotos = await getTeamsPhotosforPhotoIds(beta, teamsIds);\n\n      const batch = graph.createBatch<CollectionResponse<MicrosoftGraph.Channel>>();\n\n      for (const team of teams) {\n        batch.get(team.id, `teams/${team.id}/channels`, MgtTeamsChannelPicker.requiredScopes);\n      }\n\n      const responses = await batch.executeAll();\n      this._items = [];\n      for (const team of teams) {\n        const channelsForTeam = responses.get(team.id);\n        // skip over any teams that don't have channels\n        if (!channelsForTeam.content?.value?.length) continue;\n        this.items.push({\n          item: team,\n          channels: channelsForTeam.content.value.map(c => ({ item: c }))\n        });\n      }\n    }\n    this.filterList();\n    this.resetFocusState();\n  }\n\n  /**\n   * Clears the selectedItem state.\n   *\n   * @memberof MgtTeamsChannelPicker\n   */\n  clearSelectedItem() {\n    this.removeSelectedChannel();\n  }\n\n  /**\n   * Handles operations that are performed on the DOM when you remove a\n   * channel. For example on clicking the X button.\n   *\n   * @param item a selected channel item\n   */\n  private removeSelectedChannel(item?: ChannelPickerItemState) {\n    this.selectChannel(item);\n    const treeItems = this.renderRoot.querySelectorAll('fluent-tree-item');\n    if (treeItems) {\n      treeItems.forEach((treeItem: HTMLElement) => {\n        treeItem.removeAttribute('expanded');\n        treeItem.removeAttribute('selected');\n      });\n    }\n  }\n\n  onKeydownTreeView = (e: KeyboardEvent) => {\n    const keyName = e.key;\n    if (keyName === 'Escape') {\n      this.lostFocus();\n    }\n  };\n\n  private handleItemClick(item: ChannelPickerItemState) {\n    if (item.channels) {\n      item.isExpanded = !item.isExpanded;\n    } else {\n      this.selectChannel(item);\n      this.lostFocus();\n    }\n  }\n\n  handleTeamTreeItemClick = (event: Event) => {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    const element = event.target as HTMLElement;\n    if (element) {\n      const expanded = element.getAttribute('expanded');\n\n      if (expanded) {\n        element.removeAttribute('expanded');\n      } else {\n        element.setAttribute('expanded', 'true');\n      }\n      element.removeAttribute('selected');\n      const hasId = element.getAttribute('id');\n      if (hasId) {\n        element.setAttribute('selected', 'true');\n      }\n    }\n  };\n\n  handleInputChanged = (e: KeyboardEvent) => {\n    const target = e.target as HTMLInputElement;\n    if (this._inputValue !== target?.value) {\n      this._inputValue = target?.value;\n    } else {\n      return;\n    }\n\n    // shows list\n    this.gainedFocus();\n\n    if (!this.debouncedSearch) {\n      this.debouncedSearch = debounce(() => {\n        this.filterList();\n      }, 400);\n    }\n\n    this.debouncedSearch();\n  };\n\n  private onUserKeyDown(e: KeyboardEvent, item?: ChannelPickerItemState) {\n    const key = e.code;\n    switch (key) {\n      case 'Enter':\n        this.selectChannel(item);\n        this.resetFocusState();\n        this.lostFocus();\n        e.preventDefault();\n        break;\n      case 'Backspace':\n        if (this._inputValue.length === 0 && this._selectedItemState) {\n          this.selectChannel(null);\n          this.resetFocusState();\n          e.preventDefault();\n        }\n        break;\n    }\n  }\n\n  private filterList() {\n    if (this.items) {\n      this._treeViewState = this.generateTreeViewState(this.items, this._inputValue);\n      this.resetFocusState();\n    }\n  }\n\n  private generateTreeViewState(\n    tree: DropdownItem[],\n    filterString = '',\n    parent: ChannelPickerItemState = null\n  ): ChannelPickerItemState[] {\n    const treeView: ChannelPickerItemState[] = [];\n    filterString = filterString.toLowerCase();\n\n    if (tree) {\n      for (const item of tree) {\n        let stateItem: ChannelPickerItemState;\n\n        if (filterString.length === 0 || item.item.displayName.toLowerCase().includes(filterString)) {\n          stateItem = { item: item.item, parent };\n          if (item.channels) {\n            stateItem.channels = this.generateTreeViewState(item.channels, '', stateItem);\n            stateItem.isExpanded = filterString.length > 0;\n          }\n        } else if (item.channels) {\n          const newStateItem = { item: item.item, parent };\n          const channels = this.generateTreeViewState(item.channels, filterString, newStateItem);\n          if (channels.length > 0) {\n            stateItem = newStateItem;\n            stateItem.channels = channels;\n            stateItem.isExpanded = true;\n          }\n        }\n\n        if (stateItem) {\n          treeView.push(stateItem);\n        }\n      }\n    }\n    return treeView;\n  }\n\n  // generates a flat list from a tree to facilitate easier focus\n  // navigation\n  private generateFocusList(items: ChannelPickerItemState[]): ChannelPickerItemState[] {\n    if (!items || items.length === 0) {\n      return [];\n    }\n\n    let array: ChannelPickerItemState[] = [];\n\n    for (const item of items) {\n      array.push(item);\n      if (item.channels && item.isExpanded) {\n        array = [...array, ...this.generateFocusList(item.channels)];\n      }\n    }\n\n    return array;\n  }\n\n  private resetFocusState() {\n    this._focusList = this.generateFocusList(this._treeViewState);\n    this.requestUpdate();\n  }\n\n  private readonly loadTeamsIfNotLoaded = () => {\n    if (!this.items && this._task.status !== TaskStatus.PENDING) {\n      void this._task.run();\n    }\n  };\n\n  private readonly handleWindowClick = (e: MouseEvent) => {\n    if (e.target !== this) {\n      this.lostFocus();\n    }\n  };\n\n  private readonly gainedFocus = () => {\n    const input = this._input;\n    if (input) {\n      input.focus();\n    }\n\n    this._isDropdownVisible = true;\n    this.toggleChevron();\n    this.resetFocusState();\n    this.requestUpdate();\n  };\n\n  private readonly lostFocus = () => {\n    this._inputValue = '';\n    if (this._input) {\n      this._input.value = this._inputValue;\n      this._input.textContent = '';\n    }\n    const wrapper = this._inputWrapper;\n    if (wrapper) wrapper.value = '';\n\n    this._isDropdownVisible = false;\n    this.filterList();\n    this.toggleChevron();\n    this.requestUpdate();\n\n    if (this._selectedItemState !== undefined) {\n      this.showCloseIcon();\n    }\n  };\n\n  handleFocus = () => {\n    this.lostFocus();\n    this.gainedFocus();\n  };\n\n  private selectChannel(item?: ChannelPickerItemState) {\n    if (item && this._selectedItemState !== item) {\n      this._input?.setAttribute('disabled', 'true');\n    } else {\n      this._input?.removeAttribute('disabled');\n    }\n    this._selectedItemState = item;\n    this.lostFocus();\n    this.fireCustomEvent('selectionChanged', this.selectedItem);\n  }\n\n  /**\n   * Hides the close icon.\n   */\n  private hideCloseIcon() {\n    const closeIcon = this.renderRoot.querySelector<HTMLElement>('.close-icon');\n    if (closeIcon) {\n      closeIcon.style.display = 'none';\n    }\n  }\n\n  /**\n   * Toggles the up and down chevron depending on the dropdown\n   * visibility.\n   */\n  private toggleChevron() {\n    const downChevron = this.renderRoot.querySelector<HTMLElement>('.down-chevron');\n    const upChevron = this.renderRoot.querySelector<HTMLElement>('.up-chevron');\n    if (this._isDropdownVisible) {\n      if (downChevron) {\n        downChevron.style.display = 'none';\n      }\n      if (upChevron) {\n        upChevron.style.display = null;\n      }\n    } else {\n      if (downChevron) {\n        downChevron.style.display = null;\n        this.hideCloseIcon();\n      }\n      if (upChevron) {\n        upChevron.style.display = 'none';\n      }\n    }\n    this.hideCloseIcon();\n  }\n\n  handleUpChevronClick = (e: Event) => {\n    e.stopPropagation();\n    this.lostFocus();\n  };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { SelectedChannel } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtTeamsChannelPickerComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type TeamsChannelPickerProps = {\n\tselectedItem?: SelectedChannel;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tselectionChanged?: (e: CustomEvent<SelectedChannel | null>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const TeamsChannelPicker = wrapMgt<TeamsChannelPickerProps>('teams-channel-picker', registerMgtTeamsChannelPickerComponent);\n\n"],"names":["strings","comboboxPlaceholder","styles","css","_templateObject","_taggedTemplateLiteral","registerMgtPickerComponent","registerFluentComponents","fluentCombobox","fluentOption","registerMgtGetComponent","registerComponent","MgtPicker","_MgtTemplatedTaskComp","_inherits","_super","_createSuper","_this","_classCallCheck","call","version","maxPages","scopes","cacheEnabled","cacheInvalidationPeriod","renderLoading","response","renderContent","renderTemplate","error","hasTemplate","_a","length","renderPicker","renderGet","handleComboboxKeydown","e","value","item","keyName","key","fluentOptionEl","target","querySelector","getAttribute","filter","res","id","pop","fireCustomEvent","placeholder","entityType","_createClass","get","arguments","undefined","this","clearState","_task","run","_this2","mgtHtml","ifDefined","selectedValue","map","html","_templateObject2","handleClick","_templateObject3","resource","changedProperties","_this3","_get","_getPrototypeOf","prototype","parent","renderRoot","addEventListener","handleDataChange","console","detail","_e","MgtTemplatedTaskComponent","__decorate","property","attribute","type","String","Number","converter","toLowerCase","split","Boolean","state","BetaGraph","_Graph","client","component","graph","setComponent","betaGraph","componentName","Graph","FileList","wrapMgt","registerMgtFileListComponent","Picker","getAllMyTeams","__awaiter","_regeneratorRuntime","mark","_callee","teams","wrap","_context","prev","next","api","select","middlewareOptions","prepScopes","apply","_toConsumableArray","sent","abrupt","stop","getTeamsPhotosforPhotoIds","teamIds","_callee2","cache","photos","_iterator","_step","photoDetail","_iterator2","_step2","_id","_photoDetail","_context2","getIsPhotosCacheEnabled","CacheService","getCache","schemas","stores","_createForOfIteratorHelper","s","n","done","getValue","getPhotoInvalidationTime","Date","now","timeCached","t0","t1","f","finish","Object","keys","getPhotoForResource","concat","putValue","t2","t3","inputPlaceholderText","noResultsFound","loadingMessage","photoFor","teamsChannels","closeButtonAriaLabel","MgtTeamsChannelPicker","teamsPhotos","_inputValue","_treeViewState","_focusList","dropdownClasses","dropdown","visible","_isDropdownVisible","items","lostFocus","_selectedItemState","handleFocus","handleInputChanged","handleInputClick","handleInputKeydown","renderSelected","renderChevrons","renderCloseButton","classMap","renderDropdown","stopPropagation","gainedFocus","includes","focus","onClickCloseButton","removeSelectedChannel","onKeydownCloseButton","renderError","renderLoadingIndicator","onKeydownTreeView","handleTeamTreeItemClick","event","preventDefault","stopImmediatePropagation","element","removeAttribute","setAttribute","debouncedSearch","debounce","filterList","loadTeamsIfNotLoaded","status","TaskStatus","PENDING","handleWindowClick","_assertThisInitialized","input","_input","toggleChevron","resetFocusState","requestUpdate","textContent","wrapper","_inputWrapper","showCloseIcon","handleUpChevronClick","channel","team","_items","set","generateTreeViewState","shadowRoot","window","ownerDocument","documentElement","direction","removeEventListener","channelId","provider","Providers","globalProvider","ProviderState","SignedIn","channels","isExpanded","selectChannel","markSelectedChannelInDropdown","treeItem","parentElement","icon","renderSearchIcon","src","photo","_templateObject4","displayName","parentName","_d","_c","_b","trim","channelName","_f","_templateObject5","getSvg","SvgIcon","TeamSeparator","_templateObject6","Search","_templateObject7","downChevron","upChevron","closeIcon","style","display","_templateObject8","_templateObject9","_templateObject10","renderUpChevron","renderDownChevron","renderDropdownList","_templateObject11","_templateObject12","repeat","itemObj","obj","_templateObject13","_templateObject14","renderItem","itemState","_templateObject15","onUserKeyDown","handleItemClick","forComponent","requiredScopes","t","isArchived","beta","fromGraph","teamsIds","batch","createBatch","_iterator3","_step3","err","executeAll","responses","_iterator4","_step4","channelsForTeam","content","push","c","treeItems","querySelectorAll","forEach","code","tree","filterString","treeView","_step5","_iterator5","stateItem","newStateItem","_step6","array","_iterator6","generateFocusList","selectedItem","hideCloseIcon","TeamsChannelPicker","fluentBreadcrumb","fluentBreadcrumbItem","fluentCard","fluentTreeView","fluentTreeItem","fluentTextField","registerMgtSpinnerComponent"],"sourceRoot":""}