{"version":3,"file":"static/js/425.39c1e3d2.chunk.js","mappings":"m6CA2BaA,EAAkB,SAACC,GAC9B,OAAOC,MAAMC,QAASF,EAA0BG,mBAClD,EA6CaC,EAAkB,WAAH,OAA6BC,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAKvD,OAJMJ,EAAmCK,EAAAA,EAAaC,SACpDC,EAAAA,EAAQC,UACRD,EAAAA,EAAQC,UAAUC,OAAOD,WAC1BN,EAAAE,KAAA,EACKJ,EAAMU,aAAY,wBAAAR,EAAAS,OAAA,GAAAZ,EAAA,IACzB,EAKYa,EAA0B,WAAH,OAClCP,EAAAA,EAAaQ,OAAOC,MAAMC,oBAAsBV,EAAAA,EAAaQ,OAAOG,yBAAyB,EAKlFC,EAAyB,WAAH,OACjCZ,EAAAA,EAAaQ,OAAOC,MAAMI,WAAab,EAAAA,EAAaQ,OAAOK,SAAS,EAWzDC,EAA6B,WAAH,OACrCd,EAAAA,EAAaQ,OAAOL,UAAUU,WAAab,EAAAA,EAAaQ,OAAOK,SAAS,EAEpEE,EAAuB,CAC3B,aACA,kBACA,iBACA,sBACA,iBACA,sBACA,iBACA,uBAEWC,EAAqB,CAAC,iBAAkB,uBAC/CC,EAAwB,CAAC,kBAAmB,sBAAuB,uBAQ5DC,EAAsB,SACjCC,EACAC,GAAgB,IAChBC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoBpB,EAAAA,EAAQO,MAAML,OAAOqB,YACzCC,EAAMJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGP,EAAoB,OACPxB,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAkC,IAAA,IAAAhC,EAAAiC,EAAAC,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,OAGH,OADbJ,EAA+BK,EAAAA,EAAaC,SAAoBC,EAAAA,EAAQO,MAAOY,GAAUS,EAAA/B,KAAA,EACtEgC,EAAiBpC,EAAOyB,GAAS,OAA1C,KAAVQ,EAAUE,EAAAE,MACA,CAAFF,EAAA/B,KAAA,eAAA+B,EAAAG,OAAA,SACLL,GAAU,OAKL,OALKE,EAAAhC,KAAA,EAAAgC,EAAA/B,KAAA,EAKCoB,EAAMe,IAAId,GAAUe,mBAAkBC,EAAAA,EAAAA,GAAWV,IAASW,MAAK,OAAzE,GAARR,EAAQC,EAAAE,MAEJpB,IAA0B,CAAFkB,EAAA/B,KAAA,SAC1B,OAD0B+B,EAAA/B,KAAA,GACpBJ,EAAM2C,SAASlB,EAAU,CAAEmB,KAAMC,KAAKC,UAAUZ,KAAY,QAAAC,EAAA/B,KAAA,iBAAA+B,EAAAhC,KAAA,GAAAgC,EAAAY,GAAAZ,EAAA,wBAAAA,EAAAG,OAAA,SAK/DJ,GAAY,MAAI,yBAAAC,EAAAxB,OAAA,GAAAqB,EAAA,kBACxB,EAGYgB,EAAmB,SAAOxB,EAAeyB,EAAiBC,GAAc,OAAwBtD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAqD,IAAA,IAAAC,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,OACxD,OAA7CgD,EAAW,WAAHE,OAAcL,EAAO,WAAAK,OAAUJ,GAAMG,EAAAf,OAAA,SAC5Cf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAO8C,aAAW,wBAAAF,EAAA1C,OAAA,GAAAwC,EAAA,IAC7E,EAGYK,EAAqB,SAAOhC,EAAeyB,EAAiBQ,GAAgB,OAAwB7D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA4D,IAAA,IAAAN,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,OAC1D,OAA/CgD,EAAW,WAAHE,OAAcL,EAAO,WAAAK,OAAUG,GAAQE,EAAArB,OAAA,SAC9Cf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAO8C,aAAW,wBAAAI,EAAAhD,OAAA,GAAA+C,EAAA,IAC7E,EAGYE,EAAwB,SAAOpC,EAAeqC,EAAiBX,GAAc,OAAwBtD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAgE,IAAA,IAAAV,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,OACvD,OAAnDgD,EAAW,WAAHE,OAAcO,EAAO,iBAAAP,OAAgBJ,GAAMa,EAAAzB,OAAA,SAClDf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAOuD,aAAW,wBAAAD,EAAApD,OAAA,GAAAmD,EAAA,IAC7E,EAGYG,EAA0B,SAAOzC,EAAeqC,EAAiBJ,GAAgB,OAAwB7D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAoE,IAAA,IAAAd,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,OACzD,OAArDgD,EAAW,WAAHE,OAAcO,EAAO,iBAAAP,OAAgBG,GAAQU,EAAA7B,OAAA,SACpDf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAOuD,aAAW,wBAAAG,EAAAxD,OAAA,GAAAuD,EAAA,IAC7E,EAGYE,EAAqB,SAAO5C,EAAe0B,GAAc,OAAwBtD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAuE,IAAA,IAAAjB,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,OAClD,OAApCgD,EAAW,mBAAHE,OAAsBJ,GAAMoB,EAAAhC,OAAA,SACnCf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAO8D,YAAU,wBAAAD,EAAA3D,OAAA,GAAA0D,EAAA,IAC5E,EAGYG,EAAuB,SAAOhD,EAAeiC,GAAgB,OAAwB7D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2E,IAAA,IAAArB,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAyE,GAAA,cAAAA,EAAAvE,KAAAuE,EAAAtE,MAAA,OACpD,OAAtCgD,EAAW,mBAAHE,OAAsBG,GAAQiB,EAAApC,OAAA,SACrCf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAO8D,YAAU,wBAAAG,EAAA/D,OAAA,GAAA8D,EAAA,IAC5E,EAGYE,EAAuB,SAAOnD,EAAeoD,EAAgB1B,GAAc,OAAwBtD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA+E,IAAA,IAAAzB,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAA6E,GAAA,cAAAA,EAAA3E,KAAA2E,EAAA1E,MAAA,OACvD,OAAjDgD,EAAW,UAAHE,OAAasB,EAAM,iBAAAtB,OAAgBJ,GAAM4B,EAAAxC,OAAA,SAChDf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAOsE,YAAU,wBAAAD,EAAAnE,OAAA,GAAAkE,EAAA,IAC5E,EAGYG,EAAyB,SAAOxD,EAAeoD,EAAgBnB,GAAgB,OAAwB7D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAmF,IAAA,IAAA7B,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAiF,GAAA,cAAAA,EAAA/E,KAAA+E,EAAA9E,MAAA,OACzD,OAAnDgD,EAAW,UAAHE,OAAasB,EAAM,iBAAAtB,OAAgBG,GAAQyB,EAAA5C,OAAA,SAClDf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAOsE,YAAU,wBAAAG,EAAAvE,OAAA,GAAAsE,EAAA,IAC5E,EAGYE,EAAuB,SAClC3D,EACAoD,EACAQ,EACAlC,GAAc,OACQtD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAuF,IAAA,IAAAjC,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAqF,GAAA,cAAAA,EAAAnF,KAAAmF,EAAAlF,MAAA,OAC2C,OAA3DgD,EAAW,UAAHE,OAAasB,EAAM,WAAAtB,OAAU8B,EAAM,WAAA9B,OAAUJ,EAAM,cAAAoC,EAAAhD,OAAA,SAC1Df,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAOsE,YAAU,wBAAAO,EAAA3E,OAAA,GAAA0E,EAAA,IAC5E,EAGYE,EAAuB,SAAO/D,EAAegE,EAAgBtC,GAAc,OAAwBtD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2F,IAAA,IAAArC,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAyF,GAAA,cAAAA,EAAAvF,KAAAuF,EAAAtF,MAAA,OACvD,OAAjDgD,EAAW,UAAHE,OAAakC,EAAM,iBAAAlC,OAAgBJ,GAAMwC,EAAApD,OAAA,SAChDf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAO8D,YAAU,wBAAAmB,EAAA/E,OAAA,GAAA8E,EAAA,IAC5E,EAGYE,EAAyB,SAAOnE,EAAegE,EAAgB/B,GAAgB,OAAwB7D,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA8F,IAAA,IAAAxC,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAA4F,GAAA,cAAAA,EAAA1F,KAAA0F,EAAAzF,MAAA,OACzD,OAAnDgD,EAAW,UAAHE,OAAakC,EAAM,iBAAAlC,OAAgBG,GAAQoC,EAAAvD,OAAA,SAClDf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAO8D,YAAU,wBAAAsB,EAAAlF,OAAA,GAAAiF,EAAA,IAC5E,EAKYE,EAA6B,SACxCtE,EACAuE,EACAC,GAAU,OACYpG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAmG,IAAA,IAAA7C,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAiG,GAAA,cAAAA,EAAA/F,KAAA+F,EAAA9F,MAAA,OAC4B,OAA5CgD,EAAW,gBAAHE,OAAmByC,EAAW,KAAAzC,OAAI0C,EAAE,aAAAE,EAAA5D,OAAA,SAC3Cf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAO0F,aAAc9E,IAAmB,wBAAA6E,EAAAvF,OAAA,GAAAsF,EAAA,IACnG,EAGYG,EAA+B,SAC1C5E,EACAgE,EACAO,EACAC,GAAU,OACYpG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAuG,IAAA,IAAAjD,EAAA,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAqG,GAAA,cAAAA,EAAAnG,KAAAmG,EAAAlG,MAAA,OACyC,OAAzDgD,EAAW,UAAHE,OAAakC,EAAM,cAAAlC,OAAayC,EAAW,KAAAzC,OAAI0C,EAAE,aAAAM,EAAAhE,OAAA,SACxDf,EAAoBC,EAAO4B,EAAU7C,EAAAA,EAAQO,MAAML,OAAO0F,aAAc9E,IAAmB,wBAAAiF,EAAA3F,OAAA,GAAA0F,EAAA,IACnG,EAEKE,EAAc,SAClB/E,EACA4B,EACA1B,EACA8E,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2G,IAAA,IAAAC,EAAA1G,EAAA2G,EAAAC,EAAAC,EAAA,OAAAhH,EAAAA,EAAAA,KAAAI,MAAA,SAAA6G,GAAA,cAAAA,EAAA3G,KAAA2G,EAAA1G,MAAA,OAKxB,OADXJ,EAAmCK,EAAAA,EAAaC,SAAwBC,EAAAA,EAAQC,UAAWkB,GAAUoF,EAAA1G,KAAA,EACpF2G,GAAqB/G,EAAO0B,EAAW,GAAF4B,OAAKF,EAAQ,KAAAE,OAAIkD,IAAM,OAArE,KAARG,EAAQG,EAAAzE,MACA,CAAFyE,EAAA1G,KAAA,QACkF,OAA5FsG,EAAoBM,EAA8BxF,EAAOmF,EAAS7F,MAAO6F,EAASE,UAAUC,EAAAxE,OAAA,SAErFoE,GAAiB,OAUJ,OAVII,EAAA3G,KAAA,EAMxByG,EAAUpF,EAAMe,IAAIa,GAAUZ,mBAAkBC,EAAAA,EAAAA,GAAWrB,IACvDoF,GACFI,EAAQJ,IAAIA,GACbM,EAAA1G,KAAA,GACyB6G,EAAgCzF,EAAOoF,GAAQ,QAAxD,GAAjBF,EAAiBI,EAAAzE,MAEblB,IAA8B,CAAF2F,EAAA1G,KAAA,SAE9B,OADMyG,EAAWH,EAAkBG,SAAQC,EAAA1G,KAAA,GACrCJ,EAAM2C,SAASS,EAAU,CAC7BtC,MAAO4F,EAAkBQ,MAAMC,KAAI,SAAAC,GAAC,OAAIvE,KAAKC,UAAUsE,EAAE,IACzDP,SAAAA,IACA,QAAAC,EAAA1G,KAAA,iBAAA0G,EAAA3G,KAAA,GAAA2G,EAAA/D,GAAA+D,EAAA,wBAAAA,EAAAxE,OAAA,SAICoE,GAAqB,MAAI,yBAAAI,EAAAnG,OAAA,GAAA8F,EAAA,kBACjC,EAGYY,EAAmB,SAAO7F,EAAegF,GAAY,OAA2C5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAwH,IAAA,IAAAC,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAAuH,GAAA,cAAAA,EAAArH,KAAAqH,EAAApH,MAAA,OAEtD,MADpC,0BACXmH,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAASgH,EAAAlF,OAAA,SAC9CiE,EAAY/E,EAFF,0BAEmB+F,EAAYf,IAAI,wBAAAgB,EAAA7G,OAAA,GAAA2G,EAAA,IACrD,EAGYG,EAA4B,SACvCjG,EACAyB,EACAC,EACAsD,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA4H,IAAA,IAAAtE,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAA0H,GAAA,cAAAA,EAAAxH,KAAAwH,EAAAvH,MAAA,OAEY,OAD/CgD,EAAW,WAAHE,OAAcL,EAAO,WAAAK,OAAUJ,EAAM,aAC7CqE,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAASmH,EAAArF,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAAmB,EAAAhH,OAAA,GAAA+G,EAAA,IACrD,EAGYE,EAA8B,SACzCpG,EACAyB,EACAQ,EACA+C,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA+H,IAAA,IAAAzE,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAA6H,GAAA,cAAAA,EAAA3H,KAAA2H,EAAA1H,MAAA,OAEY,OAD/CgD,EAAW,WAAHE,OAAcL,EAAO,WAAAK,OAAUG,EAAQ,cAC/C8D,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAASsH,EAAAxF,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAAsB,EAAAnH,OAAA,GAAAkH,EAAA,IACrD,EAGYE,EAA4B,SACvCvG,EACAqC,EACAX,EACAsD,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAkI,IAAA,IAAA5E,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAAgI,GAAA,cAAAA,EAAA9H,KAAA8H,EAAA7H,MAAA,OAEY,OAD/CgD,EAAW,WAAHE,OAAcO,EAAO,iBAAAP,OAAgBJ,EAAM,aACnDqE,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAASyH,EAAA3F,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAAyB,EAAAtH,OAAA,GAAAqH,EAAA,IACrD,EAGYE,EAA8B,SACzC1G,EACAqC,EACAJ,EACA+C,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAqI,IAAA,IAAA/E,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAAmI,GAAA,cAAAA,EAAAjI,KAAAiI,EAAAhI,MAAA,OAEY,OAD/CgD,EAAW,WAAHE,OAAcO,EAAO,iBAAAP,OAAgBG,EAAQ,cACrD8D,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAAS4H,EAAA9F,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAA4B,EAAAzH,OAAA,GAAAwH,EAAA,IACrD,EAGYE,EAAuB,SAClC7G,EACA0B,EACAsD,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAwI,IAAA,IAAAlF,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAAsI,GAAA,cAAAA,EAAApI,KAAAoI,EAAAnI,MAAA,OAEY,OAD/CgD,EAAW,mBAAHE,OAAsBJ,EAAM,aACpCqE,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAAS+H,EAAAjG,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAA+B,EAAA5H,OAAA,GAAA2H,EAAA,IACrD,EAGYE,EAAyB,SACpChH,EACAiC,EACA+C,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2I,IAAA,IAAArF,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAAyI,GAAA,cAAAA,EAAAvI,KAAAuI,EAAAtI,MAAA,OAEY,OAD/CgD,EAAW,mBAAHE,OAAsBG,EAAQ,cACtC8D,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAASkI,EAAApG,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAAkC,EAAA/H,OAAA,GAAA8H,EAAA,IACrD,EAGYE,EAA2B,SACtCnH,EACAoD,EACA1B,EACAsD,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA8I,IAAA,IAAAxF,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAA4I,GAAA,cAAAA,EAAA1I,KAAA0I,EAAAzI,MAAA,OAEY,OAD/CgD,EAAW,UAAHE,OAAasB,EAAM,iBAAAtB,OAAgBJ,EAAM,aACjDqE,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAASqI,EAAAvG,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAAqC,EAAAlI,OAAA,GAAAiI,EAAA,IACrD,EAGYE,EAA6B,SACxCtH,EACAoD,EACAnB,EACA+C,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAiJ,IAAA,IAAA3F,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAA+I,GAAA,cAAAA,EAAA7I,KAAA6I,EAAA5I,MAAA,OAEY,OAD/CgD,EAAW,UAAHE,OAAasB,EAAM,iBAAAtB,OAAgBG,EAAQ,cACnD8D,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAASwI,EAAA1G,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAAwC,EAAArI,OAAA,GAAAoI,EAAA,IACrD,EAGYE,EAA2B,SACtCzH,EACAgE,EACAtC,EACAsD,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAoJ,IAAA,IAAA9F,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAAkJ,GAAA,cAAAA,EAAAhJ,KAAAgJ,EAAA/I,MAAA,OAEY,OAD/CgD,EAAW,UAAHE,OAAakC,EAAM,iBAAAlC,OAAgBJ,EAAM,aACjDqE,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAAS2I,EAAA7G,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAA2C,EAAAxI,OAAA,GAAAuI,EAAA,IACrD,EAGYE,EAA6B,SACxC5H,EACAgE,EACA/B,EACA+C,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAuJ,IAAA,IAAAjG,EAAAmE,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAAqJ,GAAA,cAAAA,EAAAnJ,KAAAmJ,EAAAlJ,MAAA,OAEY,OAD/CgD,EAAW,UAAHE,OAAakC,EAAM,iBAAAlC,OAAgBG,EAAQ,cACnD8D,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAAS8I,EAAAhH,OAAA,SAC9CiE,EAAY/E,EAAO4B,EAAUmE,EAAYf,IAAI,wBAAA8C,EAAA3I,OAAA,GAAA0I,EAAA,IACrD,EAEYE,EAA8B,SACzC/H,EACAgI,EACAhD,GAAY,OAC6B5G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2J,IAAA,IAAAlC,EAAA,OAAA1H,EAAAA,EAAAA,KAAAI,MAAA,SAAAyJ,GAAA,cAAAA,EAAAvJ,KAAAuJ,EAAAtJ,MAAA,OACY,OAA/CmH,EAAahH,EAAAA,EAAQC,UAAUC,OAAOD,UAASkJ,EAAApH,OAAA,SAC9CiE,EAAY/E,EAAOgI,EAAWjC,EAAYf,IAAI,wBAAAkD,EAAA/I,OAAA,GAAA8I,EAAA,IACtD,EAGYE,EAAqB,SAAOnI,EAAeuE,GAAmB,OAA0BnG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA8J,IAAA,IAAAxG,EAAAmE,EAAAvH,EAAA2G,EAAAkD,EAAAC,EAAA,OAAAjK,EAAAA,EAAAA,KAAAI,MAAA,SAAA8J,GAAA,cAAAA,EAAA5J,KAAA4J,EAAA3J,MAAA,OAMlF,OALXgD,EAAW,gBAAHE,OAAmByC,GAC3BwB,EAAahH,EAAAA,EAAQC,UAAUC,OAAOuJ,iBAGtChK,EAAmCK,EAAAA,EAAaC,SAAwBC,EAAAA,EAAQC,UAAW+G,GAAWwC,EAAA3J,KAAA,EACrF2G,GAAqB/G,EAAOuH,EAAYnE,GAAS,OAA1D,KAARuD,EAAQoD,EAAA1H,MACA,CAAF0H,EAAA3J,KAAA,eAAA2J,EAAAzH,OAAA,SAEHqE,EAAS7F,MAAMqG,KAAI,SAACvE,GAAY,OAAKC,KAAKoH,MAAMrH,EAAkB,KAAC,OAMvD,OANuDmH,EAAA5J,KAAA,EAAA4J,EAAA3J,KAAA,GAMjDoB,EACtBe,IAAIa,GACJ8G,OAAO,yDACP1H,mBAAkBC,EAAAA,EAAAA,GAAWpB,IAC7BqB,MAAK,QAJRmH,EAAeE,EAAA1H,KAAA0H,EAAA3J,KAAG,GAAH,cAAA2J,EAAA5J,KAAG,GAAH4J,EAAAhH,GAAAgH,EAAA,iBAQF,OAREA,EAAA3J,KAAG,GAQC+J,EAAwB3I,EAAOqI,EAAiBxI,GAAmB,QAA5E,GAANyI,EAAMC,EAAA1H,MACRlB,IAA8B,CAAF4I,EAAA3J,KAAA,SAC9B,OAD8B2J,EAAA3J,KAAA,GACxBJ,EAAM2C,SAASS,EAAU,CAAEtC,MAAOgJ,EAAO3C,KAAI,SAAAvE,GAAI,OAAIC,KAAKC,UAAUF,EAAK,MAAI,eAAAmH,EAAAzH,OAAA,SAG9EwH,GAAU,MAAI,yBAAAC,EAAApJ,OAAA,GAAAiJ,EAAA,kBACtB,EAGYQ,EAAuB,SAClC5I,EACAgE,EACAO,GAAmB,OACKnG,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAuK,IAAA,IAAAjH,EAAA8G,EAAAI,EAAA/C,EAAAvH,EAAA2G,EAAAkD,EAAAC,EAAA,OAAAjK,EAAAA,EAAAA,KAAAI,MAAA,SAAAsK,GAAA,cAAAA,EAAApK,KAAAoK,EAAAnK,MAAA,OAiBP,MAbG,WAAhB2F,GACF3C,EAAW,sBACX8G,EAAS,gCAAH5G,OAAmCkC,EAAM,qEAE/CpC,EAAW,UAAHE,OAAakC,EAAM,cAAAlC,OAAayC,GACxCmE,EAAS,yDAGLI,EAAM,GAAHhH,OAAMF,EAAQ,aAAAE,OAAY4G,GAG7B3C,EAAahH,EAAAA,EAAQC,UAAUC,OAAOuJ,iBACtChK,EAAmCK,EAAAA,EAAaC,SAAwBC,EAAAA,EAAQC,UAAW+G,GAAWgD,EAAAnK,KAAA,EACrF2G,GAAqB/G,EAAOuH,EAAY+C,GAAI,OAArD,KAAR3D,EAAQ4D,EAAAlI,MACA,CAAFkI,EAAAnK,KAAA,eAAAmK,EAAAjI,OAAA,SACHqE,EAAS7F,MAAMqG,KAAI,SAACvE,GAAY,OAAKC,KAAKoH,MAAMrH,EAAkB,KAAC,OAOvD,OAPuD2H,EAAApK,KAAA,EAAAoK,EAAAnK,KAAA,GAOjDoB,EACtBe,IAAIa,GACJ8G,OAAOA,GACP1H,mBAAkBC,EAAAA,EAAAA,GAAWpB,IAC7BqB,MAAK,QAJRmH,EAAeU,EAAAlI,KAAAkI,EAAAnK,KAAG,GAAH,cAAAmK,EAAApK,KAAG,GAAHoK,EAAAxH,GAAAwH,EAAA,iBAQF,OAREA,EAAAnK,KAAG,GAQC+J,EAAwB3I,EAAOqI,EAAiBxI,GAAmB,QAA5E,GAANyI,EAAMS,EAAAlI,MACRlB,IAA8B,CAAFoJ,EAAAnK,KAAA,SAC9B,OAD8BmK,EAAAnK,KAAA,GACxBJ,EAAM2C,SAASS,EAAU,CAAEtC,MAAOgJ,EAAO3C,KAAI,SAAAvE,GAAI,OAAIC,KAAKC,UAAUF,EAAK,MAAI,eAAA2H,EAAAjI,OAAA,SAG9EwH,GAAU,MAAI,yBAAAS,EAAA5J,OAAA,GAAA0J,EAAA,kBACtB,EAEYG,EAAoB,SAAOhJ,EAAeM,GAAqB,OAA0BlC,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2K,IAAA,IAAAC,EAAA5J,EAAAd,EAAAiC,EAAA0I,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/I,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAAiL,GAAA,cAAAA,EAAA/K,KAAA+K,EAAA9K,MAAA,UAC/F0B,GAAsC,IAAvBA,EAAYF,OAAY,CAAAsJ,EAAA9K,KAAA,eAAA8K,EAAA5I,OAAA,SACnC,IAAE,OAGLoI,EAAQlJ,EAAM2J,cACdrK,EAAqB,GAGvBG,MACFjB,EAAQK,EAAAA,EAAaC,SAAoBC,EAAAA,EAAQO,MAAOP,EAAAA,EAAQO,MAAML,OAAOqB,cAC9E6I,GAAAS,EAAAA,EAAAA,GAEuBtJ,GAAWoJ,EAAA/K,KAAA,EAAAwK,EAAAU,IAAA,WAAAT,EAAAD,EAAAW,KAAAC,KAAE,CAAFL,EAAA9K,KAAA,SAAf,GAAT6K,EAASL,EAAA1D,OACdjG,IAA0B,CAAFiK,EAAA9K,KAAA,SACb,OADa8K,EAAA9K,KAAA,GACPJ,EAAMwL,SAASP,GAAU,QAA5ChJ,EAAUiJ,EAAA7I,KAAA,QAGRpB,KAA4BgB,GAAcrB,IAA4B6K,KAAKC,MAAQzJ,EAAW0J,WAChG7K,EAAM8K,KAAK/I,KAAKoH,MAAMhI,EAAWW,OACV,KAAdqI,GACTP,EAAMhI,IAAIuI,EAAWA,EAAW7J,GACjC,QAAA8J,EAAA9K,KAAA,gBAAA8K,EAAA9K,KAAA,iBAAA8K,EAAA/K,KAAA,GAAA+K,EAAAnI,GAAAmI,EAAA,SAAAP,EAAAkB,EAAAX,EAAAnI,IAAA,eAAAmI,EAAA/K,KAAA,GAAAwK,EAAAmB,IAAAZ,EAAAa,OAAA,YAIiB,OAJjBb,EAAA/K,KAAA,GAAA+K,EAAA9K,KAAA,GAIuBsK,EAAMsB,aAAY,QAApClB,EAASI,EAAA7I,KAAA0I,GAAAK,EAAAA,EAAAA,GAEStJ,GAAWoJ,EAAA/K,KAAA,GAAA4K,EAAAM,IAAA,YAAAL,EAAAD,EAAAO,KAAAC,KAAE,CAAFL,EAAA9K,KAAA,SACQ,GADhC6K,EAASD,EAAA9D,QAEN,QADNhF,EAAW4I,EAAUpI,IAAIuI,UACnB,IAAR/I,OAAQ,EAARA,EAAU+J,SAAO,CAAAf,EAAA9K,KAAA,SACuB,GAA1CU,EAAM8K,KAAK1J,EAAS+J,UAChBhL,IAA0B,CAAFiK,EAAA9K,KAAA,SAC1B,OAD0B8K,EAAA9K,KAAA,GACpBJ,EAAM2C,SAASsI,EAAW,CAAErI,KAAMC,KAAKC,UAAUZ,EAAS+J,WAAW,QAAAf,EAAA9K,KAAA,iBAAA8K,EAAA9K,KAAA,iBAAA8K,EAAA/K,KAAA,GAAA+K,EAAAgB,GAAAhB,EAAA,UAAAH,EAAAc,EAAAX,EAAAgB,IAAA,eAAAhB,EAAA/K,KAAA,GAAA4K,EAAAe,IAAAZ,EAAAa,OAAA,mBAAAb,EAAA5I,OAAA,SAK1ExB,GAAK,eAAAoK,EAAA/K,KAAA,GAAA+K,EAAAiB,GAAAjB,EAAA,UAAAA,EAAA/K,KAAA,GAAA+K,EAAA5I,OAAA,SAGH8J,QAAQC,IACbvK,EACGoI,QAAO,SAAAe,GAAS,OAAIA,GAA2B,KAAdA,CAAgB,IACjD9D,KAAI,SAAM8D,GAAS,OAAGrL,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAwM,IAAA,IAAA1J,EAAA,OAAA/C,EAAAA,EAAAA,KAAAI,MAAA,SAAAsM,GAAA,cAAAA,EAAApM,KAAAoM,EAAAnM,MAAA,OACR,OADQmM,EAAAnM,KAAA,EACFmB,EAAoBC,EAAOyJ,GAAU,OAA9C,KAAJrI,EAAI2J,EAAAlK,MACA,CAAFkK,EAAAnM,KAAA,YACFa,IAA0B,CAAFsL,EAAAnM,KAAA,QAC1B,OAD0BmM,EAAAnM,KAAA,EACpBJ,EAAM2C,SAASsI,EAAW,CAAErI,KAAMC,KAAKC,UAAUF,KAAQ,cAAA2J,EAAAjK,OAAA,SAE1DM,GAAI,wBAAA2J,EAAA5L,OAAA,GAAA2L,EAAA,IAEd,MACJ,eAAApB,EAAA/K,KAAA,GAAA+K,EAAAsB,GAAAtB,EAAA,UAAAA,EAAA5I,OAAA,SAEM,IAAE,yBAAA4I,EAAAvK,OAAA,GAAA8J,EAAA,sDAGd,EAEKN,EAA0B,SAC9B3I,EACAqI,EACA9H,GAAgB,OACQnC,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2M,IAAA,IAAAC,EAAAhC,EAAAiC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAvN,EAAAA,EAAAA,KAAAI,MAAA,SAAAoN,GAAA,cAAAA,EAAAlN,KAAAkN,EAAAjN,MAAA,UACnByJ,EAAiB,CAAFwD,EAAAjN,KAAA,eAAAiN,EAAA/K,OAAA,SACX,IAAE,OAGLoK,EAAe7C,EAAgB3C,MAC/BwD,EAAQlJ,EAAM2J,cACdwB,EAA0B,GAAEC,GAAAxB,EAAAA,EAAAA,GACfsB,GAAY,IAA/B,IAAAE,EAAAvB,MAAAwB,EAAAD,EAAAtB,KAAAC,MAAW4B,EAAIN,EAAA3F,MAEO,MADd6F,EAAcI,EAAKG,kBAAkBtH,KAEzC0E,EAAMhI,IAAIqK,EAAaA,EAAahL,EAEvC,OAAAwL,GAAAX,EAAAf,EAAA0B,EAAA,SAAAX,EAAAd,GAAA,CAG4B,OAH5BuB,EAAAlN,KAAA,EAAAkN,EAAAjN,KAAA,GAGkCsK,EAAMsB,aAAY,QAA7CgB,EAAkBK,EAAAhL,KAAA4K,GAAA7B,EAAAA,EAAAA,GAELsB,GAAY,IAA/B,IAAAO,EAAA5B,MAAA6B,EAAAD,EAAA3B,KAAAC,MAAW4B,EAAID,EAAAhG,OAEQ,QADfkG,EAAoBJ,EAAmBtK,IAAIyK,EAAKG,kBAAkBtH,WACnD,IAAjBoH,OAAiB,EAAjBA,EAAmBnB,UACrBU,EAAWf,KAAKwB,EAAkBnB,QAErC,OAAAsB,GAAAN,EAAApB,EAAA0B,EAAA,SAAAN,EAAAnB,GAAA,QAAAuB,EAAA/K,OAAA,SACMqK,GAAU,eAAAU,EAAAlN,KAAA,GAAAkN,EAAAtK,GAAAsK,EAAA,SAAAA,EAAAlN,KAAA,GAAAkN,EAAA/K,OAAA,SAKR8J,QAAQC,IACbK,EACGxC,QAAO,SAAAsD,GAAW,OAAIC,QAAQD,EAAYF,kBAAkBtH,GAAG,IAC/DmB,KACC,SAAMqG,GAAW,OAAG5N,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA4N,IAAA,OAAA7N,EAAAA,EAAAA,KAAAI,MAAA,SAAA0N,GAAA,cAAAA,EAAAxN,KAAAwN,EAAAvN,MAAA,OACjB,OADiBuN,EAAAvN,KAAA,EACXoB,EACJe,IAAIiL,EAAYF,kBAAkBtH,IAClCxD,mBAAkBC,EAAAA,EAAAA,GAAWV,IAC7BW,MAAK,cAAAiL,EAAArL,OAAA,SAAAqL,EAAAtL,MAAA,wBAAAsL,EAAAhN,OAAA,GAAA+M,EAAA,IAAc,MAE7B,eAAAL,EAAAlN,KAAA,GAAAkN,EAAAnB,GAAAmB,EAAA,UAAAA,EAAA/K,OAAA,SAEM,IAAE,yBAAA+K,EAAA1M,OAAA,GAAA8L,EAAA,0BAGd,EAEKxF,EAAkC,SAAOzF,EAAeoF,GAAqB,OAAIhH,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA8N,IAAA,OAAA/N,EAAAA,EAAAA,KAAAI,MAAA,SAAA4N,GAAA,cAAAA,EAAA1N,KAAA0N,EAAAzN,MAAA,cAAAyN,EAAAvL,OAAA,SAC9EwL,EAAAA,EAAkBC,OAAkBvM,EAAOoF,IAAQ,wBAAAiH,EAAAlN,OAAA,GAAAiN,EAAA,IAC3D,EAEK5G,EAAgC,SAACxF,EAAe0F,EAAiBL,GACrE,OAAOiH,EAAAA,EAAkBE,gBACvBxM,EACA0F,EAAMC,KAAI,SAAAC,GAAC,OAAIvE,KAAKoH,MAAM7C,EAAe,IACzCP,EAEJ,EASMzE,EAAmB,SAA4BpC,EAA8BsK,GAAW,OAAsB1K,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAmO,IAAA,IAAArL,EAAA,OAAA/C,EAAAA,EAAAA,KAAAI,MAAA,SAAAiO,GAAA,cAAAA,EAAA/N,KAAA+N,EAAA9N,MAAA,WAC9Ga,IAA0B,CAAFiN,EAAA9N,KAAA,QACb,OADa8N,EAAA9N,KAAA,EACPJ,EAAMwL,SAASlB,GAAI,OAA5B,MAAJ1H,EAAIsL,EAAA7L,OAEEzB,IAA4B6K,KAAKC,MAAQ9I,EAAK+I,YAAU,CAAAuC,EAAA9N,KAAA,eAAA8N,EAAA5L,OAAA,SAE3DO,KAAKoH,MAAMrH,EAAKA,OAAgB,cAAAsL,EAAA5L,OAAA,SAIpC,MAAI,wBAAA4L,EAAAvN,OAAA,GAAAsN,EAAA,IACZ,EAEYlH,GAAuB,SAAO/G,EAAkCmO,EAAe7D,GAAW,OAAI1K,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAsO,IAAA,IAAAzH,EAAA,OAAA9G,EAAAA,EAAAA,KAAAI,MAAA,SAAAoO,GAAA,cAAAA,EAAAlO,KAAAkO,EAAAjO,MAAA,OAGxG,GAFIJ,IACHA,EAAQK,EAAAA,EAAaC,SAAwBC,EAAAA,EAAQC,UAAW2N,KAG9DhN,IAA8B,CAAFkN,EAAAjO,KAAA,QACb,OADaiO,EAAAjO,KAAA,EACPJ,EAAMwL,SAASlB,GAAI,OAA5B,MAAR3D,EAAQ0H,EAAAhM,QAliBhBhC,EAAAA,EAAaQ,OAAOL,UAAUO,oBAAsBV,EAAAA,EAAaQ,OAAOG,2BAoiBtByK,KAAKC,MAAQ/E,EAASgF,YAAU,CAAA0C,EAAAjO,KAAA,eAAAiO,EAAA/L,OAAA,SACvEqE,GAAQ,cAAA0H,EAAA/L,OAAA,SAIZ,MAAI,wBAAA+L,EAAA1N,OAAA,GAAAyN,EAAA,IACZ,EAGYE,GAAwC,SAAO5H,GAA+C,OAAI9G,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAyO,IAAA,IAAA1H,EAAA7G,EAAAwO,EAAAlE,EAAA,OAAAzK,EAAAA,EAAAA,KAAAI,MAAA,SAAAwO,GAAA,cAAAA,EAAAtO,KAAAsO,EAAArO,MAAA,OAClE,GAArCyG,EAAWH,EAAkBG,UAE/BH,EAAkBgI,QAAS,CAAFD,EAAArO,KAAA,QAC3B,OAD2BqO,EAAArO,KAAA,EACrBsG,EAAkBtG,OAAM,WAE5Be,IAA8B,CAAFsN,EAAArO,KAAA,SAW9B,OAVMJ,EAAmCK,EAAAA,EAAaC,SACpDC,EAAAA,EAAQC,UACRD,EAAAA,EAAQC,UAAUC,OAAOD,WAKrBgO,EADM,kDACQG,KAAK9H,GACnByD,EAAMkE,EAAQ,GAAEC,EAAArO,KAAA,GAEhBJ,EAAM2C,SAAS2H,EAAK,CAAExJ,MAAO4F,EAAkBQ,MAAMC,KAAI,SAAAC,GAAC,OAAIvE,KAAKC,UAAUsE,EAAE,IAAGP,SAAAA,IAAW,yBAAA4H,EAAA9N,OAAA,GAAA4N,EAAA,IAEtG,EASYK,GAAuB,SAClCpN,EACAC,EACAM,GAAgB,OACWnC,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA+O,IAAA,IAAA3M,EAAA4M,EAAAC,EAAA,OAAAlP,EAAAA,EAAAA,KAAAI,MAAA,SAAA+O,GAAA,cAAAA,EAAA7O,KAAA6O,EAAA5O,MAAA,OAEP,OAFO4O,EAAA7O,KAAA,EAAA6O,EAAA5O,KAAA,EAEDoB,EACrBe,IAAId,GACJwN,aAAaC,EAAAA,GAAaC,KAC1B3M,mBAAkBC,EAAAA,EAAAA,GAAWV,IAC7BW,MAAK,OAJM,GAMU,OANlBR,EAAQ8M,EAAA3M,MAMD+M,OAAc,CAAAJ,EAAA5O,KAAA,eAAA4O,EAAA1M,OAAA,SAIlB,CAAEwM,KAAM,KAAMO,UAAW,OAAM,UAC5BnN,EAASoN,GAAI,CAAFN,EAAA5O,KAAA,gBAAA4O,EAAA1M,OAAA,SACd,MAAI,QAImB,OAD1BwM,EAAO5M,EAASqN,QAAQ7M,IAAI,QAAOsM,EAAAjM,GACtByM,EAAAA,GAAYR,EAAA5O,KAAA,GAAO8B,EAAS6M,OAAM,QAAxC,OAAwCC,EAAA9C,GAAA8C,EAAA3M,KAAA2M,EAAA5O,KAAA,IAAxC,EAAA4O,EAAAjM,IAAAiM,EAAA9C,IAAyC,QAA5C,OAAJ6C,EAAIC,EAAA3M,KAAA2M,EAAA1M,OAAA,SACH,CAAEwM,KAAAA,EAAMO,UAAWN,IAAM,eAAAC,EAAA7O,KAAA,GAAA6O,EAAA7C,GAAA6C,EAAA,SAAAA,EAAA1M,OAAA,SAEzB,MAAI,yBAAA0M,EAAArO,OAAA,GAAAkO,EAAA,kBAEd,EASYY,GAAe,SAAOjO,EAAeC,GAAgB,OAAwB7B,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA4P,IAAA,IAAAxN,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAA0P,GAAA,cAAAA,EAAAxP,KAAAwP,EAAAvP,MAAA,OAGpE,OAHoEuP,EAAAxP,KAAA,EAAAwP,EAAAvP,KAAA,EAG9DoB,EAAMe,IAAId,GAAUe,mBAAkBC,EAAAA,EAAAA,GAAWrB,IAAuBsB,MAAK,OAAvF,OAARR,EAAQyN,EAAAtN,KAAAsN,EAAArN,OAAA,SACPJ,GAAY,MAAI,OAAAyN,EAAAxP,KAAA,EAAAwP,EAAA5M,GAAA4M,EAAA,uBAAAA,EAAArN,OAAA,SAIlB,MAAI,yBAAAqN,EAAAhP,OAAA,GAAA+O,EAAA,iBACZ,EASYE,GAAmB,SAC9BpO,EACAC,EACAoO,GAAwB,OACEjQ,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAgQ,IAAA,IAAAC,EAAA7N,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAA+P,GAAA,cAAAA,EAAA7P,KAAA6P,EAAA5P,MAAA,OAUV,OAVU4P,EAAA7P,KAAA,EAGlB4P,EAAiB,CACrB5C,KAAM,CACJ,oCAA0D,IAArB0C,GAA+C,OAArBA,EAA4B,SAAW,YAEzGG,EAAA7P,KAAA,EAAA6P,EAAA5P,KAAA,EAGmBoB,EACfe,IAAId,GACJe,mBAAkBC,EAAAA,EAAAA,GAAWnB,IAC7B2O,KAAKpN,KAAKC,UAAUiN,IAAgB,OAHvC7N,EAAQ8N,EAAA3N,KAAA2N,EAAA5P,KAAG,GAAH,aAAA4P,EAAA7P,KAAG,EAAH6P,EAAAjN,GAAAiN,EAAA,wBAAAA,EAAA1N,OAAA,SAOHJ,GAAY,MAAI,eAAA8N,EAAA7P,KAAA,GAAA6P,EAAA9D,GAAA8D,EAAA,SAAAA,EAAA1N,OAAA,SAEhB,MAAI,yBAAA0N,EAAArP,OAAA,GAAAmP,EAAA,wBAEd,EAUYI,GAAgB,SAC3B1O,EACAC,EACA0O,EACAC,EACAxN,GAAU,OAC4BhD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAuQ,IAAA,IAAAC,EAAApO,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAAsQ,GAAA,cAAAA,EAAApQ,KAAAoQ,EAAAnQ,MAAA,OAStB,OATsBmQ,EAAApQ,KAAA,EAG9BmQ,EAAS,CACb,iBAAkBH,EAClB,gBAAiBC,GAClBG,EAAApQ,KAAA,EAAAoQ,EAAAnQ,KAAA,EAGmBoB,EAAMgP,OACrBjO,IAAId,GACJe,mBAAkBC,EAAAA,EAAAA,GAAWnB,IAC7BiO,QAAQe,GACRG,IAAI7N,GAAK,OAJZV,EAAQqO,EAAAlO,KAAAkO,EAAAnQ,KAAG,GAAH,aAAAmQ,EAAApQ,KAAG,EAAHoQ,EAAAxN,GAAAwN,EAAA,wBAAAA,EAAAjO,OAAA,SAQHJ,GAAY,MAAI,eAAAqO,EAAApQ,KAAA,GAAAoQ,EAAArE,GAAAqE,EAAA,SAAAA,EAAAjO,OAAA,SAEhB,MAAI,yBAAAiO,EAAA5P,OAAA,GAAA0P,EAAA,wBAEd,EAUYK,GAAkB,SAAOlP,EAAeC,EAAkBmB,GAAU,OAAwBhD,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAA6Q,IAAA,IAAAzO,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAA2Q,GAAA,cAAAA,EAAAzQ,KAAAyQ,EAAAxQ,MAAA,OAKvF,OALuFwQ,EAAAzQ,KAAA,EAAAyQ,EAAAzQ,KAAA,EAAAyQ,EAAAxQ,KAAA,EAKjFoB,EAAMgP,OACrBjO,IAAId,GACJe,mBAAkBC,EAAAA,EAAAA,GAAWnB,IAC7BmP,IAAI7N,GAAK,OAHZV,EAAQ0O,EAAAvO,KAAAuO,EAAAxQ,KAAG,EAAH,aAAAwQ,EAAAzQ,KAAG,EAAHyQ,EAAA7N,GAAA6N,EAAA,uBAAAA,EAAAtO,OAAA,SAOHJ,GAAY,MAAI,eAAA0O,EAAAzQ,KAAA,GAAAyQ,EAAA1E,GAAA0E,EAAA,SAAAA,EAAAtO,OAAA,SAEhB,MAAI,yBAAAsO,EAAAjQ,OAAA,GAAAgQ,EAAA,wBAEd,EASYE,GAAoB,SAAOrP,EAAeC,GAAgB,OAAmB7B,OAAA,iBAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAgR,IAAA,OAAAjR,EAAAA,EAAAA,KAAAI,MAAA,SAAA8Q,GAAA,cAAAA,EAAA5Q,KAAA4Q,EAAA3Q,MAAA,OAEtF,OAFsF2Q,EAAA5Q,KAAA,EAAA4Q,EAAA3Q,KAAA,EAEhFoB,EAAMgP,OAAOjO,IAAId,GAAUe,mBAAkBC,EAAAA,EAAAA,GAAWnB,IAAwB0P,SAAQ,OAAAD,EAAA3Q,KAAA,sBAAA2Q,EAAA5Q,KAAA,EAAA4Q,EAAAhO,GAAAgO,EAAA,SAAAA,EAAAzO,OAAA,SAKvF,MAAI,wBAAAyO,EAAApQ,OAAA,GAAAmQ,EAAA,iBAEd,C,+XCzzBYhD,EAAiB,oBAAAA,KAAAmD,EAAAA,EAAAA,GAAA,KAAAnD,EAAA,CAuE3B,OAvE2BoD,EAAAA,EAAAA,GAAApD,EAAA,EAAAxD,IAAA,QAAA5H,IAQ5B,WACE,OAAOyO,KAAKC,MACd,GAEA,CAAA9G,IAAA,UAAA5H,IAOA,WACE,OAAO+K,QAAQ0D,KAAKE,UACtB,GAEA,CAAA/G,IAAA,WAAA5H,IA2DA,WACE,OAAOyO,KAAKE,WAAa,EAC3B,GAIA,CAAA/G,IAAA,OAAApD,MAMa,W,iJACPiK,KAAKE,UAAW,CAAFnR,EAAAE,KAAA,QAEE,OADZkR,EAAeH,KAAKE,UAAUE,MAAMJ,KAAKK,UAAU,GAAEtR,EAAAE,KAAA,EACnC+Q,KAAKM,OAAOlP,IAAI+O,GAAcI,QAAQP,KAAKK,UAAU9O,MAAK,OAApE,GAARR,EAAQhC,EAAAmC,OACK,QAAfsP,EAAQ,OAARzP,QAAQ,IAARA,OAAQ,EAARA,EAAUgF,aAAK,IAAAyK,OAAA,EAAAA,EAAE/P,QAAM,CAAA1B,EAAAE,KAAA,QAE8B,OADvD+Q,KAAKC,OAASD,KAAKC,OAAO9N,OAAOpB,EAASgF,OAC1CiK,KAAKE,UAAYnP,EAAS,mBAA6BhC,EAAAoC,OAAA,SAChDJ,EAASgF,OAAK,cAAAhH,EAAAoC,OAAA,SAGlB,MAAI,yBAAApC,EAAAS,OAAA,GAAAZ,EAAA,S,IACZ,EAAAuK,IAAA,SAAApD,MAtEM,SAAuB1F,EAAeoF,EAAuB8K,G,uIAChD,O,SAAM9K,EAAQlE,MAAK,OAAvB,KACF,QADNR,EAAQC,EAAAE,YACF,IAARH,OAAQ,EAARA,EAAUgF,OAAK,CAAA/E,EAAA/B,KAAA,SAK4B,OAJvCwR,EAAW,IAAI9D,GACZ2D,OAASjQ,EAClBoQ,EAASR,OAASlP,EAASgF,MAC3B0K,EAASP,UAAYnP,EAAS,mBAC9B0P,EAASJ,SAAWE,GAAWlQ,EAAMkQ,QAAQvP,EAAAG,OAAA,SACtCsP,GAAQ,eAAAzP,EAAAG,OAAA,SAGV,MAAI,yBAAAH,EAAAxB,OAAA,GAAAqB,EAAA,I,GAGb,CAAAsI,IAAA,kBAAApD,MAYO,SAA0B1F,EAAe0F,GAAmC,IAAvBL,EAAAlF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAmB,KACvEiQ,EAAW,IAAI9D,EAQrB,OALA8D,EAASH,OAASjQ,EAClBoQ,EAASR,OAASlK,EAClB0K,EAASP,UAAYxK,EACrB+K,EAASJ,SAAWhQ,EAAMkQ,QAEnBE,CACT,KAAC9D,CAAA,CAvE2B,E","sources":["../../../packages/mgt-components/dist/es6/graph/src/graph/graph.files.ts","../../../packages/mgt-element/dist/es6/utils/src/utils/GraphPageIterator.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport {\n  CacheItem,\n  CacheService,\n  CacheStore,\n  CollectionResponse,\n  GraphPageIterator,\n  IGraph,\n  prepScopes\n} from '@microsoft/mgt-element';\nimport { DriveItem, SharedInsight, Trending, UploadSession, UsedInsight } from '@microsoft/microsoft-graph-types';\nimport { schemas } from './cacheStores';\nimport { GraphRequest, ResponseType } from '@microsoft/microsoft-graph-client';\nimport { blobToBase64 } from '../utils/Utils';\n\n/**\n * Simple type guard to check if a response is an UploadSession\n *\n * @param session\n * @returns\n */\nexport const isUploadSession = (session: unknown): session is UploadSession => {\n  return Array.isArray((session as UploadSession).nextExpectedRanges);\n};\n\ntype Insight = SharedInsight | UsedInsight | Trending;\n\n/**\n * Object to be stored in cache\n */\ninterface CacheFile extends CacheItem {\n  /**\n   * stringified json representing a file\n   */\n  file?: string;\n}\n\n/**\n * Object to be stored in cache\n */\ninterface CacheFileList extends CacheItem {\n  /**\n   * stringified json representing a list of files\n   */\n  files?: string[];\n  /**\n   * nextLink string to get next page\n   */\n  nextLink?: string;\n}\n\n/**\n * document thumbnail object stored in cache\n */\nexport interface CacheThumbnail extends CacheItem {\n  /**\n   * tag associated with thumbnail\n   */\n  eTag?: string;\n  /**\n   * document thumbnail\n   */\n  thumbnail?: string;\n}\n\n/**\n * Clear Cache of FileList\n */\nexport const clearFilesCache = async (): Promise<void> => {\n  const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(\n    schemas.fileLists,\n    schemas.fileLists.stores.fileLists\n  );\n  await cache.clearStore();\n};\n\n/**\n * Defines the time it takes for objects in the cache to expire\n */\nexport const getFileInvalidationTime = (): number =>\n  CacheService.config.files.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether or not the cache is enabled\n */\nexport const getIsFilesCacheEnabled = (): boolean =>\n  CacheService.config.files.isEnabled && CacheService.config.isEnabled;\n\n/**\n * Defines the time it takes for objects in the cache to expire\n */\nexport const getFileListInvalidationTime = (): number =>\n  CacheService.config.fileLists.invalidationPeriod || CacheService.config.defaultInvalidationPeriod;\n\n/**\n * Whether or not the cache is enabled\n */\nexport const getIsFileListsCacheEnabled = (): boolean =>\n  CacheService.config.fileLists.isEnabled && CacheService.config.isEnabled;\n\nconst validDriveItemScopes = [\n  'Files.Read',\n  'Files.ReadWrite',\n  'Files.Read.All',\n  'Files.ReadWrite.All',\n  'Group.Read.All',\n  'Group.ReadWrite.All',\n  'Sites.Read.All',\n  'Sites.ReadWrite.All'\n];\nexport const validInsightScopes = ['Sites.Read.All', 'Sites.ReadWrite.All'];\nconst validFileUploadScopes = ['Files.ReadWrite', 'Files.ReadWrite.All', 'Sites.ReadWrite.All'];\n/**\n * Load a DriveItem give and arbitrary query\n *\n * @param graph\n * @param resource\n * @returns\n */\nexport const getDriveItemByQuery = async (\n  graph: IGraph,\n  resource: string,\n  storeName: string = schemas.files.stores.fileQueries,\n  scopes = validDriveItemScopes\n): Promise<DriveItem> => {\n  // get from cache\n  const cache: CacheStore<CacheFile> = CacheService.getCache<CacheFile>(schemas.files, storeName);\n  const cachedFile = await getFileFromCache(cache, resource);\n  if (cachedFile) {\n    return cachedFile;\n  }\n\n  let response: DriveItem;\n  try {\n    response = (await graph.api(resource).middlewareOptions(prepScopes(scopes)).get()) as DriveItem;\n\n    if (getIsFilesCacheEnabled()) {\n      await cache.putValue(resource, { file: JSON.stringify(response) });\n    }\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  return response || null;\n};\n\n// GET /drives/{drive-id}/items/{item-id}\nexport const getDriveItemById = async (graph: IGraph, driveId: string, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/drives/${driveId}/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.driveFiles);\n};\n\n// GET /drives/{drive-id}/root:/{item-path}\nexport const getDriveItemByPath = async (graph: IGraph, driveId: string, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/drives/${driveId}/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.driveFiles);\n};\n\n// GET /groups/{group-id}/drive/items/{item-id}\nexport const getGroupDriveItemById = async (graph: IGraph, groupId: string, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/groups/${groupId}/drive/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.groupFiles);\n};\n\n// GET /groups/{group-id}/drive/root:/{item-path}\nexport const getGroupDriveItemByPath = async (graph: IGraph, groupId: string, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/groups/${groupId}/drive/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.groupFiles);\n};\n\n// GET /me/drive/items/{item-id}\nexport const getMyDriveItemById = async (graph: IGraph, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/me/drive/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.userFiles);\n};\n\n// GET /me/drive/root:/{item-path}\nexport const getMyDriveItemByPath = async (graph: IGraph, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/me/drive/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.userFiles);\n};\n\n// GET /sites/{site-id}/drive/items/{item-id}\nexport const getSiteDriveItemById = async (graph: IGraph, siteId: string, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/sites/${siteId}/drive/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.siteFiles);\n};\n\n// GET /sites/{site-id}/drive/root:/{item-path}\nexport const getSiteDriveItemByPath = async (graph: IGraph, siteId: string, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/sites/${siteId}/drive/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.siteFiles);\n};\n\n// GET /sites/{site-id}/lists/{list-id}/items/{item-id}/driveItem\nexport const getListDriveItemById = async (\n  graph: IGraph,\n  siteId: string,\n  listId: string,\n  itemId: string\n): Promise<DriveItem> => {\n  const endpoint = `/sites/${siteId}/lists/${listId}/items/${itemId}/driveItem`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.siteFiles);\n};\n\n// GET /users/{user-id}/drive/items/{item-id}\nexport const getUserDriveItemById = async (graph: IGraph, userId: string, itemId: string): Promise<DriveItem> => {\n  const endpoint = `/users/${userId}/drive/items/${itemId}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.userFiles);\n};\n\n// GET /users/{user-id}/drive/root:/{item-path}\nexport const getUserDriveItemByPath = async (graph: IGraph, userId: string, itemPath: string): Promise<DriveItem> => {\n  const endpoint = `/users/${userId}/drive/root:/${itemPath}`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.userFiles);\n};\n\n// GET /me/insights/trending/{id}/resource\n// GET /me/insights/used/{id}/resource\n// GET /me/insights/shared/{id}/resource\nexport const getMyInsightsDriveItemById = async (\n  graph: IGraph,\n  insightType: string,\n  id: string\n): Promise<DriveItem> => {\n  const endpoint = `/me/insights/${insightType}/${id}/resource`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.insightFiles, validInsightScopes);\n};\n\n// GET /users/{id or userPrincipalName}/insights/{trending or used or shared}/{id}/resource\nexport const getUserInsightsDriveItemById = async (\n  graph: IGraph,\n  userId: string,\n  insightType: string,\n  id: string\n): Promise<DriveItem> => {\n  const endpoint = `/users/${userId}/insights/${insightType}/${id}/resource`;\n  return getDriveItemByQuery(graph, endpoint, schemas.files.stores.insightFiles, validInsightScopes);\n};\n\nconst getIterator = async (\n  graph: IGraph,\n  endpoint: string,\n  storeName: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  let filesPageIterator: GraphPageIterator<DriveItem>;\n\n  // get iterator from cached values\n  const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(schemas.fileLists, storeName);\n  const fileList = await getFileListFromCache(cache, storeName, `${endpoint}:${top}`);\n  if (fileList) {\n    filesPageIterator = getFilesPageIteratorFromCache(graph, fileList.files, fileList.nextLink);\n\n    return filesPageIterator;\n  }\n\n  // get iterator from graph request\n  let request: GraphRequest;\n  try {\n    request = graph.api(endpoint).middlewareOptions(prepScopes(validDriveItemScopes));\n    if (top) {\n      request.top(top);\n    }\n    filesPageIterator = await getFilesPageIteratorFromRequest(graph, request);\n\n    if (getIsFileListsCacheEnabled()) {\n      const nextLink = filesPageIterator.nextLink;\n      await cache.putValue(endpoint, {\n        files: filesPageIterator.value.map(v => JSON.stringify(v)),\n        nextLink\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch {}\n  return filesPageIterator || null;\n};\n\n// GET /me/drive/root/children\nexport const getFilesIterator = async (graph: IGraph, top?: number): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = '/me/drive/root/children';\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /drives/{drive-id}/items/{item-id}/children\nexport const getDriveFilesByIdIterator = async (\n  graph: IGraph,\n  driveId: string,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/drives/${driveId}/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /drives/{drive-id}/root:/{item-path}:/children\nexport const getDriveFilesByPathIterator = async (\n  graph: IGraph,\n  driveId: string,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/drives/${driveId}/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /groups/{group-id}/drive/items/{item-id}/children\nexport const getGroupFilesByIdIterator = async (\n  graph: IGraph,\n  groupId: string,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/groups/${groupId}/drive/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /groups/{group-id}/drive/root:/{item-path}:/children\nexport const getGroupFilesByPathIterator = async (\n  graph: IGraph,\n  groupId: string,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/groups/${groupId}/drive/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /me/drive/items/{item-id}/children\nexport const getFilesByIdIterator = async (\n  graph: IGraph,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/me/drive/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /me/drive/root:/{item-path}:/children\nexport const getFilesByPathIterator = async (\n  graph: IGraph,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/me/drive/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /sites/{site-id}/drive/items/{item-id}/children\nexport const getSiteFilesByIdIterator = async (\n  graph: IGraph,\n  siteId: string,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/sites/${siteId}/drive/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /sites/{site-id}/drive/root:/{item-path}:/children\nexport const getSiteFilesByPathIterator = async (\n  graph: IGraph,\n  siteId: string,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/sites/${siteId}/drive/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /users/{user-id}/drive/items/{item-id}/children\nexport const getUserFilesByIdIterator = async (\n  graph: IGraph,\n  userId: string,\n  itemId: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/users/${userId}/drive/items/${itemId}/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\n// GET /users/{user-id}/drive/root:/{item-path}:/children\nexport const getUserFilesByPathIterator = async (\n  graph: IGraph,\n  userId: string,\n  itemPath: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const endpoint = `/users/${userId}/drive/root:/${itemPath}:/children`;\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, endpoint, cacheStore, top);\n};\n\nexport const getFilesByListQueryIterator = async (\n  graph: IGraph,\n  listQuery: string,\n  top?: number\n): Promise<GraphPageIterator<DriveItem>> => {\n  const cacheStore = schemas.fileLists.stores.fileLists;\n  return getIterator(graph, listQuery, cacheStore, top);\n};\n\n// GET /me/insights/{trending\t| used | shared}\nexport const getMyInsightsFiles = async (graph: IGraph, insightType: string): Promise<DriveItem[]> => {\n  const endpoint = `/me/insights/${insightType}`;\n  const cacheStore = schemas.fileLists.stores.insightfileLists;\n\n  // get files from cached values\n  const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(schemas.fileLists, cacheStore);\n  const fileList = await getFileListFromCache(cache, cacheStore, endpoint);\n  if (fileList) {\n    // fileList.files is string[] so JSON.parse to get proper objects\n    return fileList.files.map((file: string) => JSON.parse(file) as DriveItem);\n  }\n\n  // get files from graph request\n  let insightResponse: CollectionResponse<Insight>;\n  try {\n    insightResponse = (await graph\n      .api(endpoint)\n      .filter(\"resourceReference/type eq 'microsoft.graph.driveItem'\")\n      .middlewareOptions(prepScopes(validInsightScopes))\n      .get()) as CollectionResponse<Insight>;\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  const result = await getDriveItemsByInsights(graph, insightResponse, validInsightScopes);\n  if (getIsFileListsCacheEnabled()) {\n    await cache.putValue(endpoint, { files: result.map(file => JSON.stringify(file)) });\n  }\n\n  return result || null;\n};\n\n// GET /users/{id | userPrincipalName}/insights/{trending\t| used | shared}\nexport const getUserInsightsFiles = async (\n  graph: IGraph,\n  userId: string,\n  insightType: string\n): Promise<DriveItem[]> => {\n  let endpoint: string;\n  let filter: string;\n\n  if (insightType === 'shared') {\n    endpoint = '/me/insights/shared';\n    filter = `((lastshared/sharedby/id eq '${userId}') and (resourceReference/type eq 'microsoft.graph.driveItem'))`;\n  } else {\n    endpoint = `/users/${userId}/insights/${insightType}`;\n    filter = \"resourceReference/type eq 'microsoft.graph.driveItem'\";\n  }\n\n  const key = `${endpoint}?$filter=${filter}`;\n\n  // get files from cached values\n  const cacheStore = schemas.fileLists.stores.insightfileLists;\n  const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(schemas.fileLists, cacheStore);\n  const fileList = await getFileListFromCache(cache, cacheStore, key);\n  if (fileList) {\n    return fileList.files.map((file: string) => JSON.parse(file) as DriveItem);\n  }\n\n  // get files from graph request\n  let insightResponse: CollectionResponse<Insight>;\n\n  try {\n    insightResponse = (await graph\n      .api(endpoint)\n      .filter(filter)\n      .middlewareOptions(prepScopes(validInsightScopes))\n      .get()) as CollectionResponse<Insight>;\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  const result = await getDriveItemsByInsights(graph, insightResponse, validInsightScopes);\n  if (getIsFileListsCacheEnabled()) {\n    await cache.putValue(endpoint, { files: result.map(file => JSON.stringify(file)) });\n  }\n\n  return result || null;\n};\n\nexport const getFilesByQueries = async (graph: IGraph, fileQueries: string[]): Promise<DriveItem[]> => {\n  if (!fileQueries || fileQueries.length === 0) {\n    return [];\n  }\n\n  const batch = graph.createBatch();\n  const files: DriveItem[] = [];\n  let cache: CacheStore<CacheFile>;\n  let cachedFile: CacheFile;\n  if (getIsFilesCacheEnabled()) {\n    cache = CacheService.getCache<CacheFile>(schemas.files, schemas.files.stores.fileQueries);\n  }\n\n  for (const fileQuery of fileQueries) {\n    if (getIsFilesCacheEnabled()) {\n      cachedFile = await cache.getValue(fileQuery); // todo\n    }\n\n    if (getIsFilesCacheEnabled() && cachedFile && getFileInvalidationTime() > Date.now() - cachedFile.timeCached) {\n      files.push(JSON.parse(cachedFile.file) as DriveItem);\n    } else if (fileQuery !== '') {\n      batch.get(fileQuery, fileQuery, validDriveItemScopes);\n    }\n  }\n\n  try {\n    const responses = await batch.executeAll();\n\n    for (const fileQuery of fileQueries) {\n      const response = responses.get(fileQuery);\n      if (response?.content) {\n        files.push(response.content as DriveItem);\n        if (getIsFilesCacheEnabled()) {\n          await cache.putValue(fileQuery, { file: JSON.stringify(response.content) });\n        }\n      }\n    }\n\n    return files;\n  } catch (_) {\n    try {\n      return Promise.all(\n        fileQueries\n          .filter(fileQuery => fileQuery && fileQuery !== '')\n          .map(async fileQuery => {\n            const file = await getDriveItemByQuery(graph, fileQuery);\n            if (file) {\n              if (getIsFilesCacheEnabled()) {\n                await cache.putValue(fileQuery, { file: JSON.stringify(file) });\n              }\n              return file;\n            }\n          })\n      );\n    } catch (e) {\n      return [];\n    }\n  }\n};\n\nconst getDriveItemsByInsights = async (\n  graph: IGraph,\n  insightResponse: CollectionResponse<Insight>,\n  scopes: string[]\n): Promise<DriveItem[]> => {\n  if (!insightResponse) {\n    return [];\n  }\n\n  const insightItems = insightResponse.value;\n  const batch = graph.createBatch();\n  const driveItems: DriveItem[] = [];\n  for (const item of insightItems) {\n    const driveItemId = item.resourceReference.id;\n    if (driveItemId !== '') {\n      batch.get(driveItemId, driveItemId, scopes);\n    }\n  }\n\n  try {\n    const driveItemResponses = await batch.executeAll();\n\n    for (const item of insightItems) {\n      const driveItemResponse = driveItemResponses.get(item.resourceReference.id);\n      if (driveItemResponse?.content) {\n        driveItems.push(driveItemResponse.content as DriveItem);\n      }\n    }\n    return driveItems;\n  } catch (_) {\n    try {\n      // we're filtering the insights calls that feed this to ensure that only\n      // drive items are returned, but we still need to check for nulls\n      return Promise.all(\n        insightItems\n          .filter(insightItem => Boolean(insightItem.resourceReference.id))\n          .map(\n            async insightItem =>\n              (await graph\n                .api(insightItem.resourceReference.id)\n                .middlewareOptions(prepScopes(scopes))\n                .get()) as DriveItem\n          )\n      );\n    } catch (e) {\n      return [];\n    }\n  }\n};\n\nconst getFilesPageIteratorFromRequest = async (graph: IGraph, request: GraphRequest) => {\n  return GraphPageIterator.create<DriveItem>(graph, request);\n};\n\nconst getFilesPageIteratorFromCache = (graph: IGraph, value: string[], nextLink: string) => {\n  return GraphPageIterator.createFromValue<DriveItem>(\n    graph,\n    value.map(v => JSON.parse(v) as DriveItem),\n    nextLink\n  );\n};\n\n/**\n * Load a file from the cache\n *\n * @param {CacheStore<CacheFile>} cache\n * @param {string} key\n * @return {*}\n */\nconst getFileFromCache = async <TResult = DriveItem>(cache: CacheStore<CacheFile>, key: string): Promise<TResult> => {\n  if (getIsFilesCacheEnabled()) {\n    const file = await cache.getValue(key);\n\n    if (file && getFileInvalidationTime() > Date.now() - file.timeCached) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return JSON.parse(file.file) as TResult;\n    }\n  }\n\n  return null;\n};\n\nexport const getFileListFromCache = async (cache: CacheStore<CacheFileList>, store: string, key: string) => {\n  if (!cache) {\n    cache = CacheService.getCache<CacheFileList>(schemas.fileLists, store);\n  }\n\n  if (getIsFileListsCacheEnabled()) {\n    const fileList = await cache.getValue(key);\n\n    if (fileList && getFileListInvalidationTime() > Date.now() - fileList.timeCached) {\n      return fileList;\n    }\n  }\n\n  return null;\n};\n\n// refresh filesPageIterator to its next iteration and save current page to cache\nexport const fetchNextAndCacheForFilesPageIterator = async (filesPageIterator: GraphPageIterator<DriveItem>) => {\n  const nextLink = filesPageIterator.nextLink;\n\n  if (filesPageIterator.hasNext) {\n    await filesPageIterator.next();\n  }\n  if (getIsFileListsCacheEnabled()) {\n    const cache: CacheStore<CacheFileList> = CacheService.getCache<CacheFileList>(\n      schemas.fileLists,\n      schemas.fileLists.stores.fileLists\n    );\n\n    // match only the endpoint (after version number and before OData query params) e.g. /me/drive/root/children\n    const reg = /(graph.microsoft.com\\/(v1.0|beta))(.*?)(?=\\?)/gi;\n    const matches = reg.exec(nextLink);\n    const key = matches[3];\n\n    await cache.putValue(key, { files: filesPageIterator.value.map(v => JSON.stringify(v)), nextLink });\n  }\n};\n\n/**\n * retrieves the specified document thumbnail\n *\n * @param {string} resource\n * @param {string[]} scopes\n * @returns {Promise<string>}\n */\nexport const getDocumentThumbnail = async (\n  graph: IGraph,\n  resource: string,\n  scopes: string[]\n): Promise<CacheThumbnail> => {\n  try {\n    const response = (await graph\n      .api(resource)\n      .responseType(ResponseType.RAW)\n      .middlewareOptions(prepScopes(scopes))\n      .get()) as Response;\n\n    if (response.status === 404) {\n      // 404 means the resource does not have a thumbnail\n      // we still want to cache that state\n      // so we return an object that can be cached\n      return { eTag: null, thumbnail: null };\n    } else if (!response.ok) {\n      return null;\n    }\n\n    const eTag = response.headers.get('eTag');\n    const blob = await blobToBase64(await response.blob());\n    return { eTag, thumbnail: blob };\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * retrieve file properties based on Graph query\n *\n * @param graph\n * @param resource\n * @returns\n */\nexport const getGraphfile = async (graph: IGraph, resource: string): Promise<DriveItem> => {\n  // get from graph request\n  try {\n    const response = (await graph.api(resource).middlewareOptions(prepScopes(validDriveItemScopes)).get()) as DriveItem;\n    return response || null;\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  return null;\n};\n\n/**\n * retrieve UploadSession Url for large file and send by chuncks\n *\n * @param graph\n * @param resource\n * @returns\n */\nexport const getUploadSession = async (\n  graph: IGraph,\n  resource: string,\n  conflictBehavior: number\n): Promise<UploadSession> => {\n  try {\n    // get from graph request\n    const sessionOptions = {\n      item: {\n        '@microsoft.graph.conflictBehavior': conflictBehavior === 0 || conflictBehavior === null ? 'rename' : 'replace'\n      }\n    };\n    let response: UploadSession;\n    try {\n      response = (await graph\n        .api(resource)\n        .middlewareOptions(prepScopes(validFileUploadScopes))\n        .post(JSON.stringify(sessionOptions))) as UploadSession;\n      // eslint-disable-next-line no-empty\n    } catch {}\n\n    return response || null;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * send file chunck to OneDrive, SharePoint Site\n *\n * @param graph\n * @param resource\n * @param file\n * @returns\n */\nexport const sendFileChunk = async (\n  graph: IGraph,\n  resource: string,\n  contentLength: string,\n  contentRange: string,\n  file: Blob\n): Promise<UploadSession | DriveItem> => {\n  try {\n    // get from graph request\n    const header = {\n      'Content-Length': contentLength,\n      'Content-Range': contentRange\n    };\n    let response: UploadSession | DriveItem;\n    try {\n      response = (await graph.client\n        .api(resource)\n        .middlewareOptions(prepScopes(validFileUploadScopes))\n        .headers(header)\n        .put(file)) as UploadSession | DriveItem;\n      // eslint-disable-next-line no-empty\n    } catch {}\n\n    return response || null;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * send file to OneDrive, SharePoint Site\n *\n * @param graph\n * @param resource\n * @param file\n * @returns\n */\nexport const sendFileContent = async (graph: IGraph, resource: string, file: File): Promise<DriveItem> => {\n  try {\n    // get from graph request\n    let response: DriveItem;\n    try {\n      response = (await graph.client\n        .api(resource)\n        .middlewareOptions(prepScopes(validFileUploadScopes))\n        .put(file)) as DriveItem;\n      // eslint-disable-next-line no-empty\n    } catch {}\n\n    return response || null;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * delete upload session\n *\n * @param graph\n * @param resource\n * @returns\n */\nexport const deleteSessionFile = async (graph: IGraph, resource: string): Promise<void> => {\n  try {\n    await graph.client.api(resource).middlewareOptions(prepScopes(validFileUploadScopes)).delete();\n  } catch {\n    // TODO: re-examine the error handling here\n    // DELETE returns a 204 on success so void makes sense to return on the happy path\n    // but we should probably throw on error\n    return null;\n  }\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { GraphRequest } from '@microsoft/microsoft-graph-client';\nimport { IGraph } from '../IGraph';\nimport { CollectionResponse } from '../CollectionResponse';\n\n/**\n * A helper class to assist in getting multiple pages from a resource\n *\n * @export\n * @class GraphPageIterator\n * @template T\n */\nexport class GraphPageIterator<T> {\n  /**\n   * Gets all the items already fetched for this request\n   *\n   * @readonly\n   * @type {T[]}\n   * @memberof GraphPageIterator\n   */\n  public get value(): T[] {\n    return this._value;\n  }\n\n  /**\n   * Gets wheather this request has more pages\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof GraphPageIterator\n   */\n  public get hasNext(): boolean {\n    return Boolean(this._nextLink);\n  }\n\n  /**\n   * Creates a new GraphPageIterator\n   *\n   * @static\n   * @template T - the type of entities expected from this request\n   * @param {IGraph} graph - the graph instance to use for making requests\n   * @param {GraphRequest} request - the initial request\n   * @param {string} [version] - optional version to use for the requests - by default uses the default version\n   * from the graph parameter\n   * @returns a GraphPageIterator\n   * @memberof GraphPageIterator\n   */\n  public static async create<T>(graph: IGraph, request: GraphRequest, version?: string): Promise<GraphPageIterator<T>> {\n    const response = (await request.get()) as CollectionResponse<T>;\n    if (response?.value) {\n      const iterator = new GraphPageIterator<T>();\n      iterator._graph = graph;\n      iterator._value = response.value;\n      iterator._nextLink = response['@odata.nextLink'] as string;\n      iterator._version = version || graph.version;\n      return iterator;\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a new GraphPageIterator from existing value\n   *\n   * @static\n   * @template T - the type of entities expected from this request\n   * @param {IGraph} graph - the graph instance to use for making requests\n   * @param value - the existing value\n   * @param nextLink - optional nextLink to use to get the next page\n   * from the graph parameter\n   * @returns a GraphPageIterator\n   * @memberof GraphPageIterator\n   */\n  public static createFromValue<T>(graph: IGraph, value: T[], nextLink: string = null): GraphPageIterator<T> {\n    const iterator = new GraphPageIterator<T>();\n\n    // create iterator from values\n    iterator._graph = graph;\n    iterator._value = value;\n    iterator._nextLink = nextLink;\n    iterator._version = graph.version;\n\n    return iterator;\n  }\n\n  private _graph: IGraph;\n  private _nextLink: string;\n  /**\n   * Gets the next link for this request\n   *\n   * @readonly\n   * @type {string}\n   * @memberof GraphPageIterator\n   */\n  public get nextLink(): string {\n    return this._nextLink || '';\n  }\n  private _version: string;\n  private _value: T[];\n\n  /**\n   * Gets the next page for this request\n   *\n   * @returns {Promise<T[]>}\n   * @memberof GraphPageIterator\n   */\n  public async next(): Promise<T[]> {\n    if (this._nextLink) {\n      const nextResource = this._nextLink.split(this._version)[1];\n      const response = (await this._graph.api(nextResource).version(this._version).get()) as CollectionResponse<T>;\n      if (response?.value?.length) {\n        this._value = this._value.concat(response.value);\n        this._nextLink = response['@odata.nextLink'] as string;\n        return response.value;\n      }\n    }\n    return null;\n  }\n}\n"],"names":["isUploadSession","session","Array","isArray","nextExpectedRanges","clearFilesCache","__awaiter","_regeneratorRuntime","mark","_callee","cache","wrap","_context","prev","next","CacheService","getCache","schemas","fileLists","stores","clearStore","stop","getFileInvalidationTime","config","files","invalidationPeriod","defaultInvalidationPeriod","getIsFilesCacheEnabled","isEnabled","getIsFileListsCacheEnabled","validDriveItemScopes","validInsightScopes","validFileUploadScopes","getDriveItemByQuery","graph","resource","storeName","arguments","length","undefined","fileQueries","scopes","_callee2","cachedFile","response","_context2","getFileFromCache","sent","abrupt","api","middlewareOptions","prepScopes","get","putValue","file","JSON","stringify","t0","getDriveItemById","driveId","itemId","_callee3","endpoint","_context3","concat","driveFiles","getDriveItemByPath","itemPath","_callee4","_context4","getGroupDriveItemById","groupId","_callee5","_context5","groupFiles","getGroupDriveItemByPath","_callee6","_context6","getMyDriveItemById","_callee7","_context7","userFiles","getMyDriveItemByPath","_callee8","_context8","getSiteDriveItemById","siteId","_callee9","_context9","siteFiles","getSiteDriveItemByPath","_callee10","_context10","getListDriveItemById","listId","_callee11","_context11","getUserDriveItemById","userId","_callee12","_context12","getUserDriveItemByPath","_callee13","_context13","getMyInsightsDriveItemById","insightType","id","_callee14","_context14","insightFiles","getUserInsightsDriveItemById","_callee15","_context15","getIterator","top","_callee16","filesPageIterator","fileList","request","nextLink","_context16","getFileListFromCache","getFilesPageIteratorFromCache","getFilesPageIteratorFromRequest","value","map","v","getFilesIterator","_callee17","cacheStore","_context17","getDriveFilesByIdIterator","_callee18","_context18","getDriveFilesByPathIterator","_callee19","_context19","getGroupFilesByIdIterator","_callee20","_context20","getGroupFilesByPathIterator","_callee21","_context21","getFilesByIdIterator","_callee22","_context22","getFilesByPathIterator","_callee23","_context23","getSiteFilesByIdIterator","_callee24","_context24","getSiteFilesByPathIterator","_callee25","_context25","getUserFilesByIdIterator","_callee26","_context26","getUserFilesByPathIterator","_callee27","_context27","getFilesByListQueryIterator","listQuery","_callee28","_context28","getMyInsightsFiles","_callee29","insightResponse","result","_context29","insightfileLists","parse","filter","getDriveItemsByInsights","getUserInsightsFiles","_callee30","key","_context30","getFilesByQueries","_callee32","batch","_iterator","_step","_fileQuery","responses","_iterator2","_step2","fileQuery","_context32","createBatch","_createForOfIteratorHelper","s","n","done","getValue","Date","now","timeCached","push","e","f","finish","executeAll","content","t1","t2","Promise","all","_callee31","_context31","t3","_callee34","insightItems","driveItems","_iterator3","_step3","_item","driveItemId","driveItemResponses","_iterator4","_step4","item","driveItemResponse","_context34","resourceReference","err","insightItem","Boolean","_callee33","_context33","_callee35","_context35","GraphPageIterator","create","createFromValue","_callee36","_context36","store","_callee37","_context37","fetchNextAndCacheForFilesPageIterator","_callee38","matches","_context38","hasNext","exec","getDocumentThumbnail","_callee39","eTag","blob","_context39","responseType","ResponseType","RAW","status","thumbnail","ok","headers","blobToBase64","getGraphfile","_callee40","_context40","getUploadSession","conflictBehavior","_callee41","sessionOptions","_context41","post","sendFileChunk","contentLength","contentRange","_callee42","header","_context42","client","put","sendFileContent","_callee43","_context43","deleteSessionFile","_callee44","_context44","delete","_classCallCheck","_createClass","this","_value","_nextLink","nextResource","split","_version","_graph","version","_a","iterator"],"sourceRoot":""}