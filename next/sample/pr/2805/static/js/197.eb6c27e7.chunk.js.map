{"version":3,"file":"static/js/197.eb6c27e7.chunk.js","mappings":"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","sources":["../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-picker/src/components/mgt-picker/mgt-picker.ts","../../../packages/mgt-components/dist/es6/components/mgt-tasks-base/src/components/mgt-tasks-base/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-tasks-base/src/components/mgt-tasks-base/mgt-tasks-base.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/graph.todo.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/mgt-todo-css.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/strings.ts","../../../packages/mgt-components/dist/es6/components/mgt-todo/src/components/mgt-todo/mgt-todo.ts","../../../packages/mgt-components/dist/es6/utils/src/utils/isDark.ts","../../../packages/mgt-react/src/generated/get.ts"],"sourcesContent":["/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  comboboxPlaceholder: 'Select an item'\n};\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{--max-height:var(--picker-max-height, 380px);font-family:var(--default-font-family)}:host .picker{background-color:var(--picker-background-color,transparent)}:host fluent-combobox::part(selected-value)::placeholder{color:var(--picker-text-color,var(--input-filled-placeholder-rest))}:host fluent-combobox::part(selected-value):hover::placeholder{color:var(--picker-text-color-hover,var(--secondary-text-hover-color))}[dir=rtl] .picker{direction:rtl}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { MgtTemplatedComponent, mgtHtml, error } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { fluentCombobox, fluentOption } from '@fluentui/web-components';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport '../../styles/style-helper';\nimport { Entity } from '@microsoft/microsoft-graph-types';\nimport { DataChangedDetail, registerMgtGetComponent } from '../mgt-get/mgt-get';\nimport { styles } from './mgt-picker-css';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport const registerMgtPickerComponent = () => {\n  registerFluentComponents(fluentCombobox, fluentOption);\n\n  registerMgtGetComponent();\n  registerComponent('picker', MgtPicker);\n};\n\n/**\n * Web component that allows a single entity pick from a generic endpoint from Graph. Uses mgt-get.\n *\n * @fires {CustomEvent<any>} selectionChanged - Fired when an option is clicked/selected\n * @export\n * @class MgtPicker\n * @extends {MgtTemplatedComponent}\n *\n * @cssprop --picker-background-color - {Color} Picker component background color\n * @cssprop --picker-list-max-height - {String} max height for options list. Default value is 380px.\n */\nexport class MgtPicker extends MgtTemplatedComponent {\n  protected get strings() {\n    return strings;\n  }\n\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * The resource to get\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'resource',\n    type: String\n  })\n  public resource: string;\n\n  /**\n   * Api version to use for request\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'version',\n    type: String\n  })\n  public version = 'v1.0';\n\n  /**\n   * Maximum number of pages to get for the resource\n   * default = 3\n   * if <= 0, all pages will be fetched\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'max-pages',\n    type: Number\n  })\n  public maxPages = 3;\n\n  /**\n   * A placeholder for the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'placeholder',\n    type: String\n  })\n  public placeholder: string;\n\n  /**\n   * Key to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'key-name',\n    type: String\n  })\n  public keyName: string;\n\n  /**\n   * Entity to be rendered in the picker\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'entity-type',\n    type: String\n  })\n  public entityType: string;\n\n  /**\n   * The scopes to request\n   *\n   * @type {string[]}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'scopes',\n    converter: value => {\n      return value ? value.toLowerCase().split(',') : null;\n    }\n  })\n  public scopes: string[] = [];\n\n  /**\n   * Enables cache on the response from the specified resource\n   * default = false\n   *\n   * @type {boolean}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-enabled',\n    type: Boolean\n  })\n  public cacheEnabled = false;\n\n  /**\n   * Invalidation period of the cache for the responses in milliseconds\n   *\n   * @type {number}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'cache-invalidation-period',\n    type: Number\n  })\n  public cacheInvalidationPeriod = 0;\n\n  /**\n   * Sets the currently selected value for the picker\n   * Must be present as an option in the supplied data returned from the the underlying graph query\n   *\n   * @type {string}\n   * @memberof MgtPicker\n   */\n  @property({\n    attribute: 'selected-value',\n    type: String\n  })\n  public selectedValue: string;\n\n  private isRefreshing: boolean;\n\n  @state() private response: Entity[];\n\n  constructor() {\n    super();\n    this.placeholder = this.strings.comboboxPlaceholder;\n    this.entityType = null;\n    this.keyName = null;\n    this.isRefreshing = false;\n  }\n\n  /**\n   * Refresh the data\n   *\n   * @param {boolean} [hardRefresh=false]\n   * if false (default), the component will only update if the data changed\n   * if true, the data will be first cleared and reloaded completely\n   * @memberof MgtPicker\n   */\n  public refresh(hardRefresh = false) {\n    this.isRefreshing = true;\n    if (hardRefresh) {\n      this.clearState();\n    }\n    void this.requestStateUpdate(hardRefresh);\n  }\n\n  /**\n   * Clears the state of the component\n   *\n   * @protected\n   * @memberof MgtPicker\n   */\n  protected clearState(): void {\n    this.response = null;\n    this.error = null;\n  }\n\n  /**\n   * Invoked on each update to perform rendering the picker. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  public render() {\n    if (this.isLoadingState && !this.response) {\n      return this.renderTemplate('loading', null);\n    } else if (this.hasTemplate('error')) {\n      const err = this.error ? (this.error as Error) : null;\n      return this.renderTemplate('error', { error: err }, 'error');\n    } else if (this.hasTemplate('no-data')) {\n      return this.renderTemplate('no-data', null);\n    }\n\n    return this.response?.length > 0 ? this.renderPicker() : this.renderGet();\n  }\n\n  /**\n   * Render picker.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderPicker(): TemplateResult {\n    return mgtHtml`\n      <fluent-combobox\n        @keydown=${this.handleComboboxKeydown}\n        current-value=${ifDefined(this.selectedValue)}\n        part=\"picker\"\n        class=\"picker\"\n        id=\"combobox\"\n        autocomplete=\"list\"\n        placeholder=${this.placeholder}>\n        ${this.response.map(\n          item => html`\n          <fluent-option\n            value=${item.id}\n            @click=${(e: MouseEvent) => this.handleClick(e, item)}\n          >\n            ${item[this.keyName]}\n          </fluent-option>`\n        )}\n      </fluent-combobox>\n     `;\n  }\n\n  /**\n   * Renders mgt-get which does a GET request to the resource.\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtPicker\n   */\n  protected renderGet(): TemplateResult {\n    return mgtHtml`\n      <mgt-get\n        class=\"mgt-get\"\n        resource=${this.resource}\n        version=${this.version}\n        .scopes=${this.scopes}\n        max-pages=${this.maxPages}\n        ?cache-enabled=${this.cacheEnabled}\n        ?cache-invalidation-period=${this.cacheInvalidationPeriod}>\n      </mgt-get>`;\n  }\n\n  /**\n   * load state into the component.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtPicker\n   */\n  protected async loadState() {\n    if (!this.response) {\n      const parent = this.renderRoot.querySelector('.mgt-get');\n      if (parent) {\n        parent.addEventListener('dataChange', (e: CustomEvent<DataChangedDetail>): void => this.handleDataChange(e));\n      } else {\n        error('mgt-picker component requires a child mgt-get component. Something has gone horribly wrong.');\n      }\n    }\n    this.isRefreshing = false;\n    // hack to maintain method signature contract\n    await Promise.resolve();\n  }\n\n  private handleDataChange(e: CustomEvent<DataChangedDetail>): void {\n    const response = e.detail.response.value;\n    const err = e.detail.error ? e.detail.error : null;\n    this.response = response;\n    this.error = err;\n  }\n\n  private handleClick(e: MouseEvent, item: Entity) {\n    this.fireCustomEvent('selectionChanged', item, true, false, true);\n  }\n\n  /**\n   * Handles getting the fluent option item in the dropdown and fires a custom\n   * event with it when you press Enter or Backspace keys.\n   *\n   * @param {KeyboardEvent} e\n   */\n  private readonly handleComboboxKeydown = (e: KeyboardEvent) => {\n    let value: string;\n    let item: Entity;\n    const keyName: string = e.key;\n    const comboBox: HTMLElement = e.target as HTMLElement;\n    const fluentOptionEl = comboBox.querySelector('.selected');\n    if (fluentOptionEl) {\n      value = fluentOptionEl.getAttribute('value');\n    }\n\n    if ('Enter' === keyName) {\n      if (value) {\n        item = this.response.filter(res => res.id === value).pop();\n        this.fireCustomEvent('selectionChanged', item, true, false, true);\n      }\n    }\n  };\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\nexport const strings = {\n  cancelNewTaskSubtitle: 'Cancel',\n  newTaskPlaceholder: 'Add a task',\n  addTaskButtonSubtitle: 'Add',\n  removeTaskSubtitle: 'Delete Task'\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ComponentMediaQuery, Providers, ProviderState, MgtTemplatedComponent } from '@microsoft/mgt-element';\nimport { strings } from './strings';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentTextField, fluentButton, fluentCalendar } from '@fluentui/web-components';\nimport { TodoTask } from '@microsoft/microsoft-graph-types';\n/**\n * The foundation for creating task based components.\n *\n * @export\n * @class MgtTasksBase\n * @extends {MgtTemplatedComponent}\n */\nexport abstract class MgtTasksBase extends MgtTemplatedComponent {\n  /**\n   * determines if tasks are un-editable\n   *\n   * @type {boolean}\n   */\n  @property({ attribute: 'read-only', type: Boolean })\n  public readOnly: boolean;\n\n  /**\n   * sets whether the header is rendered\n   *\n   * @type {boolean}\n   * @memberof MgtTasks\n   */\n  @property({ attribute: 'hide-header', type: Boolean })\n  public hideHeader: boolean;\n\n  /**\n   * sets whether the options are rendered\n   *\n   * @type {boolean}\n   * @memberof MgtTasks\n   */\n  @property({ attribute: 'hide-options', type: Boolean })\n  public hideOptions: boolean;\n\n  /**\n   * if set, the component will only show tasks from the target list\n   *\n   * @type {string}\n   */\n  @property({ attribute: 'target-id', type: String })\n  public targetId: string;\n\n  /**\n   * if set, the component will first show tasks from this list\n   *\n   * @type {string}\n   * @memberof MgtTodo\n   */\n  @property({ attribute: 'initial-id', type: String })\n  public initialId: string;\n\n  private _previousMediaQuery: ComponentMediaQuery;\n\n  protected get strings(): Record<string, string> {\n    return strings;\n  }\n\n  constructor() {\n    super();\n\n    registerFluentComponents(fluentTextField, fluentButton, fluentCalendar);\n\n    this.clearState();\n    this._previousMediaQuery = this.mediaQuery;\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * @param {*} name\n   * @param {*} oldValue\n   * @param {*} newValue\n   * @memberof MgtTasks\n   */\n  public attributeChangedCallback(name: string, oldVal: string, newVal: string) {\n    super.attributeChangedCallback(name, oldVal, newVal);\n    switch (name) {\n      case 'target-id':\n      case 'initial-id':\n        this.clearState();\n        void this.requestStateUpdate();\n        break;\n    }\n  }\n\n  /**\n   * updates provider state\n   *\n   * @memberof MgtTasks\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  /**\n   * removes updates on provider state\n   *\n   * @memberof MgtTasks\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('resize', this.onResize);\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method must return\n   * a lit-html TemplateResult. Setting properties inside this method will *not*\n   * trigger the element to update.\n   */\n  protected render() {\n    const provider = Providers.globalProvider;\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return html``;\n    }\n\n    if (this.isLoadingState) {\n      return this.renderLoadingTask();\n    }\n\n    const picker = this.renderPicker();\n    const newTaskTemplate = this.renderNewTask();\n    const tasksTemplate = this.isLoadingState ? this.renderLoadingTask() : this.renderTasks();\n\n    return html`\n      ${picker}\n      ${newTaskTemplate}\n      <div class=\"tasks\" dir=${this.direction}>\n        ${tasksTemplate}\n      </div>\n    `;\n  }\n\n  /**\n   * Render a task in a loading state.\n   *\n   * @protected\n   * @returns\n   * @memberof MgtTodo\n   */\n  protected renderLoadingTask() {\n    return html`\n      <div class=\"task loading-task\">\n        <div class=\"task-details\">\n          <div class=\"title\"></div>\n          <div class=\"task-due\"></div>\n          <div class=\"task-delete\"></div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render the panel for creating a new task.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderNewTask(): TemplateResult;\n\n  /**\n   * Render the generic picker.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderPicker(): TemplateResult;\n\n  /**\n   * Render the list of todo tasks\n   *\n   * @protected\n   * @abstract\n   * @param {ITask[]} tasks\n   * @returns {TemplateResult}\n   * @memberof MgtTasksBase\n   */\n  protected abstract renderTasks(): TemplateResult;\n\n  /**\n   * Make a service call to create the new task object.\n   *\n   * @protected\n   * @abstract\n   * @memberof MgtTasksBase\n   */\n  protected abstract createNewTask(): Promise<void>;\n\n  /**\n   * Clear the form data from the new task panel.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected abstract clearNewTaskData(): void;\n\n  /**\n   * Clear the component state.\n   *\n   * @protected\n   * @memberof MgtTasksBase\n   */\n  protected clearState(): void {\n    this.requestUpdate();\n  }\n\n  /**\n   * Handle when a task is clicked\n   *\n   * @protected\n   * @param {Event} e\n   * @param {TodoTask} task\n   * @memberof MgtTasksBase\n   */\n  protected handleTaskClick = (task: TodoTask): void => {\n    this.fireCustomEvent('taskClick', { task });\n  };\n\n  /**\n   * Convert a date to a properly formatted string\n   *\n   * @protected\n   * @param {Date} date\n   * @returns\n   * @memberof MgtTasksBase\n   */\n  protected dateToInputValue(date: Date): string {\n    if (date) {\n      return new Date(date.getTime() - date.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n    }\n\n    return null;\n  }\n\n  private readonly onResize = () => {\n    if (this.mediaQuery !== this._previousMediaQuery) {\n      this._previousMediaQuery = this.mediaQuery;\n      this.requestUpdate();\n    }\n  };\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { TodoTaskList, TodoTask } from '@microsoft/microsoft-graph-types';\nimport { IGraph, prepScopes } from '@microsoft/mgt-element';\nimport { CollectionResponse } from '@microsoft/mgt-element';\n\nexport interface LinkedResource {\n  id: string;\n  webUrl: string;\n  applicationName: string;\n  displayName: string;\n  externalId: string;\n}\n\n/**\n * Get all todo tasks for a specific task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTask[]>}\n */\nexport const getTodoTasks = async (graph: IGraph, listId: string): Promise<TodoTask[]> => {\n  const tasks = (await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<TodoTask>;\n\n  return tasks?.value;\n};\n\n/**\n * Get a specific todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<TodoTask>}\n */\nexport const getTodoTask = async (graph: IGraph, listId: string, taskId: string): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as TodoTask;\n\n/**\n * get all todo task lists\n *\n * @export\n * @param {IGraph} graph\n * @returns {Promise<TodoTaskList[]>}\n */\nexport const getTodoTaskLists = async (graph: IGraph): Promise<TodoTaskList[]> => {\n  const taskLists = (await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as CollectionResponse<TodoTaskList>;\n\n  return taskLists?.value;\n};\n\n/**\n * Get a specific todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<TodoTaskList>}\n */\nexport const getTodoTaskList = async (graph: IGraph, listId: string): Promise<TodoTaskList> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.Read'))\n    .get()) as TodoTaskList;\n\n/**\n * Create a new todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {{ title: string; dueDateTime: { dateTime: string; timeZone: string } }} taskData\n * @returns {Promise<TodoTask>}\n */\nexport const createTodoTask = async (\n  graph: IGraph,\n  listId: string,\n  taskData: { title: string; dueDateTime?: { dateTime: string; timeZone: string } }\n): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(taskData)) as TodoTask;\n\n/**\n * Create a new todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {{ displayName: string }} list\n * @returns {Promise<TodoTaskList>}\n */\nexport const createTodoTaskList = async (graph: IGraph, listData: { displayName: string }): Promise<TodoTaskList> =>\n  (await graph\n    .api('/me/todo/lists')\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .post(listData)) as TodoTaskList;\n\n/**\n * Delete a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @returns {Promise<void>}\n */\nexport const deleteTodoTask = async (graph: IGraph, listId: string, taskId: string): Promise<void> => {\n  await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n};\n\n/**\n * Delete a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @returns {Promise<void>}\n */\nexport const deleteTodoTaskList = async (graph: IGraph, listId: string): Promise<void> => {\n  await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .delete();\n};\n\n/**\n * Update a todo task.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {string} taskId\n * @param {TodoTask} taskData\n * @returns {Promise<TodoTask>}\n */\nexport const updateTodoTask = async (\n  graph: IGraph,\n  listId: string,\n  taskId: string,\n  taskData: TodoTask\n): Promise<TodoTask> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}/tasks/${taskId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskData)) as TodoTask;\n\n/**\n * Update a todo task list.\n *\n * @export\n * @param {IGraph} graph\n * @param {string} listId\n * @param {TodoTaskList} taskListData\n * @returns {Promise<TodoTaskList>}\n */\nexport const updateTodoTaskList = async (\n  graph: IGraph,\n  listId: string,\n  taskListData: TodoTaskList\n): Promise<TodoTaskList> =>\n  (await graph\n    .api(`/me/todo/lists/${listId}`)\n    .header('Cache-Control', 'no-store')\n    .middlewareOptions(prepScopes('Tasks.ReadWrite'))\n    .patch(taskListData)) as TodoTaskList;\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}:host{display:flex;flex-direction:column;color:var(--color,var(--neutral-foreground-rest))}:host input[type=date]::-webkit-calendar-picker-indicator,:host input[type=date]::-webkit-inner-spin-button{display:none;appearance:none}:host .task-icon{font-family:FabricMDL2Icons;user-select:none}:host .task-icon.divider{vertical-align:initial;margin:0 12px;font-size:16px}:host .header{margin:var(--tasks-header-margin,0 0 12px 0);padding:var(--tasks-title-padding,0);display:flex;align-items:center;justify-content:space-between}:host .header .header__loading{max-width:90px;width:100%;height:20px;background:#f2f2f2}:host .header select{font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px);border:none;appearance:none;cursor:pointer}:host .header select::-ms-expand{display:none}:host .header .plan-title{font-size:var(--tasks-plan-title-font-size,1.1em);padding:var(--tasks-plan-title-padding,5px)}:host .header .add-bar{display:flex}:host .header .add-bar .add-bar-item{flex:1 1 auto}:host .header .new-task-due{display:flex}:host .header .new-task-due input{flex:1 1 auto;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .header .title-cont{flex:1 1 auto;display:flex;align-items:center;height:var(--tasks-new-button-height,34px)}:host .header .new-task-button{flex:0 0 auto;display:flex;justify-content:center;align-items:center;width:var(--tasks-new-button-width,auto);height:var(--tasks-new-button-height,32px);border-radius:2px;padding:0 20px;background:var(--tasks-new-button-background,#0078d4);border:var(--tasks-new-button-border,solid 1px transparent);color:var(--tasks-new-button-color,#fff);user-select:none;cursor:pointer}:host .header .new-task-button span{font-size:14px;font-weight:600;letter-spacing:.1px;line-height:14px}:host .header .new-task-button .task-icon{margin-right:8px}:host .header .new-task-button.hidden{visibility:hidden}:host .header .new-task-button:hover{background:var(--tasks-new-button-hover-background,#106ebe)}:host .header .new-task-button:active{background:var(--tasks-new-button-active-background,#005a9e)}:host .task{position:relative;margin:var(--task-margin,0 0 0 0);padding:var(--task-padding,0 0 0 0);background-color:var(--task-background-color,var(--neutral-layer-floating));border:var(--task-border,var(--neutral-stroke-input-active));border-radius:8px}:host .task .task-content{display:flex}:host .task .task-content .divider{position:absolute;height:2px;left:0;right:0;bottom:0;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task .task-content .task-details-container{flex:1;display:grid;grid-template-columns:auto 1fr;-ms-grid-columns:auto 1fr;grid-template-rows:auto auto auto auto;-ms-grid-rows:auto auto auto auto;justify-content:space-between;align-items:flex-start;color:var(--task-detail-color,var(--neutral-foreground-hint));font-size:12px;font-weight:600;white-space:normal;margin-bottom:12px}:host .task .task-content .task-details-container .task-detail{width:100%;height:100%;margin:4px 24px 6px 0;display:flex;justify-content:flex-start;align-items:center}:host .task .task-content .task-details-container .task-title{color:var(--task-color,var(--neutral-foreground-rest));font-size:14px;font-weight:600;grid-row:1;grid-column:1/3;grid-column:1;-ms-grid-column-span:2;margin:22px 0 4px}:host .task .task-content .task-details-container .task-group{min-height:24px;grid-row:2;grid-column:1}:host .task .task-content .task-details-container .task-bucket{min-height:24px;grid-row:2;grid-column:2}:host .task .task-content .task-details-container .task-due{justify-content:flex-end;align-items:flex-start;grid-row:4;grid-column:1/3;grid-column:1;-ms-grid-column-span:2}:host .task .task-content .task-details-container.tablet{grid-template-columns:1fr .5fr 1fr .5fr;-ms-grid-columns:1fr .5fr 1fr .5fr;grid-template-rows:auto auto;-ms-grid-rows:auto auto}:host .task .task-content .task-details-container.tablet.no-plan{grid-template-columns:0 1fr 1fr 1fr;-ms-grid-columns:0 1fr 1fr 1fr}:host .task .task-content .task-details-container.tablet .task-detail{margin:4px 24px 6px 0}:host .task .task-content .task-details-container.tablet .task-title{grid-row:1;grid-column:1/5;grid-column:1;-ms-grid-column-span:4}:host .task .task-content .task-details-container.tablet .task-group{grid-row:2;grid-column:1}:host .task .task-content .task-details-container.tablet .task-bucket{grid-row:2;grid-column:2}:host .task .task-content .task-details-container.tablet .task-assignee{grid-row:2;grid-column:3}:host .task .task-content .task-details-container.tablet .task-due{justify-content:flex-start;align-items:center;grid-row:2;grid-column:4}:host .task .task-content .task-details-container.desktop{grid-template-columns:2fr 1fr .5fr 1fr .5fr;-ms-grid-columns:2fr 1fr .5fr 1fr .5fr;grid-template-rows:auto;-ms-grid-rows:auto;margin:0}:host .task .task-content .task-details-container.desktop.no-plan{grid-template-columns:2fr 0 1fr 1fr 1fr;-ms-grid-columns:2fr 0 1fr 1fr 1fr}:host .task .task-content .task-details-container.desktop .task-detail{margin:0 24px 0 0}:host .task .task-content .task-details-container.desktop .task-title{padding:0;grid-row:1;grid-column:1}:host .task .task-content .task-details-container.desktop .task-group{min-height:61px;grid-row:1;grid-column:2}:host .task .task-content .task-details-container.desktop .task-bucket{grid-row:1;grid-column:3}:host .task .task-content .task-details-container.desktop .task-assignee{grid-row:1;grid-column:4}:host .task .task-content .task-details-container.desktop .task-due{justify-content:flex-start;align-items:center;grid-row:1;grid-column:5}:host .task .task-content .task-details-container svg{vertical-align:middle;margin-right:4px}:host .task .task-content .task-details-container svg path{fill:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-content .task-details-container select,:host .task .task-content .task-details-container span{vertical-align:middle;color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-content .task-details-container .task-icon{color:#797775;margin-right:8px}:host .task .task-content .task-details-container .people{color:var(--task-detail-color,var(--neutral-foreground-hint));font-size:16px}:host .task .task-content .task-details-container .person{display:inline-block}:host .task .task-content .task-details-container .picker{background-color:var(--task-background-color,var(--neutral-layer-floating));background-clip:padding-box;width:var(--mgt-flyout-set-width,350px);color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-content .task-details-container .picker .people-picker{--separator-margin:0px 10px 0px 10px}:host .task .task-content .task-details-container input,:host .task .task-content .task-details-container select{color:var(--task-detail-color,var(--neutral-foreground-hint));font-size:.9em;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task .task-check-container{font-family:FabricMDL2Icons;border-radius:50%;color:#fff;cursor:pointer;display:flex;align-items:var(--task-icon-alignment,flex-start);margin:21px 10px 20px 20px;user-select:none}:host .task .task-check-container.complete .task-check{background-color:var(--task-icon-background-completed,#00ad56);border:var(--task-icon-border-completed,solid 1px #fff);color:var(--task-icon-color-completed,#fff)}:host .task .task-check-container.complete .task-content .task-details-container .task-title{text-decoration:line-through;color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task .task-check-container .task-check{font-family:FabricMDL2Icons;font-size:12px;width:18px;height:18px;border-radius:var(--task-icon-border-radius,50%);border:var(--task-icon-border,solid 1px #797775);color:var(--task-color,var(--neutral-foreground-rest));display:flex;justify-content:center;align-items:center;background-color:var(--task-icon-background,transparent);user-select:none}:host .task .task-check-container .task-check.loading .task-check-content{animation:rotate-icon 2s infinite linear}:host .task .task-options{cursor:pointer;user-select:none;margin:16px 8px 0 0}:host .task.read-only .task-check-container{cursor:default}:host .task.complete{background:var(--task-complete-background,var(--neutral-layer-1));border:var(--task-complete-border,2px dotted inherit)}:host .task.complete .task-content .task-details-container .task-title{text-decoration:line-through;color:var(--task-detail-color,var(--neutral-foreground-hint))}:host .task.new-task{margin:var(--task-new-margin,var(--task-margin,0 0 24px 0));display:flex;flex-direction:row}:host .task.new-task .self-assign{display:none}:host .task.new-task .assign-to{border:0;background:0 0}:host .task.new-task .fake-check-box{width:15px;height:15px;cursor:pointer;margin:0 5px}:host .task.new-task .fake-check-box::after{font-family:FabricMDL2Icons;content:\"uE739\"}:host .task.new-task .fake-check-box~:checked{font-family:FabricMDL2Icons;content:\"uE73A\"}:host .task.new-task .task-content{flex:1 1 auto;align-content:center;vertical-align:middle;margin:0 0 0 12px}:host .task.new-task .task-content .task-details-container{display:flex;flex-direction:column;align-items:stretch;margin:0}:host .task.new-task .task-content .task-details-container .task-title{display:flex;height:32px;padding:2px}:host .task.new-task .task-content .task-details-container .task-title input{flex:1;margin:var(--task-new-input-margin,0 24px 0 16px);padding:var(--task-new-input-padding,6px);font-size:var(--task-new-input-font-size,14px);font-weight:600;border:var(--task-new-border,none);border-bottom:1px solid #e1dfdd;outline:0;border-radius:0;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task.new-task .task-content .task-details-container .task-title input:hover{border-bottom:1px solid #106ebe}:host .task.new-task .task-content .task-details-container .task-title input:active{border-bottom:1px solid #005a9e}:host .task.new-task .task-content .task-details-container .task-title input:focus{border-bottom:1px solid #0078d4}:host .task.new-task .task-content .task-details-container .task-details{display:flex;justify-content:stretch;align-items:center;flex-wrap:wrap;margin:14px 0 14px 4px}:host .task.new-task .task-content .task-details-container .task-details .new-task-group{margin:8px 16px}:host .task.new-task .task-content .task-details-container .task-details .new-task-bucket{margin:8px 16px}:host .task.new-task .task-content .task-details-container .task-details .new-task-due{margin:8px 16px}:host .task.new-task .task-content .task-details-container .task-details .new-task-assignee{margin:8px 16px;min-width:80px}:host .task.new-task .task-content .task-details-container .task-details .task-people label{display:flex;align-content:center;align-items:center}:host .task.new-task .task-content .task-details-container .task-details input,:host .task.new-task .task-content .task-details-container .task-details select{font-size:12px;font-weight:600;border:var(--task-new-select-border,none);border-bottom:1px solid #e1dfdd}:host .task.new-task .task-content .task-details-container .task-details input:hover,:host .task.new-task .task-content .task-details-container .task-details select:hover{border-bottom:1px solid #106ebe}:host .task.new-task .task-content .task-details-container .task-details input:active,:host .task.new-task .task-content .task-details-container .task-details select:active{border-bottom:1px solid #005a9e}:host .task.new-task .task-content .task-details-container .task-details input:focus,:host .task.new-task .task-content .task-details-container .task-details select:focus{border-bottom:1px solid #0078d4}:host .task.new-task .task-add-button-container{margin-right:28px}:host .task.new-task .task-add-button-container .task-add,:host .task.new-task .task-add-button-container .task-cancel{justify-content:center;align-items:center;cursor:pointer;flex:0 0 auto;display:flex;width:var(--tasks-new-button-width,100px);height:var(--tasks-new-button-height,32px);border-radius:4px;border:var(--tasks-new-button-border,solid 1px #e5e5e5);font-size:14px;line-height:20px}:host .task.new-task .task-add-button-container .task-add{color:#fff;background:var(--task-new-add-button-background,#0078d4);margin:22px 0 12px auto}:host .task.new-task .task-add-button-container .task-cancel{color:var(--task-new-cancel-button-color,var(--neutral-foreground-rest))}:host .task.new-task .task-add-button-container.disabled .task-add{color:var(--task-new-cancel-button-color,var(--neutral-foreground-rest));background:var(--task-new-add-button-disabled-background,#fff);cursor:default}@keyframes rotate-icon{from{transform:rotate(0)}to{transform:rotate(360deg)}}[dir=rtl] .arrow-options{--arrow-options-left:auto}[dir=rtl] .dot-options{--dot-options-translatex:translateX(60px)}[dir=rtl] .task-details{margin-right:14px!important}[dir=rtl] .task-icon{margin-left:8px}[dir=rtl] .task-detail svg{margin-left:4px}@media (forced-colors:active) and (prefers-color-scheme:dark){:host svg{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#fff!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}@media (forced-colors:active) and (prefers-color-scheme:light){:host svg{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}:host svg path{fill:#000!important;fill-rule:nonzero!important;clip-rule:nonzero!important}}:host{border-radius:8px;width:100%}:host .task,:host.loading-task{margin-block:1px;box-shadow:var(--task-box-shadow,var(--elevation-shadow-card-active));width:100%;background-color:var(--task-background-color,var(--neutral-layer-floating))}:host .task.new-task,:host.loading-task.new-task{margin:14px 0 1px;box-shadow:var(--task-box-shadow,var(--elevation-shadow-card-active))}:host .task.complete,:host.loading-task.complete{text-decoration:line-through;border:1px solid var(--task-border-completed,var(--neutral-stroke-input-active));background:var(--task-complete-background,var(--neutral-layer-1))}:host .task.read-only,:host.loading-task.read-only{opacity:1}:host .task:hover,:host.loading-task:hover{background-color:var(--task-background-color-hover,var(--neutral-fill-hover));border-radius:8px}:host .task .task-details,:host.loading-task .task-details{box-sizing:border-box;display:flex;flex-direction:row;align-items:center;padding:2px;line-height:24px;border-radius:4px}:host .task .task-details .task>div,:host.loading-task .task-details .task>div{display:flex;align-items:center;width:200px}:host .task .task-details .title,:host.loading-task .task-details .title{flex-grow:1}:host .task .task-details .task-delete,:host.loading-task .task-details .task-delete{display:flex}:host .task .task-details .task-due,:host.loading-task .task-details .task-due{min-width:120px;margin-inline-end:12px;height:32px;text-decoration:inherit;display:flex}:host .task .task-details .task-due .task-calendar,:host.loading-task .task-details .task-due .task-calendar{display:flex;margin-top:5px;margin-inline-end:10px}:host .task .task-details .task-due .task-calendar svg,:host.loading-task .task-details .task-due .task-calendar svg{fill:var(--task-color,var(--neutral-foreground-rest))}:host .task .task-details .task-due .task-due-date,:host.loading-task .task-details .task-due .task-due-date{display:flex;margin-top:5px}:host fluent-text-field::part(end),:host fluent-text-field::part(start){margin-inline:unset}:host fluent-text-field::part(control){padding:0;cursor:pointer}:host fluent-text-field::part(root){background:0 0}:host fluent-text-field.new-task{width:100%;height:34px}:host fluent-text-field.new-task div.start .add-icon{display:flex;margin-inline:10px}:host fluent-text-field.new-task div:nth-child(2){display:flex;align-items:center}:host fluent-text-field.new-task div:nth-child(2) .calendar{display:flex;align-items:center}:host fluent-text-field.new-task div:nth-child(2) .calendar svg{fill:var(--task-color,var(--neutral-foreground-rest))}:host fluent-text-field.new-task div:nth-child(2) .calendar .date{margin-inline-start:10px;color:var(--task-color,var(--neutral-foreground-rest));width:auto;cursor:pointer}:host fluent-text-field.new-task div:nth-child(2) .calendar .date::after{border-bottom:none}:host fluent-text-field.new-task div:nth-child(2) .calendar .date.dark::part(control){color-scheme:dark}:host fluent-text-field.new-task div:nth-child(2) .calendar input{flex:1;border:none;border-bottom:1px solid var(--task-color,var(--neutral-foreground-rest));outline:0;border-radius:0}:host fluent-text-field.new-task div:nth-child(2) .calendar input:hover{border-bottom:1px solid var(--task-date-input-hover-color,var(--neutral-layer-1))}:host fluent-text-field.new-task div:nth-child(2) .calendar input:active{border-bottom:1px solid var(--task-date-input-active-color,var(--accent-fill-rest))}:host fluent-text-field.new-task div:nth-child(2) .calendar input:focus{border-bottom:1px solid var(--task-date-input-active-color,var(--accent-fill-rest))}:host fluent-button.task-add-icon.neutral,:host fluent-button.task-cancel-icon.neutral,:host fluent-button.task-delete.neutral{fill:var(--task-color,var(--neutral-foreground-rest))}:host fluent-button.task-add-icon.neutral::part(control),:host fluent-button.task-cancel-icon.neutral::part(control),:host fluent-button.task-delete.neutral::part(control){border:none;background:inherit}:host fluent-button.task-add-icon.neutral::part(control) svg,:host fluent-button.task-cancel-icon.neutral::part(control) svg,:host fluent-button.task-delete.neutral::part(control) svg{fill:var(--task-color,var(--neutral-foreground-rest))}:host fluent-checkbox.task.complete div>svg .filled{display:block}:host fluent-checkbox.task.complete div>svg .regular{display:none}:host fluent-checkbox.task.complete div>svg path{fill:var(--task-radio-background-color,var(--accent-fill-rest))}:host fluent-checkbox.task div>svg .filled{display:none}:host fluent-checkbox.task div>svg .regular{display:block}:host fluent-checkbox.task div>svg path{fill:var(--task-background-color,var(--neutral-layer-floating))}:host fluent-checkbox::part(control){margin-inline-start:10px;background:0 0;border-radius:50%}:host fluent-checkbox::part(label){margin-inline-end:unset;width:100%}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\n/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nexport const strings = {\n  cancelNewTaskSubtitle: 'Cancel',\n  newTaskPlaceholder: 'Add a task',\n  newTaskLabel: 'New Task Input',\n  addTaskButtonSubtitle: 'Add',\n  deleteTaskLabel: 'Delete Task',\n  dueDate: 'Due date',\n  newTaskDateInputLabel: 'New Task Date Input',\n  newTaskNameInputLabel: 'New Task Name Input',\n  cancelAddingTask: 'Cancel adding a new task'\n};\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html, nothing, TemplateResult } from 'lit';\nimport { state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { IGraph, mgtHtml } from '@microsoft/mgt-element';\nimport { Providers, ProviderState } from '@microsoft/mgt-element';\nimport { getDateString } from '../../utils/Utils';\nimport { getSvg, SvgIcon } from '../../utils/SvgHelper';\nimport '../mgt-person/mgt-person';\nimport { MgtTasksBase } from '../mgt-tasks-base/mgt-tasks-base';\nimport '../sub-components/mgt-arrow-options/mgt-arrow-options';\nimport '../sub-components/mgt-dot-options/mgt-dot-options';\nimport {\n  createTodoTask,\n  deleteTodoTask,\n  getTodoTaskList,\n  getTodoTaskLists,\n  getTodoTasks,\n  updateTodoTask\n} from './graph.todo';\nimport { styles } from './mgt-todo-css';\nimport { strings } from './strings';\nimport { registerFluentComponents } from '../../utils/FluentComponents';\nimport { fluentCheckbox, fluentRadioGroup, fluentButton } from '@fluentui/web-components';\nimport { isElementDark } from '../../utils/isDark';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { TodoTaskList, TodoTask, TaskStatus } from '@microsoft/microsoft-graph-types';\nimport { registerComponent } from '@microsoft/mgt-element';\nimport { registerMgtPickerComponent } from '../mgt-picker/mgt-picker';\n\n/**\n * Filter function\n */\nexport type TodoFilter = (task: TodoTask) => boolean;\n\nexport const registerMgtTodoComponent = () => {\n  registerFluentComponents(fluentCheckbox, fluentRadioGroup, fluentButton);\n  registerMgtPickerComponent();\n  registerComponent('todo', MgtTodo);\n};\n\n/**\n * component enables the user to view, add, remove, complete, or edit todo tasks. It works with tasks in Microsoft Planner or Microsoft To-Do.\n *\n * @export\n * @class MgtTodo\n * @extends {MgtTasksBase}\n *\n * @cssprop --task-color - {Color} - Task text color\n * @cssprop --task-background-color - {Color} - Task background color\n * @cssprop --task-complete-background - {Color} - Task background color when completed\n * @cssprop --task-date-input-active-color - {Color} - Task date input active color\n * @cssprop --task-date-input-hover-color - {Color} - Task date input hover color\n * @cssprop --task-background-color-hover - {Color} - Task background when hovered\n * @cssprop --task-box-shadow - {Color} - Task box shadow color\n * @cssprop --task-border-completed - {Color} - Task border color when completed\n * @cssprop --task-radio-background-color - {Color} - Task radio background color\n */\nexport class MgtTodo extends MgtTasksBase {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  public static get styles() {\n    return styles;\n  }\n  /**\n   * Strings for localization\n   *\n   * @readonly\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected get strings() {\n    return strings;\n  }\n\n  /**\n   * Optional filter function when rendering tasks\n   *\n   * @type {TodoFilter}\n   * @memberof MgtTodo\n   */\n  public taskFilter: TodoFilter;\n\n  /**\n   * Get the scopes required for todo\n   *\n   * @static\n   * @return {*}  {string[]}\n   * @memberof MgtTodo\n   */\n  public static get requiredScopes(): string[] {\n    return ['tasks.read', 'tasks.readwrite'];\n  }\n  private _tasks: TodoTask[];\n\n  private _isLoadingTasks: boolean;\n  private _loadingTasks: string[];\n  private _newTaskDueDate: Date;\n  @state() private _newTaskName: string;\n  private _isNewTaskBeingAdded: boolean;\n  private _graph: IGraph;\n  @state() private currentList: TodoTaskList;\n  @state() private _isDarkMode = false;\n\n  constructor() {\n    super();\n    this._graph = null;\n    this._newTaskDueDate = null;\n    this._tasks = [];\n    this._loadingTasks = [];\n    this._isLoadingTasks = false;\n    this.addEventListener('selectionChanged', this.handleSelectionChanged);\n  }\n\n  /**\n   * updates provider state\n   *\n   * @memberof MgtTasks\n   */\n  public connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener('darkmodechanged', this.onThemeChanged);\n    // invoked to ensure we have the correct initial value for _isDarkMode\n    this.onThemeChanged();\n  }\n\n  /**\n   * removes updates on provider state\n   *\n   * @memberof MgtTasks\n   */\n  public disconnectedCallback() {\n    window.removeEventListener('darkmodechanged', this.onThemeChanged);\n    super.disconnectedCallback();\n  }\n\n  private readonly onThemeChanged = () => {\n    this._isDarkMode = isElementDark(this);\n  };\n\n  /**\n   * Render the list of todo tasks\n   */\n  protected renderTasks(): TemplateResult {\n    if (this._isLoadingTasks) {\n      return this.renderLoadingTask();\n    }\n\n    let tasks = this._tasks;\n    if (tasks && this.taskFilter) {\n      tasks = tasks.filter(task => this.taskFilter(task));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const completedTasks = tasks.filter(task => task.status === 'completed');\n\n    const taskTemplates = repeat(\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      tasks.filter(task => task.status !== 'completed'),\n      task => task.id,\n      task => this.renderTask(task)\n    );\n\n    const completedTaskTemplates = repeat(\n      completedTasks.sort((a, b) => {\n        return new Date(a.lastModifiedDateTime).getTime() - new Date(b.lastModifiedDateTime).getTime();\n      }),\n      task => task.id,\n      task => this.renderCompletedTask(task)\n    );\n    return html`\n      ${taskTemplates}\n      ${completedTaskTemplates}\n    `;\n  }\n\n  /**\n   * Render the generic picker or the task list displayName.\n   *\n   */\n  protected renderPicker() {\n    if (this.targetId) {\n      return html`<p>${this.currentList?.displayName}</p>`;\n    } else {\n      return mgtHtml`\n        <mgt-picker\n          resource=\"me/todo/lists\"\n          scopes=\"tasks.read, tasks.readwrite\"\n          key-name=\"displayName\"\n          selected-value=\"${ifDefined(this.currentList?.displayName)}\"\n          placeholder=\"Select a task list\">\n        </mgt-picker>`;\n    }\n  }\n\n  /**\n   * Create a new todo task and add it to the list\n   *\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected addTask = async (): Promise<void> => {\n    if (this._isNewTaskBeingAdded || !this._newTaskName) {\n      return;\n    }\n\n    this._isNewTaskBeingAdded = true;\n    this.requestUpdate();\n\n    try {\n      await this.createNewTask();\n    } finally {\n      this.clearNewTaskData();\n      this._isNewTaskBeingAdded = false;\n      this.requestUpdate();\n    }\n  };\n\n  /**\n   * Render the panel for creating a new task\n   *\n   * @protected\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderNewTask = (): TemplateResult => {\n    const addIcon = this._newTaskName\n      ? html`\n        <fluent-checkbox\n          class=\"task-add-icon\"\n          @click=\"${this.addTask}\">\n        </fluent-checkbox>\n      `\n      : html`\n        <span class=\"add-icon\">${getSvg(SvgIcon.Add)}</span>\n      `;\n\n    const cancelIcon = html`\n      <fluent-button\n        aria-label=${this.strings.cancelAddingTask}\n        class=\"task-cancel-icon\" \n        @click=\"${this.clearNewTaskData}\"\n      >\n        ${getSvg(SvgIcon.Cancel)}\n      </fluent-button>\n    `;\n    const dateClass = { dark: this._isDarkMode, date: true };\n    const calendarTemplate = html`\n      <fluent-text-field\n        autocomplete=\"off\"\n        type=\"date\"\n        id=\"new-taskDate-input\"\n        class=\"${classMap(dateClass)}\"\n        aria-label=\"${this.strings.newTaskDateInputLabel}\"\n        .value=\"${this.dateToInputValue(this._newTaskDueDate)}\"\n        @change=\"${this.handleDateChange}\"\n      >\n      </fluent-text-field>\n    `;\n\n    const newTaskDetails = this.readOnly\n      ? nothing\n      : html`\n      <fluent-text-field\n        autocomplete=\"off\"\n        appearance=\"outline\"\n        class=\"new-task\"\n        id=\"new-task-name-input\"\n        aria-label=\"${this.strings.newTaskLabel}\"\n        .value=${this._newTaskName}\n        placeholder=\"${this.strings.newTaskPlaceholder}\"\n        @keydown=\"${this.handleKeyDown}\"\n        @input=\"${this.handleInput}\"\n      >\n        <div slot=\"start\" class=\"start\">${addIcon}</div>\n        ${\n          this._newTaskName\n            ? html`\n              <div slot=\"end\" class=\"end\">\n                <span class=\"calendar\">${calendarTemplate}</span>\n                ${cancelIcon}\n              </div> `\n            : html``\n        }\n      </fluent-text-field>\n    `;\n    return html`\n      ${\n        this.currentList\n          ? html`\n            <div dir=${this.direction} class=\"task new-task incomplete\">\n              ${newTaskDetails}\n            </div>\n        `\n          : html``\n      }  \n     `;\n  };\n\n  /**\n   * Handle a change in taskList.\n   *\n   * @protected\n   * @param {CustomEvent} e\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n\n  protected handleSelectionChanged = (e: CustomEvent<TodoTaskList>) => {\n    this.currentList = e.detail;\n    void this.loadTasks(this.currentList);\n  };\n\n  /**\n   * Render task details.\n   *\n   * @protected\n   * @param {TodoTask} task\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderTaskDetails = (task: TodoTask) => {\n    const context = { task, list: this.currentList };\n\n    if (this.hasTemplate('task')) {\n      return this.renderTemplate('task', context, task.id);\n    }\n\n    let taskDetailsTemplate = null;\n\n    const taskDueTemplate = task.dueDateTime\n      ? html`\n        <span class=\"task-calendar\">${getSvg(SvgIcon.Calendar)}</span>\n        <span class=\"task-due-date\">${getDateString(new Date(task.dueDateTime.dateTime))}</span>\n      `\n      : html``;\n\n    const taskDeleteTemplate = this.readOnly\n      ? html``\n      : html`\n        <fluent-button class=\"task-delete\"\n          @click=\"${() => this.removeTask(task.id)}\"\n          aria-label=\"${this.strings.deleteTaskLabel}\"\n        >\n          ${getSvg(SvgIcon.Delete)}\n        </fluent-button>\n      `;\n\n    if (this.hasTemplate('task-details')) {\n      taskDetailsTemplate = this.renderTemplate('task-details', context, `task-details-${task.id}`);\n    } else {\n      taskDetailsTemplate = html`\n      <div class=\"task-details\">\n        <div class=\"title\">${task.title}</div>\n        <div class=\"task-due\">${taskDueTemplate}</div>\n        ${taskDeleteTemplate}\n      </div>\n      `;\n    }\n\n    return html`${taskDetailsTemplate}`;\n  };\n\n  /**\n   * Render a task in the list.\n   *\n   * @protected\n   * @param {TodoTask} task\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderTask = (task: TodoTask) => {\n    const taskClasses = classMap({\n      'read-only': this.readOnly,\n      task: true\n    });\n\n    return html`\n      <fluent-checkbox \n        id=${task.id}\n        class=${taskClasses}\n        ?disabled=${this.readOnly}\n        @click=\"${() => this.handleTaskCheckClick(task)}\"\n      >\n        ${this.renderTaskDetails(task)}\n      </fluent-checkbox>\n    `;\n  };\n\n  /**\n   * Render a completed task in the list.\n   *\n   * @protected\n   * @param {TodoTask} task\n   * @returns {TemplateResult}\n   * @memberof MgtTodo\n   */\n  protected renderCompletedTask = (task: TodoTask) => {\n    const taskClasses = classMap({\n      complete: true,\n      'read-only': this.readOnly,\n      task: true\n    });\n\n    const taskCheckContent = html`${getSvg(SvgIcon.CheckMark)}`;\n\n    return html`\n      <fluent-checkbox \n        id=${task.id} \n        class=${taskClasses} \n        checked \n        ?disabled=${this.readOnly} \n        @click=\"${() => this.handleTaskCheckClick(task)}\"\n      >\n        <div slot=\"checked-indicator\">\n          ${taskCheckContent}\n        </div>\n        ${this.renderTaskDetails(task)}\n      </fluent-checkbox>\n    `;\n  };\n\n  /**\n   * loads tasks from dataSource\n   *\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected loadState = async (): Promise<void> => {\n    const provider = Providers.globalProvider;\n    if (!provider || provider.state !== ProviderState.SignedIn) {\n      return;\n    }\n\n    this._isLoadingTasks = true;\n    if (!this._graph) {\n      const graph = provider.graph.forComponent(this);\n      this._graph = graph;\n    }\n\n    if (!this.currentList && !this.initialId) {\n      const lists = await getTodoTaskLists(this._graph);\n      const defaultList = lists?.find(l => l.wellknownListName === 'defaultList');\n      if (defaultList) await this.loadTasks(defaultList);\n    }\n\n    if (this.targetId) {\n      // Call to get the displayName of the list\n      this.currentList = await getTodoTaskList(this._graph, this.targetId);\n      this._tasks = await getTodoTasks(this._graph, this.targetId);\n    } else if (this.initialId) {\n      // Call to get the displayName of the list\n      this.currentList = await getTodoTaskList(this._graph, this.initialId);\n      this._tasks = await getTodoTasks(this._graph, this.initialId);\n    }\n    this._isLoadingTasks = false;\n  };\n\n  /**\n   * Send a request the Graph to create a new todo task item\n   *\n   * @protected\n   * @returns {Promise<void>}\n   * @memberof MgtTodo\n   */\n  protected async createNewTask(): Promise<void> {\n    const listId = this.currentList.id;\n    const taskData = {\n      title: this._newTaskName\n    };\n\n    if (this._newTaskDueDate) {\n      // eslint-disable-next-line @typescript-eslint/dot-notation\n      taskData['dueDateTime'] = {\n        dateTime: new Date(this._newTaskDueDate).toLocaleDateString(),\n        timeZone: 'UTC'\n      };\n    }\n\n    const task = await createTodoTask(this._graph, listId, taskData);\n    this._tasks.unshift(task);\n  }\n\n  /**\n   * Clear out the new task metadata input fields\n   *\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected clearNewTaskData = (): void => {\n    this._newTaskDueDate = null;\n    this._newTaskName = '';\n  };\n\n  /**\n   * Clear the state of the component\n   *\n   * @protected\n   * @memberof MgtTodo\n   */\n  protected clearState = (): void => {\n    super.clearState();\n    this.currentList = null;\n    this._tasks = [];\n    this._loadingTasks = [];\n    this._isLoadingTasks = false;\n  };\n\n  private readonly loadTasks = async (list: TodoTaskList): Promise<void> => {\n    this._isLoadingTasks = true;\n    this.currentList = list;\n\n    this._tasks = await getTodoTasks(this._graph, list.id);\n\n    this._isLoadingTasks = false;\n    this.requestUpdate();\n  };\n\n  private readonly updateTaskStatus = async (task: TodoTask, taskStatus: TaskStatus): Promise<void> => {\n    this._loadingTasks = [...this._loadingTasks, task.id];\n    this.requestUpdate();\n\n    // Change the task status\n    task.status = taskStatus;\n\n    // Send update request\n    const listId = this.currentList.id;\n    task = await updateTodoTask(this._graph, listId, task.id, task);\n\n    const taskIndex = this._tasks.findIndex(t => t.id === task.id);\n    this._tasks[taskIndex] = task;\n\n    this._loadingTasks = this._loadingTasks.filter(id => id !== task.id);\n    this.requestUpdate();\n  };\n\n  private readonly removeTask = async (taskId: string): Promise<void> => {\n    this._tasks = this._tasks.filter(t => t.id !== taskId);\n    this.requestUpdate();\n\n    const listId = this.currentList.id;\n    await deleteTodoTask(this._graph, listId, taskId);\n\n    this._tasks = this._tasks.filter(t => t.id !== taskId);\n  };\n\n  private handleTaskCheckClick(task: TodoTask) {\n    this.handleTaskClick(task);\n    if (!this.readOnly) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (task.status === 'completed') {\n        void this.updateTaskStatus(task, 'notStarted');\n      } else {\n        void this.updateTaskStatus(task, 'completed');\n      }\n    }\n  }\n\n  private readonly handleInput = (e: MouseEvent) => {\n    if ((e.target as HTMLInputElement).id === 'new-task-name-input') {\n      this._newTaskName = (e.target as HTMLInputElement).value;\n    }\n  };\n\n  private readonly handleKeyDown = async (e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      await this.addTask();\n    }\n  };\n\n  private readonly handleDateChange = (e: Event) => {\n    const value = (e.target as HTMLInputElement).value;\n    if (value) {\n      this._newTaskDueDate = new Date(value + 'T17:00');\n    } else {\n      this._newTaskDueDate = null;\n    }\n  };\n}\n","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { SwatchRGB, baseLayerLuminance, isDark } from '@fluentui/web-components';\n\n/**\n * Utility to help quickly determine if an element is dark based fluentui theme\n *\n * @param element HTMLElement to check if dark\n * @returns true if the element is dark\n */\nexport const isElementDark = (element: HTMLElement) => {\n  const luminance = baseLayerLuminance.getValueFor(element);\n  return isDark(SwatchRGB.create(luminance, luminance, luminance));\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n"],"names":["strings","comboboxPlaceholder","styles","css","_templateObject","_taggedTemplateLiteral","registerMgtPickerComponent","registerFluentComponents","fluentCombobox","fluentOption","registerMgtGetComponent","registerComponent","MgtPicker","_MgtTemplatedComponen","_inherits","_super","_createSuper","_this","_classCallCheck","call","version","maxPages","scopes","cacheEnabled","cacheInvalidationPeriod","handleComboboxKeydown","e","value","item","keyName","key","fluentOptionEl","target","querySelector","getAttribute","response","filter","res","id","pop","fireCustomEvent","placeholder","entityType","isRefreshing","_createClass","get","hardRefresh","arguments","length","undefined","this","clearState","requestStateUpdate","error","isLoadingState","renderTemplate","hasTemplate","err","_a","renderPicker","renderGet","_this2","mgtHtml","ifDefined","selectedValue","map","html","_templateObject2","handleClick","_templateObject3","resource","parent","renderRoot","addEventListener","_this3","handleDataChange","_context","next","Promise","resolve","stop","_callee","detail","MgtTemplatedComponent","__decorate","property","attribute","type","String","Number","converter","toLowerCase","split","Boolean","state","cancelNewTaskSubtitle","newTaskPlaceholder","addTaskButtonSubtitle","removeTaskSubtitle","MgtTasksBase","handleTaskClick","task","onResize","mediaQuery","_previousMediaQuery","requestUpdate","fluentTextField","fluentButton","fluentCalendar","name","oldVal","newVal","_get","_getPrototypeOf","prototype","window","removeEventListener","provider","Providers","globalProvider","ProviderState","SignedIn","renderLoadingTask","picker","newTaskTemplate","renderNewTask","tasksTemplate","renderTasks","direction","date","Date","getTime","getTimezoneOffset","toISOString","getTodoTasks","graph","listId","__awaiter","_regeneratorRuntime","mark","tasks","wrap","prev","api","concat","header","middlewareOptions","prepScopes","sent","abrupt","getTodoTaskLists","_callee3","taskLists","_context3","getTodoTaskList","_callee4","_context4","createTodoTask","taskData","_callee5","_context5","post","deleteTodoTask","taskId","_callee7","_context7","delete","updateTodoTask","_callee9","_context9","patch","newTaskLabel","deleteTaskLabel","dueDate","newTaskDateInputLabel","newTaskNameInputLabel","cancelAddingTask","registerMgtTodoComponent","fluentCheckbox","fluentRadioGroup","MgtTodo","_MgtTasksBase","_thisSuper","_isDarkMode","onThemeChanged","isElementDark","_assertThisInitialized","addTask","_isNewTaskBeingAdded","_newTaskName","createNewTask","clearNewTaskData","finish","addIcon","getSvg","SvgIcon","Add","cancelIcon","Cancel","dateClass","dark","calendarTemplate","_templateObject4","classMap","dateToInputValue","_newTaskDueDate","handleDateChange","newTaskDetails","readOnly","nothing","_templateObject5","handleKeyDown","handleInput","_templateObject6","_templateObject7","_templateObject8","currentList","_templateObject9","_templateObject10","handleSelectionChanged","loadTasks","renderTaskDetails","context","list","taskDetailsTemplate","taskDueTemplate","dueDateTime","_templateObject11","Calendar","getDateString","dateTime","_templateObject12","taskDeleteTemplate","_templateObject13","_templateObject14","removeTask","Delete","_templateObject15","title","_templateObject16","renderTask","taskClasses","_templateObject17","handleTaskCheckClick","renderCompletedTask","complete","taskCheckContent","_templateObject18","CheckMark","_templateObject19","loadState","_callee2","lists","defaultList","_context2","_isLoadingTasks","_graph","forComponent","initialId","find","l","wellknownListName","targetId","_tasks","_loadingTasks","updateTaskStatus","taskStatus","taskIndex","_toConsumableArray","status","findIndex","t","_callee6","_context6","taskFilter","completedTasks","taskTemplates","repeat","completedTaskTemplates","sort","a","b","lastModifiedDateTime","_templateObject20","_templateObject21","displayName","_templateObject22","_b","toLocaleDateString","timeZone","unshift","element","luminance","baseLayerLuminance","getValueFor","isDark","SwatchRGB","create","Get","wrapMgt"],"sourceRoot":""}