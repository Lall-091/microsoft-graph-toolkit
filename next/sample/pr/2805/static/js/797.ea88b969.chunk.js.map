{"version":3,"file":"static/js/797.ea88b969.chunk.js","mappings":"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","sources":["../../../packages/mgt-react/src/generated/taxonomy-picker.ts","pages/Taxonomy/TaxonomyExplorer.tsx","pages/TaxonomyPage.tsx","../../../packages/mgt-components/dist/es6/components/sub-components/mgt-spinner/src/components/sub-components/mgt-spinner/mgt-spinner-css.ts","../../../packages/mgt-components/dist/es6/components/sub-components/mgt-spinner/src/components/sub-components/mgt-spinner/mgt-spinner.ts","../../../packages/mgt-react/src/generated/get.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { registerMgtTaxonomyPickerComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type TaxonomyPickerProps = {\n\ttermsetId?: string;\n\ttermId?: string;\n\tsiteId?: string;\n\tlocale?: string;\n\tversion?: string;\n\tplaceholder?: string;\n\tposition?: string;\n\tdefaultSelectedTermId?: string;\n\tselectedTerm?: MicrosoftGraph.TermStore.Term;\n\tdisabled?: boolean;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tselectionChanged?: (e: CustomEvent<MicrosoftGraph.TermStore.Term>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const TaxonomyPicker = wrapMgt<TaxonomyPickerProps>('taxonomy-picker', registerMgtTaxonomyPickerComponent);\n\n","import * as React from 'react';\nimport { Get, MgtTemplateProps, TaxonomyPicker } from '@microsoft/mgt-react';\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionPanel,\n  makeStyles,\n  shorthands,\n  Card,\n  CardHeader,\n  Caption1,\n  tokens,\n  Text\n} from '@fluentui/react-components';\nimport { TermStore } from '@microsoft/microsoft-graph-types';\nimport { TagMultipleRegular, TagRegular } from '@fluentui/react-icons';\n\nexport const TaxonomyExplorer: React.FunctionComponent = () => {\n  return (\n    <>\n      <Get resource=\"termStore/groups\" version=\"beta\">\n        <GroupTemplate template=\"default\" />\n      </Get>\n    </>\n  );\n};\n\nconst useStyles = makeStyles({\n  main: {\n    ...shorthands.gap('36px'),\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'wrap'\n  },\n\n  title: {\n    ...shorthands.margin(0, 0, '12px')\n  },\n\n  description: {\n    ...shorthands.margin(0, 0, '12px')\n  },\n\n  card: {\n    width: '480px',\n    maxWidth: '100%',\n    height: 'fit-content',\n    ...shorthands.margin('12px', 0)\n  },\n\n  caption: {\n    color: tokens.colorNeutralForeground3\n  },\n\n  icon: {\n    width: '24px',\n    height: '24px'\n  },\n\n  text: {\n    ...shorthands.margin(0)\n  },\n\n  groupPanel: {\n    ...shorthands.margin('12px', '24px')\n  },\n\n  termPanel: {\n    ...shorthands.margin('12px', '36px')\n  }\n});\n\nconst GroupTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [groups] = React.useState<any[]>(props.dataContext.value);\n\n  return (\n    <Accordion collapsible>\n      {groups.map(group => (\n        <AccordionItem value={group.id} key={group.id}>\n          <AccordionHeader icon={<TagMultipleRegular />}>{group.displayName}</AccordionHeader>\n          <AccordionPanel className={styles.groupPanel}>\n            <Get resource={`termStore/groups/${group.id}/sets`} version=\"beta\">\n              <SetTemplate template=\"default\" />\n            </Get>\n          </AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};\n\nconst SetTemplate = (props: MgtTemplateProps) => {\n  const styles = useStyles();\n  const [sets] = React.useState<any[]>(props.dataContext.value);\n  const [selectedTerm, setSelectedTerm] = React.useState<TermStore.Term | null>(null);\n\n  return (\n    <Accordion collapsible onToggle={() => setSelectedTerm(null)}>\n      {sets.map(set => (\n        <AccordionItem value={set.id} key={set.id}>\n          <AccordionHeader>{set.localizedNames[0].name}</AccordionHeader>\n          <AccordionPanel className={styles.termPanel}>\n            <TaxonomyPicker termsetId={set.id} selectionChanged={e => setSelectedTerm(e.detail)} />\n            {selectedTerm && (\n              <Card className={styles.card}>\n                <CardHeader\n                  image={<TagRegular className={styles.icon} />}\n                  header={<Text weight=\"semibold\">{selectedTerm.labels?.[0].name}</Text>}\n                  description={<Caption1 className={styles.caption}>{selectedTerm.id}</Caption1>}\n                />\n\n                {selectedTerm.descriptions?.length! > 0 && (\n                  <p className={styles.text}>{selectedTerm.descriptions?.[0].description}</p>\n                )}\n              </Card>\n            )}\n          </AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};\n","import * as React from 'react';\nimport { PageHeader } from '../components/PageHeader';\nimport { TaxonomyExplorer } from './Taxonomy/TaxonomyExplorer';\n\nconst TaxonomyPage: React.FunctionComponent = () => {\n  return (\n    <>\n      <PageHeader\n        title={'Taxonomy Explorer'}\n        description={'Use this taxonomy explorer to see all term groups, term sets and terms available'}\n      ></PageHeader>\n      <TaxonomyExplorer />\n    </>\n  );\n};\n\nexport default TaxonomyPage;\n","// THIS FILE IS AUTO GENERATED\n// ANY CHANGES WILL BE LOST DURING BUILD\n// MODIFY THE .SCSS FILE INSTEAD\n\nimport { css, CSSResult } from 'lit';\n/**\n * exports lit-element css\n * @export styles\n */\nexport const styles: CSSResult[] = [\n  css`\n:host([hidden]){display:none}:host{display:block;font-family:var(--default-font-family, \"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, \"BlinkMacSystemFont\", \"Roboto\", \"Helvetica Neue\", sans-serif);font-size:var(--default-font-size,14px);--theme-primary-color:#0078d7;--theme-dark-color:#005a9e}:focus-visible{outline-color:var(--focus-ring-color,Highlight);outline-color:var(--focus-ring-color,-webkit-focus-ring-color);outline-style:var(--focus-ring-style,auto)}.ms-icon{display:inline-block;font-family:FabricMDL2Icons;font-style:normal;font-weight:400;font-size:16px;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;margin:4px 0}.error{background-color:#fde7e9;padding-block:8px;padding-inline:8px 12px}.ms-icon-chevron-down::before{content:\"\\\\\\e70d\"}.ms-icon-chevron-up::before{content:\"\\\\\\e70e\"}.ms-icon-contact::before{content:\"\\\\\\e77b\"}.ms-icon-add-friend::before{content:\"\\\\\\e8fa\"}.ms-icon-outlook-logo-inverser::before{content:\"\\\\\\eb6d\"}\n`];","/**\n * -------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\n * See License in the project root for license information.\n * -------------------------------------------------------------------------------------------\n */\n\nimport { html } from 'lit';\nimport { MgtBaseComponent } from '@microsoft/mgt-element';\nimport { styles } from './mgt-spinner-css';\nimport { registerComponent } from '@microsoft/mgt-element';\n\nexport const registerMgtSpinnerComponent = () => registerComponent('spinner', MgtSpinner);\n\n/**\n * Custom Component used to handle loading state in components.\n *\n * @export MgtSpinner\n * @class MgtSpinner\n * @extends {MgtBaseComponent}\n */\nexport class MgtSpinner extends MgtBaseComponent {\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * user the `css` tag function.\n   */\n  public static get styles() {\n    return styles;\n  }\n\n  /**\n   * Render the loading spinner\n   *\n   * @returns\n   * @memberof MgtSpinner\n   */\n  public render() {\n    return html`<fluent-progress-ring title=\"spinner\"></fluent-progress-ring>`;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n"],"names":["TaxonomyPicker","wrapMgt","registerMgtTaxonomyPickerComponent","TaxonomyExplorer","_jsx","_Fragment","children","Get","resource","version","GroupTemplate","template","useStyles","makeStyles","main","_objectSpread","shorthands","gap","display","flexDirection","flexWrap","title","margin","description","card","width","maxWidth","height","caption","color","tokens","colorNeutralForeground3","icon","text","groupPanel","termPanel","props","styles","_React$useState","React","dataContext","value","groups","_slicedToArray","Accordion","collapsible","map","group","_jsxs","AccordionItem","id","AccordionHeader","TagMultipleRegular","displayName","AccordionPanel","className","concat","SetTemplate","_React$useState3","sets","_React$useState5","_React$useState6","selectedTerm","setSelectedTerm","onToggle","set","_selectedTerm$labels","_selectedTerm$descrip","_selectedTerm$descrip2","localizedNames","name","termsetId","selectionChanged","e","detail","Card","CardHeader","image","TagRegular","header","Text","weight","labels","Caption1","descriptions","length","PageHeader","css","_templateObject","_taggedTemplateLiteral","registerMgtSpinnerComponent","registerComponent","MgtSpinner","_MgtBaseComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","html","get","MgtBaseComponent","registerMgtGetComponent"],"sourceRoot":""}