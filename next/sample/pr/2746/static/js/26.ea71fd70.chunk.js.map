{"version":3,"file":"static/js/26.ea71fd70.chunk.js","mappings":"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","sources":["components/Loading.tsx","components/PageHeader.tsx","pages/Chats/ChatItem.tsx","pages/Chats/ChatListTemplate.tsx","pages/ChatPage.tsx","../../../packages/mgt-react/src/generated/get.ts"],"sourcesContent":["import * as React from 'react';\nimport { MgtTemplateProps, Spinner } from '@microsoft/mgt-react';\nimport { makeStyles } from '@fluentui/react-components';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 'calc(100vh - 300px)'\n  },\n  message: {\n    paddingLeft: '10px'\n  }\n});\n\nexport interface ILoadingProps extends MgtTemplateProps {\n  message?: string;\n}\n\nexport const Loading: React.FunctionComponent<ILoadingProps> = (props: ILoadingProps) => {\n  const styles = useStyles();\n  return (\n    <div className={styles.root}>\n      <Spinner />\n      <div className={styles.message}>\n        <span>{props.message || 'Loading...'}</span>\n      </div>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { Divider, makeStyles } from '@fluentui/react-components';\n\nexport interface IPageHeaderProps {\n  title: string;\n  description: string;\n}\n\nconst useStyles = makeStyles({\n  divider: {\n    alignItems: 'self-start',\n    paddingTop: '20px',\n    marginBottom: '20px'\n  }\n});\n\nexport const PageHeader: React.FunctionComponent<IPageHeaderProps> = props => {\n  const styles = useStyles();\n  return (\n    <div>\n      <h1>{props.title}</h1>\n      <div>{props.description}</div>\n      <Divider className={styles.divider} />\n    </div>\n  );\n};\n","import { Persona, makeStyles, mergeClasses, shorthands } from '@fluentui/react-components';\nimport { Providers } from '@microsoft/mgt-element';\nimport { MgtTemplateProps, Person, ViewType } from '@microsoft/mgt-react';\nimport { Chat, AadUserConversationMember } from '@microsoft/microsoft-graph-types';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { PeopleCommunityRegular, CalendarMonthRegular } from '@fluentui/react-icons';\n\nconst useStyles = makeStyles({\n  chat: {\n    paddingLeft: '5px',\n    paddingRight: '5px',\n    display: 'flex',\n    alignItems: 'center',\n    height: '50px',\n    cursor: 'pointer',\n    ':hover': {\n      backgroundColor: 'var(--colorNeutralBackground1Hover)'\n    }\n  },\n  active: {\n    backgroundColor: 'var(--colorNeutralBackground1Selected)'\n  },\n  person: {\n    '--person-avatar-size-small': '40px',\n    '& .fui-Persona__primaryText': {\n      fontSize: 'var(--fontSizeBase300);'\n    },\n    '& .fui-Persona__secondaryText': {\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      width: '200px',\n      display: 'inline-block',\n      ...shorthands.overflow('hidden')\n    }\n  },\n  messagePreview: {\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    width: '200px',\n    display: 'inline-block',\n    ...shorthands.overflow('hidden')\n  }\n});\n\nexport interface ChatInteractionProps {\n  onSelected: (selected: Chat) => void;\n  selectedChat?: Chat;\n}\n\ninterface ChatItemProps {\n  chat: Chat;\n  isSelected?: boolean;\n}\n\nconst getMessagePreview = (chat: Chat) => {\n  return chat?.lastMessagePreview?.body?.contentType === 'text' ? chat?.lastMessagePreview?.body?.content : '...';\n};\n\nconst ChatItem = ({ chat, isSelected, onSelected }: ChatItemProps & ChatInteractionProps) => {\n  const styles = useStyles();\n  const [myId, setMyId] = useState<string>();\n\n  useEffect(() => {\n    const getMyId = async () => {\n      const me = await Providers.me();\n      setMyId(me.id);\n    };\n    if (!myId) {\n      void getMyId();\n    }\n  }, [myId]);\n\n  const getOtherParticipantId = useCallback(\n    (chat: Chat) => {\n      const member = chat.members?.find(m => (m as AadUserConversationMember).userId !== myId);\n\n      if (member) {\n        console.log('member', member);\n        return (member as AadUserConversationMember).userId as string;\n      } else if (chat.members?.length === 1 && (chat.members[0] as AadUserConversationMember).userId === myId) {\n        return myId;\n      }\n\n      return undefined;\n    },\n    [myId]\n  );\n\n  const getGroupTitle = useCallback((chat: Chat) => {\n    let groupTitle: string | undefined = '';\n    if (chat.topic) {\n      groupTitle = chat.topic;\n    } else {\n      groupTitle = chat.members\n        ?.map(member => {\n          return member.displayName?.split(' ')[0];\n        })\n        .join(', ');\n    }\n\n    return groupTitle;\n  }, []);\n\n  return (\n    <>\n      {myId && (\n        <div className={mergeClasses(styles.chat, `${isSelected && styles.active}`)}>\n          {chat.chatType === 'oneOnOne' && (\n            <Person\n              userId={getOtherParticipantId(chat)}\n              view={ViewType.twolines}\n              avatarSize=\"auto\"\n              showPresence={true}\n              onClick={() => onSelected(chat)}\n              className={styles.person}\n            >\n              <MessagePreview template=\"line2\" chat={chat} />\n            </Person>\n          )}\n          {chat.chatType === 'group' && (\n            <div onClick={() => onSelected(chat)}>\n              <Persona\n                textAlignment=\"center\"\n                size=\"extra-large\"\n                name={getGroupTitle(chat)}\n                secondaryText={getMessagePreview(chat)}\n                avatar={{ icon: <PeopleCommunityRegular />, initials: null }}\n                className={styles.person}\n              />\n              <span></span>\n            </div>\n          )}\n          {chat.chatType === 'meeting' && (\n            <div onClick={() => onSelected(chat)}>\n              <Persona\n                textAlignment=\"center\"\n                size=\"extra-large\"\n                className={styles.person}\n                avatar={{ icon: <CalendarMonthRegular />, initials: null }}\n                name={getGroupTitle(chat)}\n                secondaryText={getMessagePreview(chat)}\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst MessagePreview = (props: MgtTemplateProps & ChatItemProps) => {\n  const styles = useStyles();\n\n  return (\n    <>\n      <span className={styles.messagePreview}>{getMessagePreview(props.chat)}</span>\n    </>\n  );\n};\n\nexport default ChatItem;\n","import React, { useState } from 'react';\nimport { MgtTemplateProps } from '@microsoft/mgt-react';\nimport { Chat } from '@microsoft/microsoft-graph-types';\nimport ChatItem, { ChatInteractionProps } from './ChatItem';\nimport { Chat as GraphChat } from '@microsoft/microsoft-graph-types';\n\nconst ChatListTemplate = (props: MgtTemplateProps & ChatInteractionProps) => {\n  const { value } = props.dataContext;\n  const chats: Chat[] = value;\n  const [selectedChat, setSelectedChat] = useState<GraphChat>(props.selectedChat || chats[0]);\n\n  const onChatSelected = React.useCallback(\n    (e: GraphChat) => {\n      setSelectedChat(e);\n      props.onSelected(selectedChat);\n    },\n    [setSelectedChat, selectedChat, props]\n  );\n\n  // Set the selected chat to the first chat in the list\n  // Fires only the first time the component is rendered\n  React.useEffect(() => {\n    onChatSelected(selectedChat);\n  });\n\n  const isChatActive = (chat: Chat) => {\n    if (selectedChat) {\n      return selectedChat && chat.id === selectedChat?.id;\n    }\n\n    return false;\n  };\n\n  console.log('chats', chats);\n  return (\n    <div>\n      {chats.map((c, index) => (\n        <ChatItem\n          key={c.id}\n          chat={c}\n          isSelected={(!selectedChat && index === 0) || isChatActive(c)}\n          onSelected={onChatSelected}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ChatListTemplate;\n","import * as React from 'react';\nimport { PageHeader } from '../components/PageHeader';\nimport { Get } from '@microsoft/mgt-react';\nimport { Loading } from '../components/Loading';\nimport {\n  shorthands,\n  makeStyles,\n  mergeClasses,\n  Button,\n  Dialog,\n  DialogTrigger,\n  DialogSurface,\n  DialogBody,\n  DialogTitle\n} from '@fluentui/react-components';\nimport { Chat as GraphChat } from '@microsoft/microsoft-graph-types';\nimport { Chat, NewChat } from '@microsoft/mgt-chat';\nimport ChatListTemplate from './Chats/ChatListTemplate';\n\nconst useStyles = makeStyles({\n  container: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  panels: {\n    ...shorthands.padding('10px')\n  },\n  main: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'nowrap',\n    width: '300px',\n    minWidth: '300px',\n    ...shorthands.overflow('auto'),\n    maxHeight: '80vh',\n    borderRightColor: 'var(--neutral-stroke-rest)',\n    borderRightStyle: 'solid',\n    borderRightWidth: '1px'\n  },\n  side: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexWrap: 'nowrap',\n    width: '80%',\n    ...shorthands.overflow('auto'),\n    maxHeight: '80vh',\n    height: '100%'\n  },\n  newChat: {\n    paddingBottom: '10px',\n    marginRight: '0px',\n    marginLeft: 'auto'\n  },\n  dialog: {\n    display: 'block'\n  }\n});\n\nconst ChatPage: React.FunctionComponent = () => {\n  const styles = useStyles();\n  const [selectedChat, setSelectedChat] = React.useState<GraphChat>();\n  const [isNewChatOpen, setIsNewChatOpen] = React.useState(false);\n\n  const chatSelected = (e: GraphChat) => {\n    if (e.id !== selectedChat?.id && isNewChatOpen) {\n      setIsNewChatOpen(false);\n    }\n    setSelectedChat(e);\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={'Chats'}\n        description={'Stay in touch with your teammates and navigate your chats'}\n      ></PageHeader>\n\n      <div className={styles.container}>\n        <div className={mergeClasses(styles.panels, styles.main)}>\n          <div className={styles.newChat}>\n            <Dialog open={isNewChatOpen}>\n              <DialogTrigger disableButtonEnhancement>\n                <Button appearance=\"primary\" onClick={() => setIsNewChatOpen(true)}>\n                  New Chat\n                </Button>\n              </DialogTrigger>\n              <DialogSurface>\n                <DialogBody className={styles.dialog}>\n                  <DialogTitle>New Chat</DialogTitle>\n                  <NewChat\n                    onChatCreated={chatSelected}\n                    onCancelClicked={() => {\n                      setIsNewChatOpen(false);\n                    }}\n                  ></NewChat>\n                </DialogBody>\n              </DialogSurface>\n            </Dialog>\n          </div>\n          <ChatList chatSelected={selectedChat} onChatSelected={setSelectedChat}></ChatList>\n        </div>\n        <div className={styles.side}>{selectedChat && <Chat chatId={selectedChat.id!}></Chat>}</div>\n      </div>\n    </>\n  );\n};\n\ninterface ChatListProps {\n  onChatSelected: (e: GraphChat) => void;\n  chatSelected: GraphChat | undefined;\n}\n\nconst ChatList = React.memo((props: ChatListProps) => {\n  const getPreviousDate = (months: number) => {\n    const date = new Date();\n    date.setMonth(date.getMonth() - months);\n    return date.toISOString();\n  };\n\n  return (\n    <Get\n      resource={`me/chats?$expand=members,lastMessagePreview&$orderBy=lastMessagePreview/createdDateTime desc&$filter=viewpoint/lastMessageReadDateTime ge ${getPreviousDate(\n        9\n      )}`}\n      scopes={['chat.read']}\n      cacheEnabled={true}\n    >\n      <ChatListTemplate\n        template=\"default\"\n        onSelected={props.onChatSelected}\n        selectedChat={props.chatSelected}\n      ></ChatListTemplate>\n      <Loading template=\"loading\" message={'Loading your chats...'}></Loading>\n    </Get>\n  );\n});\n\nexport default ChatPage;","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport { ResponseType,DataChangedDetail } from '@microsoft/mgt-components/dist/es6/exports';\nimport { registerMgtGetComponent } from '@microsoft/mgt-components/dist/es6/components/components';\nimport { TemplateContext,ComponentMediaQuery,TemplateRenderedData } from '@microsoft/mgt-element';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as MicrosoftGraphBeta from '@microsoft/microsoft-graph-types-beta';\nimport {wrapMgt} from '../Mgt';\n\nexport type GetProps = {\n\tresource?: string;\n\tscopes?: string[];\n\tversion?: string;\n\ttype?: ResponseType;\n\tmaxPages?: number;\n\tpollingRate?: number;\n\tcacheEnabled?: boolean;\n\tcacheInvalidationPeriod?: number;\n\tresponse?: any;\n\ttemplateContext?: TemplateContext;\n\tmediaQuery?: ComponentMediaQuery;\n\tdataChange?: (e: CustomEvent<DataChangedDetail>) => void;\n\ttemplateRendered?: (e: CustomEvent<TemplateRenderedData>) => void;\n}\n\nexport const Get = wrapMgt<GetProps>('get', registerMgtGetComponent);\n\n"],"names":["useStyles","makeStyles","root","display","justifyContent","alignItems","height","message","paddingLeft","Loading","props","styles","_jsxs","className","children","_jsx","Spinner","divider","paddingTop","marginBottom","PageHeader","title","description","Divider","chat","paddingRight","cursor","backgroundColor","active","person","fontSize","_objectSpread","whiteSpace","textOverflow","width","shorthands","overflow","messagePreview","getMessagePreview","_chat$lastMessagePrev","_chat$lastMessagePrev2","_chat$lastMessagePrev3","_chat$lastMessagePrev4","lastMessagePreview","body","contentType","content","MessagePreview","_Fragment","_ref","isSelected","onSelected","_useState","useState","_useState2","_slicedToArray","myId","setMyId","useEffect","getMyId","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","me","wrap","_context","prev","next","Providers","sent","id","stop","apply","arguments","getOtherParticipantId","useCallback","_chat$members","_chat$members2","member","members","find","m","userId","console","log","length","getGroupTitle","_chat$members3","groupTitle","topic","map","_member$displayName","displayName","split","join","mergeClasses","concat","chatType","Person","view","ViewType","twolines","avatarSize","showPresence","onClick","template","Persona","textAlignment","size","name","secondaryText","avatar","icon","PeopleCommunityRegular","initials","CalendarMonthRegular","chats","dataContext","value","selectedChat","setSelectedChat","onChatSelected","React","e","c","index","ChatItem","container","flexDirection","panels","padding","main","flexWrap","minWidth","maxHeight","borderRightColor","borderRightStyle","borderRightWidth","side","newChat","paddingBottom","marginRight","marginLeft","dialog","ChatList","Get","resource","months","date","Date","setMonth","getMonth","toISOString","getPreviousDate","scopes","cacheEnabled","ChatListTemplate","chatSelected","_React$useState","_React$useState2","_React$useState3","_React$useState4","isNewChatOpen","setIsNewChatOpen","Dialog","open","DialogTrigger","disableButtonEnhancement","Button","appearance","DialogSurface","DialogBody","DialogTitle","NewChat","onChatCreated","onCancelClicked","Chat","chatId","wrapMgt","registerMgtGetComponent"],"sourceRoot":""}